/*
The OpenTRV project licenses this file to you
under the Apache Licence, Version 2.0 (the "Licence");
you may not use this file except in compliance
with the Licence. You may obtain a copy of the Licence at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the Licence is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied. See the Licence for the
specific language governing permissions and limitations
under the Licence.

Author(s) / Copyright (s): Damon Hart-Davis 2016--2018
*/

/*
 * Driver for OTV0P2BASE_SensorAmbientLightOccupancy tests.
 *
 * These data sets are used to test key related and derived behaviours
 * from basic ambient light level sensing though to temperature setback levels,
 * thus providing an integration test for these components, and rolling stats.
 *
 * The basic by-minute driver will be promoted out
 * to where it can be shared between multiple test/modelling mechanisms.
 */

#include <stdint.h>
#include <gtest/gtest.h>
#include <OTV0p2Base.h>
#include <OTRadValve.h>
#include "OTV0P2BASE_SensorAmbientLightOccupancy.h"

#include "AmbientLightOccupancyDetectionTest.h"
using namespace OTV0P2BASE::PortableUnitTest;


// Set true to give basic per-sample stats results.
static constexpr bool sampleStats = false;
// Set true for verbose reporting.
static constexpr bool verbose = false;
// Lots of extra detail, generally should not be needed.
static constexpr bool veryVerbose = false && verbose;
// Generate output for graphing, eg with gnuplot, eg:
//     gnuplot ~/git/OTRadioLink/portableUnitTests/OTRadValve/AmbientLightOccupancyDetectionTest.gnuplot
// or to show extra columns of data for diagnostic purposes:
//     gnuplot -e "ncol=4" ~/git/OTRadioLink/portableUnitTests/OTRadValve/AmbientLightOccupancyDetectionTest.gnuplot
static constexpr bool graphOutput = false && verbose;

// Basic test of update() behaviour.
TEST(AmbientLightOccupancyDetection,updateBasics)
{
    // Check that initial update never indicates occupancy.
    OTV0P2BASE::SensorAmbientLightOccupancyDetectorSimple ds1;
    EXPECT_FALSE(ds1.update(0)) << "no initial update should imply occupancy";
    EXPECT_FALSE(ds1.update(0)) << "steady dark should not imply occupancy";
    EXPECT_FALSE(ds1.update(0)) << "steady dark should not imply occupancy";
    EXPECT_FALSE(ds1.update(0)) << "steady dark should not imply occupancy";
    EXPECT_FALSE(ds1.update(0)) << "steady dark should not imply occupancy";
    EXPECT_FALSE(ds1.update(0)) << "steady dark should not imply occupancy";
    // Check that update from 0 to max does force occupancy indication, after a steady period.
    EXPECT_TRUE(ds1.update(255)) << "update from 0 to 255 (max) illumination should signal occupancy at least after some time steady";
    OTV0P2BASE::SensorAmbientLightOccupancyDetectorSimple ds2;
    EXPECT_FALSE(ds2.update(255)) << "no initial update should imply occupancy";
    EXPECT_FALSE(ds2.update(255)) << "unchanged 255 (max) light level should not imply occupancy";
}

// Support state for simpleDataSampleRun().
namespace SDSR
    {
    static OTV0P2BASE::PseudoSensorOccupancyTracker occupancy;
    static OTV0P2BASE::SensorAmbientLightAdaptiveMock ambLight;
    // In-memory stats set.
    static OTV0P2BASE::NVByHourByteStatsMock hs;
    // Dummy (non-functioning) temperature and relative humidity sensors.
    static OTV0P2BASE::TemperatureC16Mock tempC16;
    static OTV0P2BASE::DummyHumiditySensor rh;
    // Two-subsamples per hour stats sampling.
    static OTV0P2BASE::ByHourSimpleStatsUpdaterSampleStats <
      decltype(hs), &hs,
      decltype(occupancy), &occupancy,
      decltype(ambLight), &ambLight,
      decltype(tempC16), &tempC16,
      decltype(rh), &rh,
      2
      > su;
    // Support for cttb instance.
    static OTRadValve::ValveMode valveMode;
    typedef OTRadValve::DEFAULT_ValveControlParameters parameters;
    static OTRadValve::TempControlSimpleVCPMock<parameters> tempControl;
    static OTRadValve::NULLActuatorPhysicalUI physicalUI;
    static OTRadValve::NULLValveSchedule schedule;
    // Simple-as-possible instance.
    static OTRadValve::ModelledRadValveComputeTargetTempBasic<
       parameters,
        &valveMode,
        decltype(tempC16),                            &tempC16,
        decltype(tempControl),                        &tempControl,
        decltype(occupancy),                          &occupancy,
        decltype(ambLight),                           &ambLight,
        decltype(physicalUI),                         &physicalUI,
        decltype(schedule),                           &schedule,
        decltype(hs),                                 &hs
        > cttb;
    // Occupancy callback.
    static bool logCallback;
    static int8_t cbProbable;
    static void (*const callback)(bool) = [](bool p)
        {
        cbProbable = p;
        if(p) { occupancy.markAsPossiblyOccupied(); } else { occupancy.markAsJustPossiblyOccupied(); }
if(veryVerbose && logCallback) { fprintf(stderr, " *Callback: %d\n", p); }
        };
    // Reset all these static entities but does not clear stats.
    static void resetAll()
        {
        // Seed PRNG for use in simulator; --gtest_shuffle will force it to change.
        srandom((unsigned) ::testing::UnitTest::GetInstance()->random_seed());
        OTV0P2BASE::seedRNG8(random() & 0xff, random() & 0xff, random() & 0xff);

        // Set up room to be dark and vacant.
        ambLight.resetAdaptive();
        occupancy.reset();
        // Flush any partial samples.
        su.reset();
        // Reset valve-level manual controls.
        valveMode.setWarmModeDebounced(true);
        physicalUI.read();
        // Turn off eco-bias.
        tempControl._setWarmTarget();
        // Install the occupancy tracker callback from the ambient light sensor.
        ambLight.setOccCallbackOpt(callback);
        }
    }
// Score actual setback against expected setback.
// This is arguably the key metric, ie closest to the desired outcone,
// of energy savings and comfort being achieved.
// Sets 'failed' to true if at least one metric was a fail for this point.
template<class Valve_parameters>
static void scoreSetback(
    const uint8_t setback, const ALDataSample::expectedSb_t expectedSb,
    const bool isRealRecord,
    SimpleFlavourStats &setbackInsufficient, SimpleFlavourStats &setbackTooFar,
    SimpleFlavourStats &setbackAtLeastDEFAULT,
    SimpleFlavourStats &setbackAtLeastECO,
    SimpleFlavourStats &setbackAtMAX,
    bool &failed)
    {
    // Note overall time/ticks/minutes spent at significant setbacks.
    setbackAtLeastDEFAULT.takeSample(setback >= Valve_parameters::SETBACK_DEFAULT);
    setbackAtLeastECO.takeSample(setback >= Valve_parameters::SETBACK_ECO);
    setbackAtMAX.takeSample(setback >= Valve_parameters::SETBACK_FULL);

    // The following processing only applies to
    // real records with specific predictions.
    if(!isRealRecord) { return; }

    bool tooFar = false;
    bool insufficient = false;

    switch(expectedSb)
        {
        // No scoring to do if no expectation.
        // This does not even get a tick for the counts.
        case ALDataSample::NO_SB_EXPECTATION: { return; }

        // Setback of zero, ie no setback.
        // Any setback is too much; zero setback is good.
        case ALDataSample::SB_NONE:
           {
           tooFar = (0 != setback);
           break;
           }

       // NONE/MIN setback mixture.
       // Up to MIN setback is acceptable.
       case ALDataSample::SB_NONEMIN:
           {
           tooFar = (setback > Valve_parameters::SETBACK_DEFAULT);
           break;
           }

       // Minimum setback.
       // Exactly MIN setback is acceptable.
       case ALDataSample::SB_MIN:
           {
           insufficient = (setback < Valve_parameters::SETBACK_DEFAULT);
           tooFar = (setback > Valve_parameters::SETBACK_DEFAULT);
           break;
           }

       // Some mixture of NONE to ECO.
       // A setback up to ECO inclusive is OK.
       case ALDataSample::SB_NONEECO:
           {
           tooFar = (setback > Valve_parameters::SETBACK_ECO);
           break;
           }

       // Some mixture of MIN and ECO.
       // A setback from MIN up to ECO inclusive is OK.
       case ALDataSample::SB_MINECO:
           {
           insufficient = (setback < Valve_parameters::SETBACK_DEFAULT);
           tooFar = (setback > Valve_parameters::SETBACK_ECO);
           break;
           }

        // ECO/medium setback.
        // Exactly ECO setback is acceptable.
        case ALDataSample::SB_ECO:
            {
            insufficient = (setback < Valve_parameters::SETBACK_ECO);
            tooFar = (setback > Valve_parameters::SETBACK_ECO);
            break;
            }

        // Some mixture of ECO and MAX.
        // A setback of at least ECO is good; there is no 'too much'.
        case ALDataSample::SB_ECOMAX:
            {
            insufficient = (setback < Valve_parameters::SETBACK_ECO);
            break;
            }

        // Some setback; anywhere from MIN to MAX, but not zero.
        // A setback less than MIN is insufficient'.
        case ALDataSample::SB_MINMAX:
            {
            insufficient = (setback < Valve_parameters::SETBACK_DEFAULT);
            break;
            }

        // Maximum setback.
        // A setback less than FULL is insufficient; there is no 'too much'.
        case ALDataSample::SB_MAX:
            {
            insufficient = (setback < Valve_parameters::SETBACK_FULL);
            break;
            }

        default: { FAIL(); return; } // Unexpected expectation value.
        }

    setbackTooFar.takeSample(tooFar);
    setbackInsufficient.takeSample(insufficient);

    if(tooFar || insufficient) { failed = true; }
    }

// Compute and when appropriate set stats parameters to the ambient light sensor.
// Assumes that it is called in strictly monotonic increasing time
// incrementing one minute each time, wrapping as 23:59.
// Before the first call on one run of data oldH should be set to 0xff.
void setTypeMinMax(OTV0P2BASE::SensorAmbientLightAdaptiveMock &ala,
        const blending_t blending,
        const uint8_t H, const uint8_t M,
        const uint8_t minToUse, const uint8_t maxToUse, const bool sensitive,
        const uint8_t byHourMeanI[24],
        const OTV0P2BASE::NVByHourByteStatsMock &hs,
        uint8_t &oldH,
        uint8_t &meanUsed)
    {
    meanUsed = 0xff;
    switch(blending)
        {
        case BL_NONE: // Use unblended mean for this hour.
            {
            meanUsed = byHourMeanI[H];
            if(H != oldH)
                {
                // When the hour rolls, set new stats for the detector.
                // Note that implementations be use the end of the hour/period
                // and other times.
                // The detector and caller should aim not to be hugely sensitive to the exact timing,
                // eg by blending prev/current/next periods linearly.
                ala.setTypMinMax(byHourMeanI[H], minToUse, maxToUse, sensitive);
                }
            break;
            }
        case BL_HALFHOURMIN: // Use blended (min) mean for final half hour hour.
            {
            const uint8_t thm = byHourMeanI[H];
            const uint8_t nhm = byHourMeanI[(H+1)%24];
            uint8_t m = thm; // Default to this hour's mean.
            if(M >= 30)
                {
                // In last half hour of each hour...
                if(0xff == thm) { m = nhm; } // Use next hour mean if none available for this hour.
                else if(0xff != nhm) { m = OTV0P2BASE::fnmin(nhm, thm); } // Take min when both hours' means available.
                }
            meanUsed = m;
            ala.setTypMinMax(m, minToUse, maxToUse, sensitive);
            break;
            }
        case BL_HALFHOUR: // Use blended mean for final half hour hour.
            {
            const uint8_t thm = byHourMeanI[H];
            const uint8_t nhm = byHourMeanI[(H+1)%24];
            uint8_t m = thm; // Default to this hour's mean.
            if(M >= 30)
                {
                // In last half hour of each hour...
                if(0xff == thm) { m = nhm; } // Use next hour mean if none available for this hour.
                else if(0xff != nhm) { m = uint8_t((thm + (uint_fast16_t)nhm + 1) / 2); } // Take mean when both hours' means available.
                }
            meanUsed = m;
            ala.setTypMinMax(m, minToUse, maxToUse, sensitive);
            break;
            }
        case BL_BYMINUTE: // Adjust blend by minute.
            {
            const uint8_t thm = byHourMeanI[H];
            const uint8_t nhm = byHourMeanI[(H+1)%24];
            uint8_t m = thm; // Default to this hour's mean.
            if(0xff == thm) { m = nhm; } // Use next hour's mean always if this one's not available.
            else
                {
                // Continuous blend.
                m = uint8_t(((((uint_fast16_t)thm) * (60-M)) + (((uint_fast16_t)nhm) * M) + 30) / 60);
                }
            meanUsed = m;
            ala.setTypMinMax(m, minToUse, maxToUse, sensitive);
            break;
            }
        case BL_FROMSTATS: // From the smoothed rolling stats.
            {
            const uint8_t m = hs.getByHourStatSimple(OTV0P2BASE::NVByHourByteStatsBase::STATS_SET_AMBLIGHT_BY_HOUR_SMOOTHED, H);
            meanUsed = m;
            if(H != oldH)
                {
                // When the hour rolls, set new stats for the detector.
                // Note that implementations be use the end of the hour/period
                // and other times.
                // The detector and caller should aim not to be hugely sensitive to the exact timing,
                // eg by blending prev/current/next periods linearly.
                ala.setTypMinMax(m, minToUse, maxToUse, sensitive);
                }
            break;
            }
        default: FAIL();
        }
    oldH = H;
    }

// Check that the occupancy/setback/etc results are acceptable for the data.
// Makes the test fail via EXPECT_XX() etc if not.
template<class Valve_parameters>
static void checkPerformanceAcceptableAgainstData(
        const SimpleFlavourStatCollection &flavourStats,
        const bool exemptFromNormalRatios)
    {
    const bool sensitive = flavourStats.getSensitive();
    const bool oddBlend = (flavourStats.getBlending() != BL_FROMSTATS);
    // Normal core operation.
    const bool normalOperation = !sensitive && !oddBlend;
    // Normal operation but a bit more sensitive, eg at comfort end of range.
    const bool normalSensitiveOperation = sensitive && !oddBlend;

    // Check that at least some sensor expectations have been set.
    ASSERT_NE(0U, flavourStats.roomDarkPredictionErrors.getSampleCount()) << "some known room dark values should be provided";
    ASSERT_NE(0U, flavourStats.occupancyTrackingFalseNegatives.getSampleCount()) << "some known occupancy values should be provided";

    // Check that there are not huge numbers of positive occupancy callbacks.
    // Anything over ~10%--25% is an indication of something broken..
    EXPECT_GE(0.15f, flavourStats.ambLightOccupancyCallbacks.getFractionFlavoured());

    // Check that there are not huge numbers of failed callback expectations.
    // We could allow more errors with an odd (non-deployment) blending.
    EXPECT_GE(0.04f, flavourStats.ambLightOccupancyCallbackPredictionErrors.getFractionFlavoured());

    // Check that there are not huge numbers of failed dark expectations.
    EXPECT_GE(0.125f, flavourStats.roomDarkPredictionErrors.getFractionFlavoured()) << flavourStats.roomDarkPredictionErrors.getSampleCount();

    // Check that there is a reasonable balance between room dark/light.
    // Should be between ~33% and ~67% for UK depending on time of year.
    if(!exemptFromNormalRatios)
        {
        const float rdFraction = flavourStats.roomDarkSamples.getFractionFlavoured();
        EXPECT_LE(0.2f, rdFraction);
        EXPECT_GE(0.8f, rdFraction);
        }

    // Check that number of false positives and negatives
    // from occupancy tracked fed from ambient light reports is OK.
    // When 'sensitive', eg in comfort mode,
    // more false positives and fewer false negatives are OK.
    // But accept more errors generally with non-preferred blending.
    // The FIRST (tighter) limit is the more critical one for normal operation.
    // Excess false positives likely inhibit energy saving.
    EXPECT_GE((normalOperation ? 0.1f : 0.15f), flavourStats.occupancyTrackingFalsePositives.getFractionFlavoured());
    // Excess false negatives may cause discomfort.
    EXPECT_GE((normalOperation ? 0.1f : 0.275f), flavourStats.occupancyTrackingFalseNegatives.getFractionFlavoured());
    if(normalSensitiveOperation)
        {
        // Err on the side of comfort.
        // Excess false positives likely inhibit energy saving.
        EXPECT_GE(0.12f, flavourStats.occupancyTrackingFalsePositives.getFractionFlavoured());
        // Excess false negatives may cause discomfort.
        EXPECT_GE(0.1f, flavourStats.occupancyTrackingFalseNegatives.getFractionFlavoured());
        }

    // Check that setback accuracy is OK.
    // Aim for a low error rate in either direction.
    // But err on the side of energy saving.
    if(normalOperation)
        {
        // Err towards energy saving.
        EXPECT_GE(0.091f, flavourStats.setbackInsufficient.getFractionFlavoured()) << flavourStats.setbackInsufficient.getSampleCount();
        EXPECT_GE(0.09f, flavourStats.setbackTooFar.getFractionFlavoured()) << flavourStats.setbackTooFar.getSampleCount();
        }
    else if(normalSensitiveOperation)
        {
        // Err torwards comfort.
        EXPECT_GE(0.125f, flavourStats.setbackInsufficient.getFractionFlavoured()) << flavourStats.setbackInsufficient.getSampleCount();
        EXPECT_GE(0.1f, flavourStats.setbackTooFar.getFractionFlavoured()) << flavourStats.setbackTooFar.getSampleCount();
        }
    else
        {
        EXPECT_GE(0.28f, flavourStats.setbackInsufficient.getFractionFlavoured()) << flavourStats.setbackInsufficient.getSampleCount();
        EXPECT_GE(0.28f, flavourStats.setbackTooFar.getFractionFlavoured()) << flavourStats.setbackTooFar.getSampleCount();
        }

    // Ensuring the room is at or close to temperature before actual occupancy
    // will make users happy (if it does not eat into savings too much).
    // Ideally anticipation should fail only rarely
    // ie most of the time setbacks should be nothing/minimal before occupancy,
    // assuming that the household has a regular routine that can be learnt.
    if(!exemptFromNormalRatios &&
       (flavourStats.occupancyAnticipationFailureNotAfterSleep.getSampleCount() >= 10))
        {
        EXPECT_GE((normalOperation ? 0.50f : 0.6f), flavourStats.occupancyAnticipationFailureNotAfterSleep.getFractionFlavoured()) << flavourStats.occupancyAnticipationFailureNotAfterSleep.getSampleCount();
        EXPECT_GE((normalOperation ? 0.12f : 0.4f), flavourStats.occupancyAnticipationFailureLargeNotAfterSleep.getFractionFlavoured()) << flavourStats.occupancyAnticipationFailureLargeNotAfterSleep.getSampleCount();
        if(normalSensitiveOperation)
            {
            // Reduce failures to anticipate when in sensitive mode.
            // The aim is to reduce instances of discomfort.
            EXPECT_GE(0.471f, flavourStats.occupancyAnticipationFailureNotAfterSleep.getFractionFlavoured()) << flavourStats.occupancyAnticipationFailureNotAfterSleep.getSampleCount();
            EXPECT_GE(0.115f, flavourStats.occupancyAnticipationFailureLargeNotAfterSleep.getFractionFlavoured()) << flavourStats.occupancyAnticipationFailureLargeNotAfterSleep.getSampleCount();
            }
        }

    // Compute nominal available savings
    // assuming typical values per degree of setback in UK.
    static constexpr float typicalSavingsPerDegreeUK = 0.08f;
    // Potential savings from FULL setback (out of entire day).
    // These savings can only materialise if the day is cold and heat is needed.
    const float potentialSavingsFromSetbackFULL =
        flavourStats.setbackAtMAX.getFractionFlavoured() *
        Valve_parameters::SETBACK_FULL * typicalSavingsPerDegreeUK;
    // Potential savings from ECO setback (out of entire day).
    // Excludes time at FULL.
    const float potentialSavingsFromSetbackECO =
        (flavourStats.setbackAtLeastECO.getFractionFlavoured() - flavourStats.setbackAtMAX.getFractionFlavoured()) *
        Valve_parameters::SETBACK_ECO * typicalSavingsPerDegreeUK;
    // Potential savings from significant (not minimum) setbacks.
    const float potentialSavingsFromSetbackAtLeastECO =
        potentialSavingsFromSetbackFULL + potentialSavingsFromSetbackECO;
    // Potential savings from ECO setback (out of entire day).
    // Excludes time at ECO or FULL.
    const float potentialSavingsFromSetbackDEFAULT =
        (flavourStats.setbackAtLeastDEFAULT.getFractionFlavoured() - flavourStats.setbackAtLeastECO.getFractionFlavoured()) *
        Valve_parameters::SETBACK_DEFAULT * typicalSavingsPerDegreeUK;
    // Potential savings from significant (not minimum) setbacks.
    const float potentialSavingsFromSetbackAtLeastDEFAULT =
        potentialSavingsFromSetbackAtLeastECO + potentialSavingsFromSetbackDEFAULT;

    // Enough ticks/minutes for a day of data and then some
    // to allow vacancy and dark periods and so on to operate.
    static constexpr unsigned ticksForMoreThan24h = 1500;
    const unsigned minutes = flavourStats.setbackAtMAX.getFlavouredCount();

    // When data sample is >> 1 day,
    // check that FULL setback is achieved for a reasonable fraction,
    // eg at least 4h/day.
    if((minutes > ticksForMoreThan24h) && !exemptFromNormalRatios)
        { EXPECT_LE(4.0f/24, flavourStats.setbackAtMAX.getFractionFlavoured()); }

    // When data sample is >> 1 day,
    // check that a minimum acceptable potential savings target is met
    // counting all setbacks.
    // This is the saving over a simple TRV and without a central heating timer.
    // Target is 30% for lone radiator valve without boiler control;
    // insist on most of that when not in sensitive mode,
    // and a little lower ambition in sensitive mode (eg comfort-driven).
    // This target is a mean over reprepsentative scenarios;
    // the threshold all !exemptFromNormalRatios must pass is a little lower.
// FIXME: >=25% primary target for all individual test cases.
    if((minutes > ticksForMoreThan24h) && !exemptFromNormalRatios)
        {
        EXPECT_LE(normalOperation ? 0.23f : 0.19f, potentialSavingsFromSetbackAtLeastDEFAULT);
        if(normalSensitiveOperation)
            { EXPECT_LE(0.205f, potentialSavingsFromSetbackAtLeastDEFAULT); }
        }

    // Print a summary of key stats to eyeball (if not an odd blend).
    // These should be subject to more automated numerical analysis elsewhere.
    // Always print the potential-savings single-line summary.
    if(!oddBlend)
        {
        if(verbose)
            {
            fprintf(stderr, "Performance stats summary:\n");
            if(sensitive) { fprintf(stderr, " (sensitive)\n"); }
            fprintf(stderr, " Fraction of ticks with occupancy callbacks: %f\n",
                flavourStats.ambLightOccupancyCallbacks.getFractionFlavoured());
            fprintf(stderr, " Fraction setback at FULL (potential savings): %f ie %fh/d (%f)\n",
                flavourStats.setbackAtMAX.getFractionFlavoured(),
                24 * flavourStats.setbackAtMAX.getFractionFlavoured(),
                potentialSavingsFromSetbackFULL);
            fprintf(stderr, " Fraction setback at ECO or more (potential savings at ECO only): %f ie %fh/d (%f)\n",
                flavourStats.setbackAtLeastECO.getFractionFlavoured(),
                24 * flavourStats.setbackAtLeastECO.getFractionFlavoured(),
                potentialSavingsFromSetbackECO);
            fprintf(stderr, " Fraction setback at DEFAULT or more (potential savings at DEFAULT only): %f ie %fh/d (%f)\n",
                flavourStats.setbackAtLeastDEFAULT.getFractionFlavoured(),
                24 * flavourStats.setbackAtLeastDEFAULT.getFractionFlavoured(),
                potentialSavingsFromSetbackDEFAULT);
            }
        if(sampleStats)
            {
            fprintf(stderr, " Potential savings from setbacks %s: %.1f%%\n",
                (sensitive ? "(sensitive)" : ""),
                100 * potentialSavingsFromSetbackAtLeastDEFAULT);
            fprintf(stderr, "  Correct anticipatory reduced setbacks %.1f%%\n",
                100 * (1 - flavourStats.occupancyAnticipationFailureNotAfterSleep.getFractionFlavoured()));
            }
        }
    }

// Do a simple run over the supplied data, one call per simulated minute until the terminating record is found.
// Must be called with 1 or more data rows in ascending time with a terminating (empty) entry.
// Repeated rows with the same light value and expected result can be omitted
// as they will be synthesised by this routine for each virtual minute until the next supplied item.
// Ensures that any required predictions/detections in either direction are met.
// Can be supplied with nominal long-term rolling min and max
// or they can be computed from the data supplied (0xff implies no data).
// Can be supplied with nominal long-term rolling mean levels by hour,
// or they can be computed from the data supplied
// (NULL means none supplied, 0xff entry means none for given hour).
// Uses the update() call for the main simulation.
// Uses the setTypMinMax() call as the hour rolls
// or in more complex blended-stats modes to test fragility;
// runs with 'sensitive' in both states to verify algorithm's robustness.
// Will fail if an excessive amount of the time occupancy is predicted.
//   * data  {}=terminated in-time-order real data set
//         annotated with expected values; never NULL
//   * exemptFromNormalRatios  minimum times at significant setbacks/levels
//         (to enable significant energy savings) will be enabled
//         unless this is true
//   * nonSensitive  if non-NULL, has normal run results written to it
//         and may suppress computation of any other stats sets
void simpleDataSampleRun(const ALDataSample *const data,
                         const bool exemptFromNormalRatios = false,
                         SimpleFlavourStatCollection *const nonSensitive = NULL)
    {
    ASSERT_TRUE(NULL != data);
    ASSERT_FALSE(data->isEnd()) << "do not pass in empty data set";

    // If true then only compute main (non-sensitive, normal blending) result.
    const bool nonSensitiveOnly = (NULL != nonSensitive);

    // Clear stats backing store.
    SDSR::hs.zapStats();

    SDSR::logCallback = false;

    // First count records and set up testing state.
    // The ambient light sensor is not being fed back stats
    // with setTypMinMax() and so is using its default parameters.

    // Clear all state in static instances.
    SDSR::resetAll();
    // Ambient light sensor instance under test.
    OTV0P2BASE::SensorAmbientLightAdaptiveMock &ala = SDSR::ambLight;
    // Occupancy tracker instance under test, to check system behaviour.
    OTV0P2BASE::PseudoSensorOccupancyTracker &tracker = SDSR::occupancy;

    // Some basic sense-checking of the set-up state.
    ASSERT_EQ(0, tracker.get());
    ASSERT_FALSE(tracker.isLikelyOccupied());
    // As room starts dark and vacant, expect a setback initially.
    static constexpr uint8_t WARM = SDSR::parameters::WARM;
    static constexpr uint8_t FROST = SDSR::parameters::FROST;
    ASSERT_GE(WARM, SDSR::cttb.computeTargetTemp());
    ASSERT_LE(FROST, SDSR::cttb.computeTargetTemp());
    // Check system in non-sensitive mode, usually with ecoBias() off.
    ASSERT_TRUE(SDSR::tempControl.hasEcoBias());

    // Count of number of records.
    int nRecords = 0;
    // Count number of records with explicit expected occupancy response assertion.
    int nOccExpectation = 0;
    // Count number of records with explicit expected room-dark response assertion.
    int nRdExpectation = 0;
    // Compute own values for min, max, etc.
    int minI = 256;
    int maxI = -1;
    uint8_t byHourMeanI[24];
    int byHourMeanSumI[24]; memset(byHourMeanSumI, 0, sizeof(byHourMeanSumI));
    int byHourMeanCountI[24]; memset(byHourMeanCountI, 0, sizeof(byHourMeanCountI));
    const unsigned long firstMinute = data->currentMinute();
    unsigned long lastMinute = firstMinute;
    for(const ALDataSample *dp = data; !dp->isEnd(); ++dp)
        {
        if(dp > data)
            {
            // Time must increase strictly monotonically,
            // but quietly skip second and subsequent samples in one minute.
            if((dp-1)->currentMinute() == dp->currentMinute())
                {
if(veryVerbose) { fprintf(stderr, "Skipping non-initial samples in %dT%.2d:%.2d\n", dp->d, dp->H, dp->M); }
                continue;
                }
            ASSERT_LT((dp-1)->currentMinute(), dp->currentMinute()) << "record times must increase strictly monotonically in time: prev " <<int((dp-1)->d)<<"T"<<int((dp-1)->H)<<":"<<int((dp-1)->M) << " vs current "<<int(dp->d)<<"T"<<int(dp->H)<<":"<<int(dp->M);
            }
        ++nRecords;
        const int8_t neo = ALDataSample::NO_OCC_EXPECTATION;
        if(neo != dp->expectedOcc) { ++nOccExpectation; }
        const int8_t ner = ALDataSample::NO_RD_EXPECTATION;
        if(ner != dp->expectedRd) { ++nRdExpectation; }
        unsigned long currentMinute = dp->currentMinute();
        do  {
            const uint8_t level = dp->L;
            if((int)level < minI) { minI = level; }
            if((int)level > maxI) { maxI = level; }
            const uint8_t H = (currentMinute % 1440) / 60;
            const uint8_t M = (currentMinute % 60);
            SDSR::hs._setHour(H);
            byHourMeanSumI[H] += level;
            ++byHourMeanCountI[H];
            ++currentMinute;
            ala.set(dp->L); ala.read(); tracker.read();
            if(29 == M) { SDSR::su.sampleStats(false, H); }
            if(59 == M) { SDSR::su.sampleStats(true, H); }
            lastMinute = currentMinute;
//if(29 == M) { fprintf(stderr, " >occ=%d (%d)\n", SDSR::hs.getByHourStatRTC(SDSR::hs.STATS_SET_OCCPC_BY_HOUR_SMOOTHED), tracker.get()); }
//if(59 == M) { fprintf(stderr, ">>occ=%d (%d)\n", SDSR::hs.getByHourStatRTC(SDSR::hs.STATS_SET_OCCPC_BY_HOUR_SMOOTHED), tracker.get()); }
            } while((!(dp+1)->isEnd()) && (currentMinute < (dp+1)->currentMinute()));
        }
//    const unsigned long totalMinutes = lastMinute - firstMinute + 1;
    // Days spanned; strictly positive.
    const unsigned long totalDaysSpanned = (lastMinute / 1440) - (firstMinute / 1440) + 1;
    EXPECT_TRUE((nOccExpectation > 0) || (nRdExpectation > 0)) << "must assert some expected predictions";
    for(int i = 24; --i >= 0; )
        {
        if(0 != byHourMeanCountI[i])
            { byHourMeanI[i] = (uint8_t)((byHourMeanSumI[i] + (byHourMeanCountI[i]>>1)) / byHourMeanCountI[i]); }
        else { byHourMeanI[i] = 0xff; }
        }

    // Take an initial copy of the stats.
    const OTV0P2BASE::NVByHourByteStatsMock hsInitCopy = SDSR::hs;

    const uint8_t minToUse = hsInitCopy.getMinByHourStat(hsInitCopy.STATS_SET_AMBLIGHT_BY_HOUR_SMOOTHED);
    const uint8_t maxToUse = hsInitCopy.getMaxByHourStat(hsInitCopy.STATS_SET_AMBLIGHT_BY_HOUR_SMOOTHED);

    // Dump some of the data collected.
    if(verbose)
        {
        fprintf(stderr, "STATS:\n");

        fprintf(stderr, "  min: %d\n", minI);
        fprintf(stderr, "  max: %d\n", maxI);

        fprintf(stderr, "  min from stats: %d\n", minToUse);
        fprintf(stderr, "  max from stats: %d\n", maxToUse);

        fprintf(stderr, "  mean ambient light level by hour:");
        for(int i = 0; i < 24; ++i)
            {
            fputc(' ', stderr);
            const uint8_t v = byHourMeanI[i];
            if(0xff == v) { fputc('-', stderr); }
            else { fprintf(stderr, "%d", (int)v); }
            }
        fprintf(stderr, "\n");
        }

    // Now run through all the data checking responses.
    // Run simulation with different stats blending types
    // (preferred and one non-standard one each time)
    // to ensure that occupancy detection, etc, is robust.
    // The BL_FROMSTATS case is most like the real embedded code.
    static_assert(0 == BL_FROMSTATS, "BL_FROMSTATS must be 0");
    const uint8_t nonStdBlend = uint8_t(1 + unsigned(random()) % (BL_END-1));
//    for(uint8_t blending = 0; blending < BL_END; ++blending)
    for(int b = 0; b <= (!nonSensitiveOnly ? 1 : 0); ++b)
        {
        const uint8_t blending = (0 == b) ? (uint8_t) BL_FROMSTATS : nonStdBlend;
        const bool oddBlend = (BL_FROMSTATS != blending);
if(verbose) { fprintf(stderr, "blending = %d\n", blending); }
        SCOPED_TRACE(testing::Message() << "blending " << (int)blending);
        // The preferred blend (most like a real deployment) is FROMSTATS.

        // Run simulation at both sensitivities.
        int nOccupancyReportsSensitive = 0;
        int nOccupancyReportsNotSensitive = 0;
        for(int s = 0; s <= (!nonSensitiveOnly ? 1 : 0); ++s)
            {
            const bool sensitive = (0 != s);
if(verbose) { fputs(sensitive ? "sensitive\n" : "not sensitive\n", stderr); }
            SCOPED_TRACE(testing::Message() << "sensitive " << sensitive);

            // Since many algorithms may reduce sensitivity with ECO bias,
            // may that here.
            if(sensitive) { SDSR::tempControl._setWarmTarget(SDSR::parameters::TEMP_SCALE_MID+1); }
            else { SDSR::tempControl._setWarmTarget(); }
            ASSERT_TRUE(sensitive != SDSR::tempControl.hasEcoBias());

            // The temperatures used should not be at unrepresentative extremes.
            ASSERT_FALSE(SDSR::tempControl.isComfortTemperature(SDSR::tempControl.getWARMTargetC()));
            ASSERT_FALSE(SDSR::tempControl.isEcoTemperature(SDSR::tempControl.getWARMTargetC()));

            // Reset stats to end of main warm-up run.
            SDSR::hs = hsInitCopy;

            // Now run one or more warmups to get stats into correct state.
            // More than one warm-up run may be required for stats to settle.
            // A certain number of days' stats setting is required.
            // Stats are rolled over from the warmup(s) to the final run.
            // Results will be ignored during this warmup.
            // Should be no more than ~1 week.
            static constexpr int minDaysWarmup = 8;
            const int warmupRuns = (totalDaysSpanned<2) ? int(minDaysWarmup) :
                OTV0P2BASE::fnmax(1, int(minDaysWarmup / (totalDaysSpanned-1)));
            for(int w = -warmupRuns; w <= 0; ++w)
                {
                const bool warmup = (w < 0);

                // Suppress most reporting for odd blends and in warmup.
const bool verboseOutput = !warmup && (veryVerbose || (verbose && !oddBlend));

SDSR::logCallback = verboseOutput;

// Dump some of the data collected.
if(verboseOutput)
    {
    fprintf(stderr, " Post-warmup stats:\n");

    fprintf(stderr, " smoothed ambient light level: ");
    for(int i = 0; i < 24; ++i)
        {
        fputc(' ', stderr);
        const uint8_t v = hsInitCopy.getByHourStatSimple(OTV0P2BASE::NVByHourByteStatsBase::STATS_SET_AMBLIGHT_BY_HOUR_SMOOTHED, i);
        if(0xff == v) { fputc('-', stderr); }
        else { fprintf(stderr, "%d", v); }
        }
    fprintf(stderr, "\n");

    fprintf(stderr, " smoothed occupancy: ");
    for(int i = 0; i < 24; ++i)
        {
        fputc(' ', stderr);
        const uint8_t v = hsInitCopy.getByHourStatSimple(OTV0P2BASE::NVByHourByteStatsBase::STATS_SET_OCCPC_BY_HOUR_SMOOTHED, i);
        if(0xff == v) { fputc('-', stderr); }
        else { fprintf(stderr, "%d", v); }
        }
    fprintf(stderr, "\n");
    }

const bool doGraph = graphOutput && !warmup && !oddBlend && !sensitive;
if(doGraph)
    {
    // All lines for graphing start with "G" and a space.
    // May add other diagnostic columns such as callback events.
    fprintf(stdout, "G - light%% occ%% setback%% oltt%%\n");
    }

                // Fresh behaviour stats each run, esp non-warmup run.
                SimpleFlavourStatCollection flavourStats(sensitive, (blending_t)blending);

                // Clear all state in static instances (except stats).
                SDSR::resetAll();
                // Ambient light sensor instance under test.
                OTV0P2BASE::SensorAmbientLightAdaptiveMock &ala = SDSR::ambLight;
                // Occupancy tracker instance under test, to check system behaviour.
                OTV0P2BASE::PseudoSensorOccupancyTracker &tracker = SDSR::occupancy;
                ASSERT_EQ(0, tracker.get());
                ASSERT_FALSE(tracker.isLikelyOccupied());

                uint8_t oldH = 0xff; // Used to detect hour rollover.
                for(const ALDataSample *dp = data; !dp->isEnd(); ++dp)
                    {
                    unsigned long currentMinute = dp->currentMinute();
                    do  {
                        const uint8_t D = (currentMinute / 1440);
                        const uint8_t H = (currentMinute % 1440) / 60;
                        const uint8_t M = (currentMinute % 60);
                        SDSR::hs._setHour(H);
                        uint8_t meanUsed = 0xff;
                        setTypeMinMax(ala,
                                (blending_t)blending,
                                H, M,
                                minToUse, maxToUse, sensitive,
                                byHourMeanI,
                                hsInitCopy,
                                oldH,
                                meanUsed);

                        // Capture some 'before' values for failure analysis.
                        const uint8_t beforeSteadyTicks = ala._occDet._getSteadyTicks();
                        const uint8_t beforeOccupancyValue = tracker.get();
                        const uint8_t beforeSetbackC = SDSR::tempControl.getWARMTargetC() - SDSR::cttb.computeTargetTemp();
                        const uint16_t beforeDarkMinutes = ala.getDarkMinutes();

                        // About to perform another virtual minute 'tick' update.
                        SDSR::cbProbable = -1; // Collect occupancy prediction (if any) from call-back.
                        ala.set(dp->L);
                        ala.read();
                        tracker.read();

//fprintf(stderr, "L=%d @ %dT%d:%.2d\n", dp->L, D, H, M);
const int8_t setback = SDSR::tempControl.getWARMTargetC() - SDSR::cttb.computeTargetTemp();
if(doGraph)
{
//const uint8_t lmean = SDSR::hs.getByHourStatSimple(SDSR::hs.STATS_SET_AMBLIGHT_BY_HOUR_SMOOTHED, H);
//const uint8_t omean = SDSR::hs.getByHourStatSimple(SDSR::hs.STATS_SET_OCCPC_BY_HOUR_SMOOTHED, H);
const uint8_t oltt = SDSR::hs.countStatSamplesBelow(OTV0P2BASE::NVByHourByteStatsBase::STATS_SET_OCCPC_BY_HOUR_SMOOTHED, SDSR::hs.getByHourStatRTC(OTV0P2BASE::NVByHourByteStatsBase::STATS_SET_OCCPC_BY_HOUR_SMOOTHED, OTV0P2BASE::NVByHourByteStatsBase::SPECIAL_HOUR_CURRENT_HOUR));
fprintf(stdout, "G %dT%d:%.2d %.3g %.3g %.3g %.3g\n", D, H, M, dp->L/2.55f, tracker.get()/1.0f, setback/(0.01f * SDSR::parameters::SETBACK_FULL), /*omean/1.0f*/ oltt/0.23f);
}

                        // Get hourly stats sampled and updated.
                        if(29 == M) { SDSR::su.sampleStats(false, H); }
                        if(59 == M) { SDSR::su.sampleStats(true, H); }

//if(veryVerbose && tracker.isLikelyOccupied()) { fprintf(stderr, "O=%d @ %dT%d:%.2d\n", (int)tracker.get(), D, H, M); }

                        // When room becomes occupied
                        // note if failed to have reduced the setback beforehand
                        // to have allowed the room to come up to temperature.
                        // For now this ignores instances after a long darkness.
                        if((0 == beforeOccupancyValue) && (0 != tracker.get()) &&
                           (beforeDarkMinutes < 6*60))
                            {
                            const bool setbackTooLarge = beforeSetbackC > SDSR::parameters::SETBACK_DEFAULT;
                            const bool setbackFarTooLarge = beforeSetbackC > SDSR::parameters::SETBACK_ECO;
                            flavourStats.occupancyAnticipationFailureNotAfterSleep.takeSample(setbackTooLarge);
                            flavourStats.occupancyAnticipationFailureLargeNotAfterSleep.takeSample(setbackFarTooLarge);
                            }

                        // True if this datum is a real non-interpolated record.
                        const bool isRealRecord = (currentMinute == dp->currentMinute());

                        // Check predictions/calculations against explicit expectations.
                        const bool predictedRoomDark = ala.isRoomDark();
                        flavourStats.roomDarkSamples.takeSample(predictedRoomDark);
                        const int8_t expectedRoomDark = (!isRealRecord) ? ALDataSample::NO_RD_EXPECTATION : dp->expectedRd;
                        // Collect occupancy prediction (if any) from call-back.
                        const OTV0P2BASE::SensorAmbientLightOccupancyDetectorInterface::occType predictionOcc =
                            (-1 == SDSR::cbProbable) ? occType::OCC_NONE :
                                ((0 == SDSR::cbProbable) ? occType::OCC_WEAK : occType::OCC_PROBABLE);
//if(veryVerbose && (-1 != cbProbable)) { fprintf(stderr, "  occupancy callback=%d @ %dT%d:%.2d\n", cbProbable, D, H, M); }
                        flavourStats.ambLightOccupancyCallbacks.takeSample((-1 != SDSR::cbProbable));
                        // Collect occupancy tracker prediction and error.
                        if(isRealRecord && (ALDataSample::UNKNOWN_ACT_OCC != dp->actOcc))
                            {
                            const bool trackedLikelyOccupancy = tracker.isLikelyOccupied();
                            const bool actOcc = bool(dp->actOcc);
if(verbose && !warmup && (trackedLikelyOccupancy != actOcc)) { fprintf(stderr, "!!!actual occupancy=%d @ %dT%d:%.2d L=%d mean=%d tracker=%d\n", dp->actOcc, D, H, M, dp->L, meanUsed, (int)tracker.get()); }
                            flavourStats.occupancyTrackingFalseNegatives.takeSample(actOcc && !trackedLikelyOccupancy);
                            flavourStats.occupancyTrackingFalsePositives.takeSample(!actOcc && trackedLikelyOccupancy);
                            }

if(veryVerbose && verboseOutput && !warmup /*&& isRealRecord*/) { fprintf(stderr, "  tS=%d @ %dT%d:%.2d\n", setback, D, H, M); }
                        bool failedSetbackExpectations = false;
                        scoreSetback<SDSR::parameters>(setback, dp->expectedSb,
                            isRealRecord,
                            flavourStats.setbackInsufficient, flavourStats.setbackTooFar,
                            flavourStats.setbackAtLeastDEFAULT,
                            flavourStats.setbackAtLeastECO,
                            flavourStats.setbackAtMAX,
                            failedSetbackExpectations);
if(verbose && !warmup && failedSetbackExpectations) { fprintf(stderr, "!!!tS=%d @ %dT%d:%.2d expectation=%d\n", setback, D, H, M, dp->expectedSb); }

                        // Note that for all synthetic ticks the expectation is removed (since there is no level change).
                        const int8_t expectedOcc = (!isRealRecord) ? ALDataSample::NO_OCC_EXPECTATION : dp->expectedOcc;
if(veryVerbose && verboseOutput && !warmup && isRealRecord && (occType::OCC_NONE != predictionOcc)) { fprintf(stderr, "  predictionOcc=%d @ %dT%d:%.2d L=%d mean=%d min=%d max=%d beforeSteadyTicks=%d\n", predictionOcc, D, H, M, dp->L, meanUsed, minToUse, maxToUse, beforeSteadyTicks); }
                        if(ALDataSample::NO_OCC_EXPECTATION != expectedOcc)
                            {
                            flavourStats.ambLightOccupancyCallbackPredictionErrors.takeSample(expectedOcc != predictionOcc);
if(verbose && !warmup && (expectedOcc != predictionOcc)) { fprintf(stderr, "!!!expectedOcc=%d @ %dT%d:%.2d L=%d mean=%d min=%d max=%d beforeSteadyTicks=%d\n", expectedOcc, D, H, M, dp->L, meanUsed, minToUse, maxToUse, beforeSteadyTicks); }
                            }
                        if(ALDataSample::NO_RD_EXPECTATION != expectedRoomDark)
                            {
                            flavourStats.roomDarkPredictionErrors.takeSample((bool)expectedRoomDark != predictedRoomDark);
if(verbose && !warmup && ((bool)expectedRoomDark != predictedRoomDark)) { fprintf(stderr, "!!!expectedDark=%d @ %dT%d:%.2d L=%d mean=%d\n", expectedRoomDark, D, H, M, dp->L, meanUsed); }
                            }

                        ++currentMinute;
                        } while((!(dp+1)->isEnd()) && (currentMinute < (dp+1)->currentMinute()));
                    }

                // Don't test/save results in warmup run.
                if(!warmup)
                    {
                    checkPerformanceAcceptableAgainstData<SDSR::parameters>(
                        flavourStats,
                        exemptFromNormalRatios);
                    // Allow check in outer loop that sensitive mode generates
                    // at least as many reports as non-sensitive mode.
                    if(sensitive)
                        { nOccupancyReportsSensitive = flavourStats.ambLightOccupancyCallbacks.getFlavouredCount(); }
                    else
                        { nOccupancyReportsNotSensitive = flavourStats.ambLightOccupancyCallbacks.getFlavouredCount(); }
                    if(NULL != nonSensitive) { *nonSensitive = flavourStats; }
                    }
                }
            }
        // Check that sensitive mode generates at least as many reports as non.
        if(!nonSensitiveOnly)
            { EXPECT_LE(nOccupancyReportsNotSensitive, nOccupancyReportsSensitive) << "expect sensitive never to generate fewer reports"; }
        }
    }

// Basic test of update() behaviour.
TEST(AmbientLightOccupancyDetection,simpleDataSampleRun)
{
    simpleDataSampleRun(trivialSample1);
    simpleDataSampleRun(trivialSample2);
    simpleDataSampleRun(trivialSample3);
}

// Include static data set.
#include "AmbientLightOccupancyDetectionTest_sample1gBriefLightOn.h"
// Test of suppression of response with brief light on in middle of night.
// Partly synthetic data since light was not on long enough to be TXed!
TEST(AmbientLightOccupancyDetection,sample1gBriefLightOn)
{
    simpleDataSampleRun(OTV0P2BASE::PortableUnitTest::DATA::sample1gBriefLightOn);
}

// "3l" 2016/10/08+09 test set with tough occupancy to detect in the evening up to 21:00Z and in the morning from 07:09Z then  06:37Z.
static const ALDataSample sample3lHard[] =
    {
{8,0,1,1, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Definitely not occupied; should be at least somewhat setback immediately.
{8,0,17,1, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Definitely not occupied; should be at least somewhat setback immediately.
//...
{8,4,57,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Not enough rise to indicate occupation, still dark, running long enough for max setback.
{8,5,9,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Still dark, running long enough for max setback.
//...
{8,6,21,1},
{8,6,29,2, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // May have reduced setback, anticipating occupancy.
{8,6,33,2},
{8,6,45,2},
{8,6,57,2, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Not enough light to indicate occupation, dark.  My have reduced setback, anticipating occupancy.
{8,7,9,14, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_MINMAX},  // Temporarily occupied: curtains drawn?  Borderline dark?  May have reduced setback, anticipating occupancy?
{8,7,17,35},
{8,7,21,38},
{8,7,33,84, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONE}, // Lights on or more curtains drawn?  Possibly occupied.
{8,7,37,95},
{8,7,49,97}, // Was: "occType::OCC_NONE, not enough rise to be occupation" but in this case after likely recent OCC_PROBABLE not materially important.
{8,7,57,93, occType::OCC_NONE, false}, // Fall is not indicative of occupation.
{8,8,5,98, occType::OCC_NONE, false}, // Sun coming up: not enough rise to indicate occupation.
{8,8,13,98},
{8,8,17,93},
{8,8,25,79},
{8,8,33,103},
{8,8,41,118},
{8,8,49,106},
{8,8,53,92},
{8,8,57,103},
{8,9,5,104, occType::OCC_NONE, false, false}, // Light, unoccupied.
{8,9,21,138},
{8,9,29,132},
{8,9,33,134},
{8,9,45,121},
{8,9,53,125},
{8,10,5,140},
{8,10,9,114},
{8,10,17,121},
{8,10,21,126},
{8,10,25,114},
{8,10,29,107},
{8,10,41,169},
{8,10,49,177},
{8,10,57,126},
{8,11,1,117},
{8,11,5,114},
{8,11,13,111},
{8,11,17,132},
{8,11,21,157},
{8,11,29,177},
{8,11,33,176},
{8,11,45,174},
{8,11,49,181},
{8,11,57,182},
{8,12,9,181, ALDataSample::NO_OCC_EXPECTATION, false}, // Light.
{8,12,13,182},
{8,12,29,175},
{8,12,45,161},
{8,12,53,169},
{8,13,1,176},
{8,13,5,177},
{8,13,9,178},
{8,13,25,158},
{8,13,29,135},
{8,13,37,30},
{8,13,45,37},
{8,13,49,45},
{8,14,5,61},
{8,14,17,117},
{8,14,29,175},
{8,14,33,171},
{8,14,37,148},
{8,14,45,141},
{8,14,53,173},
{8,15,5,125},
{8,15,13,119},
{8,15,21,107},
{8,15,29,58},
{8,15,37,62},
{8,15,45,54},
{8,15,53,47},
{8,16,1,35},
{8,16,9,48},
{8,16,25,50},
{8,16,37,39},
{8,16,41,34},
{8,16,49,34},
{8,16,57,28},
{8,17,5,20},
{8,17,13,7, occType::OCC_NONE, ALDataSample::NO_RD_EXPECTATION, false, ALDataSample::SB_MINECO}, // Should be anticipating (re)occupancy.
{8,17,25,4},
{8,17,37,44, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONE}, // OCCUPIED (light on?).
{8,17,49,42},
{8,18,1,42, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // Light on, watching TV?
{8,18,9,40},
{8,18,13,42, occType::OCC_WEAK, false, true, ALDataSample::SB_NONE}, // Light on, watching TV?
{8,18,25,40},
{8,18,37,40, occType::OCC_WEAK, false, true, ALDataSample::SB_NONE}, // Light on, watching TV?
{8,18,41,42, occType::OCC_WEAK, false, true, ALDataSample::SB_NONE}, // Light on, watching TV?
{8,18,49,42, occType::OCC_WEAK, false, true, ALDataSample::SB_NONE}, // Light on, watching TV?
{8,18,57,41},
{8,19,1,40},
{8,19,13,41, occType::OCC_WEAK, false, true, ALDataSample::SB_NONE}, // Light on, watching TV?
{8,19,21,39},
{8,19,25,41}, // ... more WEAK signals should follow...
{8,19,41,41},
{8,19,52,42},
{8,19,57,40},
{8,20,5,40},
{8,20,9,42, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // Light on, watching TV?
{8,20,17,42},
{8,20,23,40},
{8,20,29,40, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // Light on, watching TV?
{8,20,33,40},
{8,20,37,41},
{8,20,41,42, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // Light on, watching TV?
{8,20,49,40},
{8,21,5,1, occType::OCC_NONE, true}, // Just vacated, dark.
{8,21,13,1},
// ...
{9,5,57,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Definitely not occupied.  Max setback.
{9,6,13,1, occType::OCC_NONE, true, false}, // Definitely not occupied.
{9,6,21,2, occType::OCC_NONE, true, false}, // Not enough rise to indicate occupation, dark.
{9,6,33,2, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Not enough light to indicate occupation, dark.  May have reduced setback anticipting occupancy.
{9,6,37,24, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONE}, // Curtains drawn: OCCUPIED. Should appear light.
{9,6,45,32},
{9,6,53,31},
{9,7,5,30},
{9,7,17,41},
{9,7,25,54},
{9,7,33,63, occType::OCC_NONE, false}, // Sun coming up; not a sign of occupancy.
{9,7,41,73, occType::OCC_NONE, false}, // Sun coming up; not a sign of occupancy.
{9,7,45,77, occType::OCC_NONE, false}, // Sun coming up: not enough rise to indicate occupation.
{ }
    };
// Test with real data set.
TEST(AmbientLightOccupancyDetection,sample3lHard)
{
    simpleDataSampleRun(sample3lHard);
}

// "3l" 2016/12/01+02 test for dark/light detection overnight.
// (Full setback was not achieved; verify that night sensed as dark.)
static const ALDataSample sample3lLevels[] =
    {
{1,0,7,2, ALDataSample::NO_OCC_EXPECTATION, true, false}, // Dark.
{1,0,19,2},
// ...
{1,5,39,2, ALDataSample::NO_OCC_EXPECTATION, true, false}, // Dark.
{1,5,55,2},
{1,6,11,3},
{1,6,24,2},
{1,6,39,2},
{1,6,55,2},
{1,7,11,3, ALDataSample::NO_OCC_EXPECTATION, true, false}, // Dark.
{1,7,31,5},
{1,7,47,13},
{1,7,55,19},
{1,8,3,26},
{1,8,19,35},
{1,8,27,39},
{1,8,35,46},
{1,8,51,58},
{1,9,7,73},
{1,9,18,51},
{1,9,20,49},
{1,9,24,43},
{1,9,29,116},
{1,9,45,129},
{1,9,48,130},
{1,9,57,133},
{1,10,9,138},
{1,10,17,142},
{1,10,29,147},
{1,10,45,163},
{1,10,49,167},
{1,11,5,167},
{1,11,21,168},
{1,11,41,173},
{1,11,48,174},
{1,11,53,175},
{1,12,9,176},
{1,12,13,176},
{1,12,29,177},
{1,12,45,178, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, false},
{1,13,5,179},
{1,13,21,179, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, false},
{1,13,35,181},
{1,13,45,182},
{1,13,49,182},
{1,14,1,182},
{1,14,13,183},
{1,14,17,180},
{1,14,28,154},
{1,14,41,142},
{1,14,45,138},
{1,15,1,125, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, false},
{1,15,17,95},
{1,15,21,87},
{1,15,33,67},
{1,15,45,44},
{1,15,49,32},
{1,16,1,25},
{1,16,13,43},
{1,16,25,52},
{1,16,28,51},
{1,16,45,41},
{1,16,53,41},
{1,17,5,41},
{1,17,17,39},
{1,17,29,40},
{1,17,33,38},
{1,17,45,12},
{1,17,57,42},
{1,18,1,3},
{1,18,9,41, occType::OCC_PROBABLE, false, true}, // TV watching
{1,18,29,40},
{1,18,49,39},
{1,18,57,39},
{1,19,5,39},
{1,19,21,37},
{1,19,33,40, occType::OCC_WEAK, false, true},
{1,19,53,39},
{1,19,57,38},
{1,20,9,38},
{1,20,21,40},
{1,20,23,40},
{1,20,41,39},
{1,20,45,39, occType::OCC_WEAK, false, true},
{1,21,1,38},
{1,21,21,40},
{1,21,25,39},
{1,21,41,39},
{1,21,45,40},
{1,21,53,39},
{1,22,9,2, ALDataSample::NO_OCC_EXPECTATION, true, false}, // Dark.
{1,22,29,2},
{1,22,49,2},
{1,23,5,2},
{1,23,18,2},
{1,23,27,2},
{1,23,48,2},
{2,0,1,2, ALDataSample::NO_OCC_EXPECTATION, true, false}, // Dark.
{2,0,17,2},
{2,0,33,2},
{2,0,49,2},
{2,1,1,2},
{2,1,17,2},
{2,1,33,2},
{2,1,57,2},
{2,2,9,2},
{2,2,29,2, ALDataSample::NO_OCC_EXPECTATION, true, false}, // Dark.
{2,2,49,2},
{2,3,5,2},
{2,3,25,2},
{2,3,41,2},
{2,3,57,2},
{2,4,9,2},
{2,4,25,2},
{2,4,41,2},
{2,4,57,2, ALDataSample::NO_OCC_EXPECTATION, true, false}, // Dark.
{2,5,13,2},
{2,5,33,2},
{2,5,49,2},
{2,6,1,2},
{2,6,17,2},
{2,6,33,2},
{2,6,49,2},
{2,7,5,2},
{2,7,17,3},
{2,7,21,3},
{2,7,29,3, ALDataSample::NO_OCC_EXPECTATION, true, false}, // Dark.
{2,7,37,4},
{2,7,45,6},
{2,8,1,13},
{2,8,2,14},
{2,8,21,25},
{2,8,33,28},
{2,8,49,24},
{2,8,53,29},
{2,9,4,35},
{2,9,13,49},
{2,9,17,51},
{2,9,33,70},
{2,9,37,73},
{2,9,45,184},
//{2,9,45,183},
{2,9,49,45},
{2,9,55,85},
{2,10,11,95},
{2,10,15,96},
{2,10,24,103},
{2,10,39,113},
{2,10,43,114},
{ }
    };
// Test with real data set.
TEST(AmbientLightOccupancyDetection,sample3lLevels)
{
    simpleDataSampleRun(sample3lLevels);
}

// "3l" 2016/12/05--09 thorough test for setbacks and occupancy on Thu 8th.
// London.
// on Thu 8th: curtains drawn ~06:50, occupancy ~13:40--14:40 and ~16:30--21:00.
// Check that occupancy and setbacks acceptable for whole of 8th.
// A full/maximum setback must be achieved overnight.
// Possibly look for anticipation also.
// Finer-grained data than usual.
//
// 2016/12/10 12:00Z: dumped light and occupancy stats from 3l valve:
//    C last 19 19< 19 19 19 20 20 20 23 22 23 23 22 23 24 21 19 19 19 18 18 18 23 21
//    C smoothed 20 20< 20 20 20 21 20 19 21 20 21 21 20 20 19 19 18 18 18 18 18 20 21 20
//    occ% last 28 39< 67 73 6 0 0 25 49 0 0 0 0 0 92 14 0 0 0 0 0 34 28 0
//    occ% smoothed 37 39< 43 43 21 23 12 13 30 7 19 7 12 1 12 2 0 0 0 0 3 11 15 18
//    RH% last 68 68< 68 69 69 67 66 66 61 62 60 62 62 60 59 65 68 69 70 70 71 72 58 65
//    RH% smoothed 59 58< 59 60 59 59 60 62 59 62 59 61 61 62 62 61 63 63 63 61 62 58 56 59
//
// Include static data set.
#include "AmbientLightOccupancyDetectionTest_sample3lSetback.h"
TEST(AmbientLightOccupancyDetection,sample3lSetback)
{
    simpleDataSampleRun(OTV0P2BASE::PortableUnitTest::DATA::sample3lSetback);
}

// Test with LDR (not phototransistor) sensor on V0p2 REV1 unit.
// This is actually outside, but occupancy should be detectable at one point.
// London, December, near the shortest day.
static const ALDataSample sample4o[] =
    {
{18,0,2,4},
{18,0,5,4},
{18,0,9,4},
{18,0,17,4},
{18,0,21,4},
{18,0,25,4},
{18,0,29,4},
{18,0,31,4},
{18,0,37,4},
{18,0,41,4},
{18,0,45,4},
{18,0,49,4},
{18,0,57,4},
{18,1,1,4},
{18,1,5,4},
{18,1,10,4},
{18,1,17,4},
{18,1,21,4},
{18,1,25,4},
{18,1,29,4},
{18,1,33,4},
{18,1,37,4},
{18,1,41,4},
{18,1,42,4},
{18,1,45,4},
{18,1,49,4},
{18,1,58,4},
{18,2,1,4},
{18,2,5,4},
{18,2,9,4},
{18,2,17,4},
{18,2,21,4},
{18,2,24,4},
{18,2,29,4},
{18,2,33,4},
{18,2,37,4},
{18,2,45,4},
{18,2,50,4},
{18,2,57,4},
{18,3,1,4},
{18,3,5,4},
{18,3,9,4},
{18,3,17,4},
{18,3,21,4},
{18,3,29,4},
{18,3,33,4},
{18,3,41,4},
{18,3,45,4},
{18,3,49,4},
{18,3,58,4},
{18,4,1,4},
{18,4,5,4},
{18,4,10,4},
{18,4,18,4},
{18,4,21,4},
{18,4,29,4},
{18,4,33,4},
{18,4,41,4},
{18,4,46,4},
{18,4,49,4},
{18,4,54,4},
{18,4,57,4},
{18,5,5,4},
{18,5,9,4},
{18,5,18,4},
{18,5,22,4},
{18,5,29,4},
{18,5,33,4},
{18,5,37,4},
{18,5,45,4},
{18,5,50,4},
{18,5,57,4},
{18,6,1,4},
{18,6,5,4},
{18,6,13,4},
{18,6,17,4},
{18,6,25,4},
{18,6,29,4},
{18,6,31,4},
{18,6,34,4},
{18,6,42,4},
{18,6,45,4},
{18,6,53,4},
{18,6,57,4},
{18,7,5,4},
{18,7,9,4},
{18,7,14,4},
{18,7,17,4},
{18,7,21,4},
{18,7,29,5},
{18,7,34,7},
{18,7,37,9},
{18,7,41,13},
{18,7,45,17},
{18,7,49,22},
{18,7,53,31},
{18,7,57,38},
{18,8,2,50},
{18,8,5,60},
{18,8,10,70},
{18,8,13,75},
{18,8,18,89},
{18,8,21,102},
{18,8,25,108},
{18,8,29,113},
{18,8,33,110},
{18,8,37,119},
{18,8,41,128},
{18,8,44,132},
{18,8,46,136},
{18,8,49,138},
{18,8,54,139},
{18,8,59,148},
{18,9,2,148},
{18,9,6,151},
{18,9,9,159},
{18,9,13,169},
{18,9,20,167},
{18,9,22,167},
{18,9,25,181},
{18,9,34,185},
{18,9,37,189},
{18,9,41,183},
{18,9,46,190},
{18,9,49,203},
{18,9,53,210},
{18,10,1,210},
{18,10,6,215},
{18,10,9,218},
{18,10,17,214},
{18,10,21,226},
{18,10,29,220},
{18,10,32,218},
{18,10,33,216},
{18,10,37,216},
{18,10,41,218},
{18,10,45,219},
{18,10,49,213},
{18,10,53,209},
{18,10,57,210},
{18,11,5,212},
{18,11,9,215},
{18,11,13,218},
{18,11,21,215},
{18,11,25,217},
{18,11,33,213},
{18,11,38,211},
{18,11,41,213},
{18,11,45,210},
{18,11,49,210},
{18,11,53,204},
{18,12,1,208},
{18,12,5,213},
{18,12,11,213},
{18,12,13,215},
{18,12,22,217},
{18,12,26,217},
{18,12,29,217},
{18,12,37,210},
{18,12,41,206},
{18,12,45,202},
{18,12,49,202},
{18,12,53,201},
{18,12,57,204},
{18,13,5,207},
{18,13,9,206},
{18,13,14,207},
{18,13,18,211},
{18,13,22,212},
{18,13,25,213},
{18,13,29,208},
{18,13,37,209},
{18,13,41,208},
{18,13,45,206},
{18,13,50,202},
{18,13,53,203},
{18,14,1,197},
{18,14,5,195},
{18,14,9,194},
{18,14,14,190},
{18,14,18,186},
{18,14,22,188},
{18,14,29,197},
{18,14,33,197},
{18,14,37,196},
{18,14,41,193},
{18,14,50,184},
{18,14,57,175},
{18,15,5,172},
{18,15,8,166},
{18,15,9,162},
{18,15,14,149},
{18,15,18,137},
{18,15,22,133},
{18,15,25,129},
{18,15,29,115},
{18,15,33,100},
{18,15,37,91},
{18,15,42,77},
{18,15,45,66},
{18,15,49,56},
{18,15,54,44},
{18,16,1,24},
{18,16,6,18},
{18,16,9,14},
{18,16,14,12},
{18,16,17,10},
{18,16,21,7},
{18,16,25,5},
{18,16,30,4},
{18,16,33,4},
{18,16,41,4},
{18,16,45,4},
{18,16,53,3},
{18,16,57,3},
{18,17,1,3},
{18,17,10,3},
{18,17,13,3},
{18,17,18,3},
{18,17,21,3},
{18,17,29,48, occType::OCC_PROBABLE, false, true}, // People present.
{18,17,37,49},
{18,17,41,44},
{18,17,45,47},
{18,17,49,46},
{18,17,53,47},
{18,17,58,46},
{18,18,2,34},
{18,18,5,34},
{18,18,10,46},
{18,18,13,34},
{18,18,17,34},
{18,18,26,7},
{18,18,30,3},
{18,18,38,3},
{18,18,39,3},
{18,18,41,3},
{18,18,45,3},
{18,18,49,3},
{18,18,54,13},
{18,18,58,14},
{18,19,5,14},
{18,19,13,14},
{18,19,17,14},
{18,19,25,14},
{18,19,29,14},
{18,19,33,16},
{18,19,37,14},
{18,19,42,17},
{18,19,44,14},
{18,19,45,14},
{18,19,53,14},
{18,19,57,14},
{18,20,5,14},
{18,20,10,14},
{18,20,18,14},
{18,20,21,14},
{18,20,25,14},
{18,20,34,3},
{18,20,35,4},
{18,20,38,3},
{18,20,45,3},
{18,20,49,3},
{18,20,54,3},
{18,20,57,3},
{18,21,6,3},
{18,21,9,3},
{18,21,18,3},
{18,21,21,3},
{18,21,25,3},
{18,21,30,3},
{18,21,37,3},
{18,21,42,3},
{18,21,45,3},
{18,21,54,5},
{18,21,58,3},
{18,22,6,3},
{18,22,9,3},
{18,22,13,3},
{18,22,22,3},
{18,22,26,3},
{18,22,29,3},
{18,22,34,3},
{18,22,41,3},
{18,22,46,3},
{18,22,51,3},
{18,22,53,3},
{18,23,2,3},
{18,23,5,3},
{18,23,14,3},
{18,23,17,3},
{18,23,25,3},
{18,23,29,3},
{18,23,38,3},
{18,23,41,3},
{18,23,49,3},
{18,23,53,3},
{18,23,58,3},
{ }
    };
// Test with real data set.
TEST(AmbientLightOccupancyDetection,sample4o)
{
    simpleDataSampleRun(sample4o);
}

// "5s" 2016/10/08+09 test set with tough occupancy to detect in the evening 21:00Z.
// Note: as of 2016/12/10 the simulation shows smoothed occupancy:
//     0 0 0 0 0 0 8 71 26 58 65 70 30 54 46 30 0 0 0 0 16 0 0 0
// At 2016/12/10 ~11:00Z a dump from the unit showed:
//     occ% last 0 0 31 0 0 0 0 20 0 0 0 0 0 0 0 0 38 0 0 0< 0 0 0 0
//     occ% smoothed 13 15 29 22 31 26 15 4 3 0 0 0 0 0 0 19 23 12 5 5< 2 2 8 4
// so therefore smoothed occupancy to match the test something like:
//     3 0 0 0 0 0 0 19 23 12 5 5< 2 2 8 4 13 15 29 22 31 26 15 4
static const ALDataSample sample5sHard[] =
    {
{8,0,3,2, occType::OCC_NONE, true}, // Not occupied actively.
{8,0,19,2, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX}, // Not occupied actively, sleeping, good setback (may be too soon after data set start to hit max).
// ...
{8,5,19,2, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Not occupied actively, sleeping, good setback (may be too soon after data set start to hit max).
{8,5,31,1, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Not occupied actively, sleeping, good setback (may be too soon after data set start to hit max).
{8,5,43,2, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Not occupied actively, sleeping, good setback (may be too soon after data set start to hit max).
// ...
{8,6,23,4, occType::OCC_NONE, true, false}, // Not occupied actively, sleeping.
{8,6,35,6, occType::OCC_NONE, true, false}, // Not occupied actively, sleeping.
{8,6,39,5, occType::OCC_NONE, true, false}, // Not occupied actively, sleeping.
{8,6,51,6, occType::OCC_NONE, true, false}, // Not occupied actively, sleeping.
{8,7,3,9, occType::OCC_NONE, ALDataSample::NO_RD_EXPECTATION, false}, // Not occupied actively.
{8,7,11,12},
{8,7,15,13, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_NONEMIN}, // Should at least be anticipating occupancy.
{8,7,19,17},
{8,7,27,42, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_NONEMIN}, // FIXME: should detect curtains drawn?  Temporary occupancy.  Should at least be anticipating occupancy.
{8,7,31,68, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_NONEMIN}, // Should at least be anticipating occupancy.
{8,7,43,38},
{8,7,51,55},
{8,7,55,63},
{8,7,59,69},
{8,8,11,68, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_NONEECO}, // Daylight, setback should be limited.
{8,8,15,74},
{8,8,27,72},
{8,8,43,59},
{8,8,51,38},
{8,8,55,37},
{8,8,59,34},
{8,9,3,43, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_MIN}, // Daylight, setback should be minimal anticipating occupation.
{8,9,19,79},
{8,9,23,84},
{8,9,35,92},
{8,9,39,64},
{8,9,43,78},
{8,9,55,68},
{8,9,59,60},
{8,10,3,62, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_NONEECO}, // Daylight, setback should be limited.
{8,10,11,41},
{8,10,15,40},
{8,10,16,42},
{8,10,23,40},
{8,10,27,45},
{8,10,39,99},
{8,10,46,146},
{8,10,51,79},
{8,10,56,46},
{8,11,3,54, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Broad daylight, vacant, some setback should be in place.
{8,11,7,63},
{8,11,23,132},
{8,11,27,125},
{8,11,39,78}, // Cloud passing over.
{8,11,55,136},
{8,11,59,132},
{8,12,7,132, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Broad daylight, vacant, some setback should be in place.
{8,12,19,147},
{8,12,23,114, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Broad daylight, vacant, some setback should be in place.
{8,12,35,91}, // Cloud passing over.
{8,12,47,89},
{8,12,55,85},
{8,13,3,98, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Broad daylight, vacant, some setback should be in place.
{8,13,11,105},
{8,13,19,106},
{8,13,31,32},
{8,13,43,29},
{8,13,51,45},
{8,13,55,37},
{8,13,59,31},
{8,14,7,42, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Broad daylight, vacant, some setback should be in place.
{8,14,27,69},
{8,14,31,70},
{8,14,35,63},
{8,14,55,40},
{8,15,7,47, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Daylight, vacant, some setback should be in place.
{8,15,11,48},
{8,15,19,66},
{8,15,27,48},
{8,15,35,46},
{8,15,43,40},
{8,15,51,33},
{8,16,3,24, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Daylight, vacant, some setback should be in place.
{8,16,11,26},
{8,16,27,20},
{8,16,39,14},
{8,16,54,8},
{8,16,59,6},
{8,17,3,5, ALDataSample::NO_OCC_EXPECTATION, true, false, ALDataSample::SB_MINECO}, // Dark, vacant, some setback should be in place.
{8,17,19,3},
{8,17,31,2},
{8,17,47,2, occType::OCC_NONE, true, false}, // Light turned off, no active occupancy.
// ...
{8,20,11,2},
{8,20,23,2, occType::OCC_NONE, true, false, ALDataSample::SB_MINECO}, // Should at least be anticipating occupancy.
{8,20,35,16, occType::OCC_PROBABLE, false, true}, // Light turned on, OCCUPANCY.
{8,20,46,16, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{8,20,55,13, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{8,20,58,14, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{8,21,7,3, occType::OCC_NONE, true}, // Light turned off, no active occupancy.
{8,21,23,2, occType::OCC_NONE, true, false}, // Light turned off, no active occupancy.
{8,21,39,2, occType::OCC_NONE, true, false}, // Light turned off, no active occupancy.
{8,21,55,2},
// ...
{9,0,55,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Not occupied actively, sleeping, max setback.
{9,1,7,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Not occupied actively, sleeping, max setback.
{9,1,15,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Not occupied actively, sleeping, max setback.
{9,1,19,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Not occupied actively, sleeping, max setback.
// ...
{9,5,31,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Not occupied actively, sleeping, max setback.
{9,5,36,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Not occupied actively, sleeping, max setback.
{9,5,47,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Not occupied actively, sleeping, max setback.
{9,5,51,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Not occupied actively, sleeping, max setback.
{9,6,3,3},
{9,6,15,5, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Not occupied actively, sleeping, as little as min setback in anticipation of occupation.
{9,6,27,10, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_NONEMIN}, // Should be anticipating occupancy; at most small setback.
{9,6,31,12},
{9,6,35,15},
{9,6,39,19},
{9,6,43,26},
{9,6,59,24, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEECO}, // Occupied but may be applying a limited setback.
{9,7,7,28, occType::OCC_NONE}, // Not yet up and about.  But not actually dark.
{9,7,15,66},
{9,7,27,181, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONEECO}, // Curtains drawn: temporary occupancy, some setback OK.
{9,7,43,181},
{9,7,51,181},
{9,7,59,181, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_NONEECO}, // Not dark, occupancy unknown, some setback OK.
    { }
    };
// Test with real data set.
TEST(AmbientLightOccupancyDetection,sample5sHard)
{
    simpleDataSampleRun(sample5sHard);
}

// "5s" 2016/12/01--04 test set with some fine-grained data in the second half.
// 2016/12/03 all of 3l, 5s, 6k, 7h: vacant from 11:00Z to 14:00Z but wrongly seen as occupied.
// 5s also probably occupied 16:00--16:30 and 18:14--19:16 and 19:29--21:07.
// Note: as of 2016/12/10 the simulation shows smoothed occupancy:
//     0 0 0 0 0 0 0 13 59 48 56 16 4 8 0 0 13 36 42 7 9 5 2 0
// At 2016/12/10 ~11:00Z a dump from the unit showed:
//     occ% last 0 0 31 0 0 0 0 20 0 0 0 0 0 0 0 0 38 0 0 0< 0 0 0 0
//     occ% smoothed 13 15 29 22 31 26 15 4 3 0 0 0 0 0 0 19 23 12 5 5< 2 2 8 4
// so therefore smoothed occupancy to match the test something like:
//     3 0 0 0 0 0 0 19 23 12 5 5< 2 2 8 4 13 15 29 22 31 26 15 4
static const ALDataSample sample5sHard2[] =
    {
{1,0,1,1, occType::OCC_NONE, true, false},
{1,0,22,1, occType::OCC_NONE, true, false},
// ...
{1,6,29,1},
{1,6,47,1},
{1,7,5,2},
{1,7,17,1, occType::OCC_NONE, true, false},
{1,7,37,6},
{1,7,46,9},
{1,7,50,11},
{1,8,5,19},
{1,8,18,25},
{1,8,22,26},
{1,8,33,37},
{1,8,41,45},
{1,8,49,86},
{1,8,52,83},
{1,8,53,82},
{1,8,57,86},
{1,9,12,115},
{1,9,21,103},
{1,9,25,114},
{1,9,37,108},
{1,9,41,74},
{1,9,53,60},
{1,10,3,82},
{1,10,5,100},
{1,10,13,78},
{1,10,17,76},
{1,10,29,89},
{1,10,39,79},
{1,10,45,92},
{1,10,57,125},
{1,11,1,106},
{1,11,9,87},
{1,11,25,78},
{1,11,33,75},
{1,11,37,73},
{1,11,53,69},
{1,12,5,64},
{1,12,9,62},
{1,12,19,58},
{1,12,21,57},
{1,12,33,53},
{1,12,41,50},
{1,12,45,49},
{1,13,1,46},
{1,13,19,44},
{1,13,29,43},
{1,13,45,42},
{1,14,1,39},
{1,14,15,36},
{1,14,21,35},
{1,14,29,33},
{1,14,45,29},
{1,14,58,26},
{1,15,13,21},
{1,15,21,19},
{1,15,28,15},
{1,15,41,11},
{1,15,53,7},
{1,16,5,4},
{1,16,16,2},
{1,16,17,2},
{1,16,29,2},
{1,16,45,2},
{1,16,57,2, occType::OCC_NONE, true, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_MINMAX}, // Possible reduced setback anticipating occupancy.
{1,17,5,7}, // Possible temp occupancy.
{1,17,13,1},
{1,17,21,1},
{1,17,33,1},
{1,17,49,24},
{1,17,53,24},
{1,18,3,2},
{1,18,13,26},
{1,18,29,40, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // (Second) light on, occupied, no setback.
{1,18,33,2},
{1,18,45,2},
{1,19,1,2},
{1,19,17,2},
{1,19,33,2},
{1,19,53,2},
{1,20,9,2},
{1,20,10,1},
{1,20,25,1},
{1,20,49,1},
{1,21,1,1},
{1,21,15,1},
{1,21,29,2},
{1,21,41,1},
{1,21,57,1},
{1,22,13,2},
{1,22,29,2},
{1,22,45,2},
{1,23,1,2},
{1,23,17,2},
{1,23,25,1},
{1,23,29,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX},
// ...
{2,6,49,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX},
{2,7,1,1},
{2,7,17,2},
{2,7,21,2},
{2,7,33,2},
{2,7,49,3},
{2,7,53,4},
{2,7,59,6},
{2,8,1,19},
{2,8,13,11},
{2,8,17,12},
{2,8,33,15},
{2,8,45,17},
{2,9,1,20},
{2,9,5,19},
{2,9,17,25},
{2,9,21,28},
{2,9,37,37},
{2,9,38,38},
{2,9,49,40},
{2,10,5,44},
{2,10,13,43},
{2,10,25,47},
{2,10,37,50},
{2,10,41,50},
{2,10,57,50},
{2,11,9,54},
{2,11,13,54},
{2,11,29,50},
{2,11,41,50},
{2,12,1,53},
{2,12,11,51},
{2,12,13,50},
{2,12,22,48},
{2,12,25,46},
{2,12,37,44},
{2,12,54,41},
{2,13,5,39},
{2,13,9,38},
{2,13,21,32},
{2,13,29,29},
{2,13,31,28},
{2,13,45,27},
{2,14,5,22},
{2,14,21,20},
{2,14,25,20},
{2,14,41,17},
{2,14,45,15},
{2,15,17,8},
{2,15,33,5},
{2,15,37,4},
{2,15,45,3},
{2,16,10,30, occType::OCC_PROBABLE, false, true}, // Light on, occupied.
{2,16,14,25},
{2,16,25,25},
{2,16,41,25},
{2,16,45,34, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{2,16,46,25},
{2,16,50,25},
{2,16,55,25},
{2,16,59,25},
{2,17,0,24, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // Light, occupied.
{2,17,3,25},
{2,17,4,24},
{2,17,6,25},
{2,17,9,24},
{2,17,14,24},
{2,17,17,24},
{2,17,20,24},
{2,17,22,25},
{2,17,24,24},
{2,17,25,24},
{2,17,27,25},
{2,17,29,24},
{2,17,33,25, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // Light, occupied.
{2,17,34,24},
{2,17,37,24},
{2,17,38,25},
{2,17,40,25},
{2,17,42,24},
{2,17,45,25},
{2,17,49,25},
{2,17,52,25},
{2,17,54,24},
{2,17,55,25},
{2,18,0,24, ALDataSample::NO_OCC_EXPECTATION, false}, // Light, occupied.
{2,18,2,25, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // Light, occupied, no steback.
{2,18,6,24},
{2,18,9,24},
//{2,18,9,25},
{2,18,13,25},
//{2,18,13,24},
{2,18,16,24},
{2,18,20,33},
{2,18,21,24},
{2,18,22,25},
{2,18,23,24},
//{2,18,23,24},
//{2,18,23,24},
//{2,18,23,24},
{2,18,24,25},
{2,18,25,24},
{2,18,29,24},
{2,18,32,24, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{2,18,33,25},
{2,18,36,24},
{2,18,40,24},
{2,18,43,25},
{2,18,46,33},
{2,18,47,25, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{2,18,50,1, occType::OCC_NONE, true},
{2,18,51,1},
{2,18,55,1},
{2,18,58,1},
{2,19,1,1, occType::OCC_NONE, true},
{2,19,2,26, occType::OCC_PROBABLE, false, true}, // Light on, occupied.
{2,19,5,25},
{2,19,6,26},
{2,19,9,25},
{2,19,13,25},
{2,19,17,25},
{2,19,20,25},
{2,19,24,25},
{2,19,28,25},
{2,19,31,25},
{2,19,35,25, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{2,19,38,25},
{2,19,42,25},
{2,19,45,25},
{2,19,49,25},
{2,19,53,25},
{2,19,56,25},
{2,20,0,25, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{2,20,3,24},
{2,20,7,24},
{2,20,11,24},
{2,20,15,24},
{2,20,19,24},
{2,20,22,24},
{2,20,26,24},
{2,20,29,24},
{2,20,33,24}, // FIXME ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{2,20,37,24},
{2,20,40,24},
{2,20,42,2},
{2,20,44,2},
{2,20,48,2},
{2,20,51,2},
{2,20,55,2},
{2,20,59,2},
{2,21,2,2},
{2,21,6,26, occType::OCC_PROBABLE, false, true}, // Light on, occupied.
{2,21,9,25},
{2,21,13,25},
{2,21,17,25},
{2,21,21,25},
{2,21,24,24},
{2,21,25,24},
{2,21,29,24},
{2,21,33,24, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{2,21,37,24},
{2,21,41,24},
{2,21,45,24},
{2,21,49,24},
{2,21,52,24},
{2,21,56,24},
{2,21,59,24},
{2,22,3,24, ALDataSample::NO_OCC_EXPECTATION, false}, // Light, occupied.  // FIXME, unusual time.
{2,22,7,24},
{2,22,10,24},
{2,22,14,24},
{2,22,18,24},
{2,22,21,24},
{2,22,24,25},
{2,22,25,24},
{2,22,28,25},
{2,22,29,25},
{2,22,30,24, ALDataSample::NO_OCC_EXPECTATION, false}, // Light, occupied.  // FIXME, unusual time.
{2,22,33,25},
{2,22,34,24},
{2,22,36,25, ALDataSample::NO_OCC_EXPECTATION, false}, // Light, occupied.  // FIXME, unusual time.
{2,22,38,2, occType::OCC_NONE, true},
{2,22,41,2},
{2,22,45,2},
{2,22,49,2},
{2,22,53,2},
{2,22,57,2},
{2,23,1,2},
{2,23,3,1},
{2,23,5,1, occType::OCC_NONE, true},
// ...
{3,7,38,1, occType::OCC_NONE, true},
{3,7,42,1},
{3,7,46,2},
{3,7,50,2},
{3,7,54,2},
{3,7,56,3},
{3,7,58,3},
{3,8,2,3},
{3,8,4,4},
{3,8,6,4},
{3,8,10,4},
{3,8,14,10},
{3,8,18,11},
{3,8,20,12},
{3,8,22,12},
{3,8,25,12},
{3,8,30,12},
{3,8,33,15},
{3,8,37,17},
{3,8,41,21},
{3,8,45,22},
{3,8,50,21},
{3,8,51,21},
{3,8,52,22},
{3,8,55,22},
{3,8,59,24},
{3,9,1,26},
{3,9,3,28},
{3,9,5,33},
{3,9,7,34},
{3,9,8,36},
{3,9,9,38},
{3,9,12,41},
{3,9,13,43},
{3,9,14,47},
{3,9,17,47},
{3,9,18,46},
{3,9,22,63},
{3,9,23,67},
{3,9,24,70},
{3,9,27,78},
{3,9,28,75},
{3,9,32,80},
{3,9,33,149}, // Cloud passing?  Mean ~ 81.
{3,9,37,98},
{3,9,38,120},
{3,9,39,101},
{3,9,42,141},
{3,9,43,145},
{3,9,47,120},
{3,9,48,117},
{3,9,49,110},
{3,9,52,88},
{3,9,53,87},
{3,9,54,77},
{3,9,56,73},
{3,9,58,82},
{3,10,1,92},
{3,10,2,94},
{3,10,5,115},
{3,10,6,138},
{3,10,7,98},
{3,10,10,81},
{3,10,14,88},
{3,10,15,84},
{3,10,16,75},
{3,10,19,90},
{3,10,23,78},
{3,10,24,91},
{3,10,27,96},
{3,10,28,103},
{3,10,31,113},
{3,10,32,111},
{3,10,35,109},
{3,10,36,113},
{3,10,39,92},
{3,10,40,66},
{3,10,41,67},
{3,10,44,86},
{3,10,45,87},
{3,10,48,102},
{3,10,49,135},
{3,10,50,81},
{3,10,53,90},
{3,10,56,143}, // Cloud passing?  Mean ~ 98.
{3,10,58,154},
{3,11,1,149, ALDataSample::NO_OCC_EXPECTATION, false, false}, // Light, vacant.
{3,11,2,140},
{3,11,6,126},
{3,11,7,131},
{3,11,11,135},
{3,11,15,145},
{3,11,19,145},
{3,11,23,148},
{3,11,27,107},
{3,11,31,103, ALDataSample::NO_OCC_EXPECTATION, false, false}, // Light, vacant.
{3,11,35,154},
{3,11,40,132},
{3,11,41,130},
{3,11,45,131},
{3,11,46,126},
{3,11,50,88},
{3,11,51,90},
{3,11,52,99},
{3,11,55,70},
{3,11,56,78},
{3,11,57,77},
{3,12,0,82, ALDataSample::NO_OCC_EXPECTATION, false, false}, // Light, vacant.
{3,12,1,108},
{3,12,5,79},
{3,12,6,99},
{3,12,7,75},
{3,12,10,71},
{3,12,11,74},
{3,12,12,85},
{3,12,13,71},
{3,12,15,70},
{3,12,16,91},
{3,12,17,100},
{3,12,20,101},
{3,12,24,88},
{3,12,25,87},
{3,12,28,87},
{3,12,32,85, ALDataSample::NO_OCC_EXPECTATION, false, false}, // Light, vacant.
{3,12,33,77},
{3,12,34,76},
{3,12,37,77},
{3,12,39,75},
{3,12,41,67},
{3,12,45,67},
{3,12,46,65},
{3,12,50,64},
{3,12,51,64},
{3,12,55,59},
{3,12,56,58},
{3,12,57,57},
{3,13,0,56, ALDataSample::NO_OCC_EXPECTATION, false, false}, // Light, vacant.
{3,13,1,57},
{3,13,2,56},
{3,13,5,56},
{3,13,9,53},
{3,13,10,50},
{3,13,14,41},
{3,13,18,40},
{3,13,21,54},
{3,13,23,55},
{3,13,25,57},
{3,13,27,46},
{3,13,29,50},
{3,13,30,51, ALDataSample::NO_OCC_EXPECTATION, false, false}, // Light, vacant.
{3,13,31,60},
{3,13,32,61},
{3,13,34,61},
{3,13,35,58},
{3,13,36,48},
{3,13,39,41},
{3,13,40,48},
{3,13,42,47},
{3,13,44,43},
{3,13,47,47},
{3,13,49,46},
{3,13,53,45},
{3,13,55,43},
{3,13,59,43, ALDataSample::NO_OCC_EXPECTATION, false, false}, // Light, vacant.
{3,14,3,43},
{3,14,8,46},
{3,14,11,49},
{3,14,15,51},
{3,14,19,48},
{3,14,21,46},
{3,14,23,45},
{3,14,27,44},
{3,14,29,43},
{3,14,31,42},
{3,14,36,40},
{3,14,40,39},
{3,14,41,39},
{3,14,42,38},
{3,14,45,36},
{3,14,49,34},
{3,14,53,33},
{3,14,57,33},
{3,14,59,32},
{3,15,1,30},
{3,15,6,28},
{3,15,7,28},
{3,15,8,27},
{3,15,11,26},
{3,15,13,25},
{3,15,16,24},
{3,15,17,23},
{3,15,20,23},
{3,15,21,22},
{3,15,24,21},
{3,15,28,19},
{3,15,29,18},
{3,15,30,17},
{3,15,33,16},
{3,15,34,15},
{3,15,37,14},
{3,15,39,13},
{3,15,41,12},
{3,15,42,11},
{3,15,46,9},
{3,15,47,9},
{3,15,49,8},
{3,15,51,8},
{3,15,52,7},
{3,15,56,6},
{3,16,0,24},
{3,16,3,23},
{3,16,7,22},
{3,16,11,22},
{3,16,13,20},
{3,16,16,26},
{3,16,19,25},
{3,16,23,26},
{3,16,27,25},
{3,16,28,26},
{3,16,32,25},
{3,16,36,1},
{3,16,37,2},
{3,16,38,1},
{3,16,41,1},
{3,16,45,1},
{3,16,49,44},
{3,16,53,37},
{3,16,55,46},
{3,16,57,46},
{3,16,58,37},
{3,17,0,2},
{3,17,3,2},
{3,17,6,2},
{3,17,10,2},
{3,17,15,2},
{3,17,18,2},
{3,17,23,2},
{3,17,26,2},
{3,17,31,2},
{3,17,34,2},
{3,17,39,2},
{3,17,42,2},
{3,17,44,1},
{3,17,46,2},
{3,17,49,2},
{3,17,53,2},
{3,17,57,2},
{3,18,1,2},
{3,18,6,2},
{3,18,10,9}, // Light on?.
{3,18,14,19, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // Light, occupied.
{3,18,15,16},
{3,18,16,14},
{3,18,19,14},
{3,18,21,22},
{3,18,24,22},
{3,18,25,14},
{3,18,28,22},
{3,18,29,17},
{3,18,30,19, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{3,18,32,16},
{3,18,34,21},
{3,18,37,16},
{3,18,38,22},
{3,18,40,14},
{3,18,42,22},
{3,18,43,16},
{3,18,44,18},
{3,18,47,14},
{3,18,49,16},
{3,18,52,13},
{3,18,55,12},
{3,18,57,19},
{3,18,59,12},
{3,19,1,12},
{3,19,3,14},
{3,19,5,21},
{3,19,7,18},
{3,19,11,18},
{3,19,13,12},
{3,19,15,13},
{3,19,16,18, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{3,19,20,6},
{3,19,21,2, ALDataSample::NO_OCC_EXPECTATION, true}, // Dark, temporarily vacant.
{3,19,25,2},
{3,19,29,17, occType::OCC_PROBABLE, false, true}, // Light, occupied.
{3,19,33,22},
{3,19,37,13},
{3,19,41,19},
{3,19,43,22},
{3,19,46,22},
{3,19,50,21},
{3,19,51,22},
{3,19,52,21},
{3,19,55,22},
{3,19,57,18},
{3,20,0,20, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{3,20,1,21},
{3,20,2,14},
{3,20,5,22},
{3,20,6,21},
{3,20,7,22},
{3,20,10,16},
{3,20,11,17},
{3,20,15,13},
{3,20,16,16},
{3,20,17,21},
{3,20,20,22},
{3,20,21,19},
{3,20,22,13},
{3,20,25,22},
{3,20,27,14},
{3,20,29,15},
{3,20,31,13},
{3,20,33,21, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{3,20,35,12},
{3,20,38,16},
{3,20,39,17},
{3,20,40,15},
{3,20,43,22},
{3,20,45,18},
{3,20,48,18},
{3,20,49,16},
{3,20,50,13},
{3,20,53,13},
{3,20,55,18},
{3,20,58,20},
{3,20,59,16},
{3,21,2,13},
{3,21,3,20},
{3,21,4,13},
{3,21,7,21, ALDataSample::NO_OCC_EXPECTATION, false, true}, // Light, occupied.
{3,21,8,7},
{3,21,9,2},
{3,21,12,2},
{3,21,16,2},
{3,21,20,2},
{3,21,24,2},
{3,21,28,2},
{3,21,32,2},
{3,21,36,2},
{3,21,40,2},
{3,21,44,2},
{3,21,48,2},
{3,21,52,2},
{3,21,57,2},
{3,22,0,2},
{3,22,4,2},
{3,22,8,14},
{3,22,10,2},
{3,22,12,2},
{3,22,15,2},
{3,22,19,2},
{3,22,23,2},
{3,22,27,2},
{3,22,31,2},
{3,22,35,2},
{3,22,39,3},
{3,22,43,2},
{3,22,47,2},
{3,22,51,1},
{3,22,52,2},
{3,22,55,2},
{3,22,57,1},
{3,22,58,2},
{3,23,0,1},
{3,23,3,1, occType::OCC_NONE, true, false}, // Dark, no active occpancy.
// ...
// ...
{4,7,4,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, no active occpancy, max setback.
{4,7,7,1},
{4,7,11,2},
{4,7,15,2},
{4,7,21,2},
{4,7,25,2},
{4,7,29,2},
{4,7,33,3},
{4,7,37,4},
{4,7,41,5},
{4,7,45,6},
{4,7,49,7},
{4,7,50,6},
{4,7,51,7},
{4,7,54,8},
{4,7,58,9},
//{4,7,58,10},
{4,8,2,11},
{4,8,6,13},
{4,8,7,13},
{4,8,9,14},
{4,8,11,14},
{4,8,13,15},
{4,8,16,16},
{4,8,19,24},
{4,8,21,24},
{4,8,25,27},
{4,8,27,30},
{4,8,28,31},
{4,8,30,35},
{4,8,33,38},
{4,8,35,46},
{4,8,37,43, occType::OCC_NONE, false, false, ALDataSample::SB_MIN}, // Min setback anticipating occupancy.
{4,8,39,38},
{4,8,41,43},
{4,8,45,47},
{4,8,46,63},
{4,8,49,105},
{4,8,51,91},
//{4,8,51,96},
{4,8,54,94},
{4,8,58,119},
{4,9,3,133},
{4,9,5,119},
{4,9,7,125},
{4,9,9,142},
//{4,9,9,135},
{4,9,12,104},
{4,9,15,111},
{4,9,16,92},
//{4,9,16,86},
{4,9,20,132},
{4,9,21,140},
{4,9,24,101},
{4,9,28,175},
{4,9,31,175},
{4,9,34,134},
//{4,9,34,114},
{4,9,35,133},
{4,9,37,141},
    { }
    };
TEST(AmbientLightOccupancyDetection,sample5sHard2)
{
    simpleDataSampleRun(sample5sHard2);
}

// Over Christmas, too keen to wake everyone up at 07:45 on the 28th.
static const ALDataSample sample5sHard3[] =
    {
{20,0,0,2},
{20,0,4,2},
{20,0,8,2},
{20,0,12,2},
{20,0,16,2},
{20,0,20,2},
{20,0,24,2},
{20,0,28,2},
{20,0,32,2},
{20,0,36,2},
{20,0,40,2},
{20,0,44,2},
{20,0,48,2},
{20,0,52,2},
{20,0,56,2},
{20,1,0,2},
{20,1,4,2},
{20,1,8,2},
{20,1,12,2},
{20,1,16,2},
{20,1,20,2},
{20,1,24,2},
{20,1,28,2},
{20,1,31,1},
{20,1,33,2},
{20,1,36,2},
{20,1,40,1},
{20,1,41,2},
{20,1,44,2},
{20,1,48,2},
{20,1,50,1},
{20,1,52,2},
{20,1,55,1},
{20,1,57,2},
{20,2,0,2},
{20,2,4,1},
{20,2,5,2},
{20,2,7,2},
{20,2,9,2},
{20,2,11,1},
{20,2,13,1},
{20,2,15,1},
{20,2,17,2},
{20,2,20,1},
{20,2,21,2},
{20,2,23,2},
{20,2,25,1},
{20,2,28,1},
{20,2,29,2},
{20,2,31,1},
{20,2,33,1},
{20,2,36,1},
{20,2,40,1},
{20,2,44,1},
{20,2,48,1},
{20,2,52,1},
{20,2,56,1},
{20,3,0,1},
{20,3,4,1},
{20,3,8,1},
{20,3,12,1},
{20,3,16,1},
{20,3,20,1},
{20,3,24,1},
{20,3,28,1},
{20,3,32,1},
{20,3,36,1},
{20,3,40,1},
{20,3,44,1},
{20,3,48,1},
{20,3,52,1},
{20,3,56,1},
{20,4,0,1},
{20,4,4,1},
{20,4,8,1},
{20,4,12,1},
{20,4,16,1},
{20,4,20,1},
{20,4,24,1},
{20,4,28,1},
{20,4,32,1},
{20,4,36,1},
{20,4,40,1},
{20,4,44,1},
{20,4,48,1},
{20,4,52,1},
{20,4,56,1},
{20,5,0,1},
{20,5,4,1},
{20,5,8,1},
{20,5,12,1},
{20,5,16,1},
{20,5,20,1},
{20,5,24,1},
{20,5,28,1},
{20,5,32,1},
{20,5,36,1},
{20,5,40,1},
{20,5,44,1},
{20,5,48,1},
{20,5,52,1},
{20,5,56,1},
{20,6,0,1},
{20,6,4,1},
{20,6,8,1},
{20,6,12,1},
{20,6,16,1},
{20,6,20,1},
{20,6,24,1},
{20,6,28,1},
{20,6,32,1},
{20,6,36,1},
{20,6,40,1},
{20,6,44,1},
{20,6,49,1},
{20,6,53,1},
{20,6,57,2},
{20,6,58,1},
{20,7,1,1},
{20,7,5,1},
{20,7,9,1},
{20,7,13,1},
{20,7,17,1},
{20,7,21,1},
{20,7,25,16},
{20,7,29,24},
{20,7,32,24},
{20,7,36,23},
{20,7,37,18},
{20,7,41,15},
{20,7,42,24},
{20,7,43,22},
{20,7,46,20},
{20,7,50,19},
{20,7,54,22},
{20,7,58,24},
{20,8,0,14},
{20,8,2,24},
{20,8,7,7},
{20,8,8,7},
{20,8,12,9},
{20,8,16,11},
{20,8,17,12},
{20,8,18,14},
{20,8,21,12},
{20,8,22,12},
{20,8,26,12},
{20,8,27,13},
{20,8,28,14},
{20,8,31,15},
{20,8,32,16},
{20,8,35,18},
{20,8,36,19},
{20,8,37,20},
{20,8,40,26},
{20,8,41,27},
{20,8,45,30},
{20,8,46,31},
{20,8,47,32},
{20,8,50,38},
{20,8,51,40},
{20,8,55,48},
{20,8,56,55},
{20,8,57,59},
{20,9,0,52},
{20,9,2,53},
{20,9,4,63},
{20,9,5,65},
{20,9,9,63},
{20,9,10,62},
{20,9,11,61},
{20,9,14,70},
{20,9,15,68},
{20,9,16,70},
{20,9,17,67},
{20,9,19,63},
{20,9,20,70},
{20,9,21,77},
{20,9,24,81},
{20,9,26,80},
{20,9,28,81},
{20,9,29,82},
{20,9,32,110},
{20,9,34,110},
{20,9,36,125},
{20,9,37,114},
{20,9,38,96},
{20,9,41,98},
{20,9,42,110},
{20,9,45,89},
{20,9,47,73},
{20,9,50,82},
{20,9,51,86},
{20,9,52,90},
{20,9,53,87},
{20,9,55,73},
{20,9,56,74},
{20,9,57,81},
{20,10,0,77},
{20,10,1,72},
{20,10,2,73},
{20,10,5,78},
{20,10,6,82},
{20,10,7,85},
{20,10,9,93},
{20,10,13,99},
{20,10,14,101},
{20,10,17,125},
{20,10,19,121},
{20,10,22,87},
{20,10,23,76},
{20,10,25,86},
{20,10,27,83},
{20,10,29,77},
{20,10,31,91},
{20,10,34,96},
{20,10,35,89},
{20,10,37,95},
{20,10,39,89},
{20,10,42,86},
{20,10,43,89},
{20,10,45,91},
{20,10,47,95},
{20,10,50,114},
{20,10,51,107},
{20,10,53,104},
{20,10,55,102},
{20,10,58,91},
{20,11,2,94},
{20,11,3,101},
{20,11,5,109},
{20,11,7,118},
{20,11,11,106},
{20,11,14,103},
{20,11,15,100},
{20,11,19,99},
{20,11,21,99},
{20,11,23,100},
{20,11,24,106},
{20,11,25,105},
{20,11,27,95},
{20,11,29,94},
{20,11,32,83},
{20,11,33,72},
{20,11,35,67},
{20,11,37,59},
{20,11,39,46},
{20,11,41,41},
{20,11,44,33},
{20,11,45,31},
{20,11,46,30},
{20,11,49,26},
{20,11,50,25},
{20,11,53,29},
{20,11,54,28},
{20,11,57,28},
{20,11,58,29},
{20,12,1,31},
{20,12,3,32},
{20,12,6,74},
{20,12,7,89},
{20,12,11,119},
{20,12,14,85},
{20,12,15,80},
{20,12,17,73},
{20,12,19,67},
{20,12,21,71},
{20,12,23,67},
{20,12,26,78},
{20,12,27,71},
{20,12,29,72},
{20,12,31,74},
{20,12,34,66},
{20,12,35,68},
{20,12,37,71},
{20,12,39,62},
{20,12,42,62},
{20,12,43,65},
{20,12,46,68},
{20,12,48,68},
{20,12,49,70},
{20,12,51,71},
{20,12,53,71},
{20,12,55,63},
{20,12,57,60},
{20,12,59,54},
{20,13,1,52},
{20,13,3,64},
{20,13,5,65},
{20,13,7,78},
{20,13,9,79},
{20,13,11,71},
{20,13,14,56},
{20,13,15,47},
{20,13,17,45},
{20,13,19,45},
{20,13,21,43},
{20,13,23,42},
{20,13,25,38},
{20,13,27,36},
{20,13,30,37},
{20,13,34,37},
{20,13,38,38},
{20,13,39,39},
{20,13,41,38},
{20,13,43,40},
{20,13,45,43},
{20,13,47,46},
{20,13,49,48},
{20,13,51,45},
{20,13,53,40},
{20,13,55,38},
{20,13,57,37},
{20,13,59,37},
{20,14,1,40},
{20,14,3,43},
{20,14,5,45},
{20,14,7,43},
{20,14,9,39},
{20,14,11,35},
{20,14,13,34},
{20,14,15,38},
{20,14,17,41},
{20,14,19,41},
{20,14,21,40},
{20,14,23,37},
{20,14,25,35},
{20,14,27,31},
{20,14,29,29},
{20,14,31,29},
{20,14,34,30},
{20,14,37,29},
{20,14,39,27},
{20,14,41,26},
{20,14,43,24},
{20,14,45,23},
{20,14,47,26},
{20,14,49,24},
{20,14,51,23},
{20,14,54,24},
{20,14,58,22},
{20,15,1,19},
{20,15,3,18},
{20,15,5,16},
{20,15,7,15},
{20,15,9,14},
{20,15,11,13},
{20,15,13,12},
{20,15,15,11},
{20,15,17,10},
{20,15,19,9},
{20,15,21,10},
{20,15,23,10},
{20,15,26,11},
{20,15,30,11},
{20,15,32,10},
{20,15,34,10},
{20,15,38,9},
{20,15,40,8},
{20,15,42,8},
{20,15,45,7},
{20,15,47,7},
{20,15,49,6},
{20,15,52,5},
{20,15,56,4},
{20,15,59,3},
{20,16,1,3},
{20,16,4,3},
{20,16,6,2},
{20,16,8,2},
{20,16,12,2},
{20,16,16,2},
{20,16,20,2},
{20,16,24,2},
{20,16,28,2},
{20,16,29,1},
{20,16,32,1},
{20,16,36,1},
{20,16,40,1},
{20,16,44,1},
{20,16,49,1},
{20,16,53,1},
{20,16,57,1},
{20,17,1,1},
{20,17,5,1},
{20,17,9,1},
{20,17,13,1},
{20,17,17,1},
{20,17,21,1},
{20,17,25,1},
{20,17,27,2},
{20,17,29,1},
{20,17,30,1},
{20,17,34,2},
{20,17,35,1},
{20,17,37,2},
{20,17,39,1},
{20,17,41,1},
{20,17,43,1},
{20,17,46,1},
{20,17,49,2},
{20,17,51,1},
{20,17,53,1},
{20,17,55,1},
{20,17,57,2},
{20,17,59,2},
{20,18,5,2},
{20,18,7,2},
{20,18,9,1},
{20,18,11,2},
{20,18,13,2},
{20,18,15,2},
{20,18,18,2},
{20,18,19,1},
{20,18,22,2},
{20,18,26,1},
{20,18,27,2},
{20,18,29,2},
{20,18,31,2},
{20,18,34,2},
{20,18,38,2},
{20,18,42,2},
{20,18,43,1},
{20,18,45,2},
{20,18,47,2},
{20,18,50,2},
{20,18,54,2},
{20,18,58,2},
{20,19,2,2},
{20,19,6,2},
{20,19,10,2},
{20,19,14,2},
{20,19,18,2},
{20,19,22,2},
{20,19,26,2},
{20,19,30,2},
{20,19,34,2},
{20,19,38,2},
{20,19,43,2},
{20,19,47,2},
{20,19,50,2},
{20,19,54,2},
{20,19,58,2},
{20,20,2,2},
{20,20,6,2},
{20,20,10,2},
{20,20,14,2},
{20,20,18,2},
{20,20,22,2},
{20,20,26,2},
{20,20,30,2},
{20,20,34,2},
{20,20,38,2},
{20,20,42,2},
{20,20,46,2},
{20,20,50,2},
{20,20,54,2},
{20,20,58,2},
{20,21,2,2},
{20,21,6,2},
{20,21,10,2},
{20,21,14,2},
{20,21,18,2},
{20,21,22,2},
{20,21,26,2},
{20,21,30,2},
{20,21,34,2},
{20,21,38,2},
{20,21,42,2},
{20,21,46,2},
{20,21,50,2},
{20,21,54,2},
{20,21,56,33},
{20,21,58,43},
{20,22,2,53},
{20,22,4,18},
{20,22,5,23},
{20,22,7,13},
{20,22,10,13},
{20,22,11,11},
{20,22,13,2},
{20,22,15,3},
{20,22,18,3},
{20,22,21,3},
{20,22,26,3},
{20,22,30,3},
{20,22,34,3},
{20,22,37,2},
{20,22,39,2},
{20,22,42,2},
{20,22,46,2},
{20,22,50,2},
{20,22,54,2},
{20,22,58,2},
{20,23,2,2},
{20,23,6,2},
{20,23,10,2},
{20,23,14,2},
{20,23,16,1},
{20,23,18,1},
{20,23,23,1},
{20,23,27,1},
{20,23,31,1},
{20,23,36,1},
{20,23,39,1},
{20,23,43,1},
{20,23,47,1},
{20,23,51,1},
{20,23,54,1},
{20,23,59,1},
{21,0,3,1},
{21,0,7,1},
{21,0,11,1},
{21,0,15,1},
{21,0,18,1},
{21,0,23,1},
{21,0,27,1},
{21,0,31,2},
{21,0,32,1},
{21,0,35,1},
{21,0,39,1},
{21,0,41,2},
{21,0,43,1},
{21,0,47,1},
{21,0,51,1},
{21,0,52,2},
{21,0,55,1},
{21,0,56,2},
{21,0,57,1},
{21,0,59,2},
{21,1,0,2},
{21,1,2,1},
{21,1,5,2},
{21,1,8,1},
{21,1,9,2},
{21,1,10,2},
{21,1,13,2},
{21,1,16,2},
{21,1,18,1},
{21,1,19,2},
{21,1,21,2},
{21,1,24,1},
//{21,1,24,2},
{21,1,29,2},
{21,1,31,1},
{21,1,33,2},
{21,1,37,2},
{21,1,41,2},
{21,1,45,2},
{21,1,48,2},
{21,1,53,1},
//{21,1,53,2},
{21,1,57,1},
{21,1,58,2},
{21,2,1,2},
{21,2,4,2},
{21,2,9,2},
{21,2,13,2},
{21,2,17,2},
{21,2,19,2},
{21,2,21,2},
{21,2,25,2},
{21,2,27,2},
{21,2,29,2},
{21,2,33,2},
{21,2,36,2},
{21,2,41,2},
{21,2,44,2},
{21,2,49,2},
{21,2,53,2},
{21,2,56,2},
{21,3,1,2},
{21,3,5,2},
{21,3,6,2},
{21,3,10,2},
{21,3,13,2},
{21,3,18,2},
{21,3,22,2},
{21,3,26,2},
{21,3,30,2},
{21,3,35,2},
{21,3,39,2},
{21,3,43,2},
{21,3,47,1},
//{21,3,47,2},
{21,3,51,2},
{21,3,55,2},
{21,3,59,2},
{21,4,3,2},
{21,4,7,2},
{21,4,10,2},
{21,4,12,2},
{21,4,16,2},
{21,4,19,2},
{21,4,24,2},
{21,4,28,2},
{21,4,32,2},
{21,4,38,1},
{21,4,39,2},
{21,4,41,2},
{21,4,43,1},
{21,4,45,2},
{21,4,48,2},
{21,4,51,2},
{21,4,56,2},
{21,5,0,2},
{21,5,4,2},
{21,5,7,2},
{21,5,12,2},
{21,5,16,2},
{21,5,19,2},
{21,5,24,2},
{21,5,28,2},
{21,5,32,2},
{21,5,36,2},
{21,5,40,2},
{21,5,44,2},
{21,5,48,2},
{21,5,52,2},
{21,5,56,2},
{21,6,0,2},
{21,6,4,2},
{21,6,8,2},
{21,6,11,2},
{21,6,16,2},
{21,6,19,2},
{21,6,24,2},
{21,6,27,2},
{21,6,29,1},
{21,6,31,2},
{21,6,33,2},
{21,6,37,2},
{21,6,41,2},
{21,6,45,2},
{21,6,49,2},
{21,6,53,2},
{21,6,57,2},
{21,7,0,2},
{21,7,4,2},
{21,7,8,2},
{21,7,13,2},
{21,7,17,2},
{21,7,21,2},
{21,7,24,2},
{21,7,28,2},
{21,7,33,2},
{21,7,36,2},
{21,7,41,2},
{21,7,45,2},
{21,7,49,2},
{21,7,53,19},
{21,7,56,2},
{21,8,0,3},
{21,8,4,25},
{21,8,10,25},
{21,8,11,26},
{21,8,14,29},
{21,8,18,11},
{21,8,22,11},
{21,8,24,12},
{21,8,25,12},
{21,8,30,12},
{21,8,32,14},
{21,8,34,17},
{21,8,35,19},
{21,8,36,20},
{21,8,39,25},
{21,8,40,25},
{21,8,41,23},
{21,8,44,18},
{21,8,48,13},
{21,8,50,17},
{21,8,51,21},
{21,8,54,22},
{21,8,56,15},
{21,8,58,16},
//{21,8,58,17},
{21,9,2,16},
{21,9,5,14},
{21,9,6,15},
{21,9,8,14},
{21,9,11,13},
{21,9,15,18},
{21,9,16,21},
{21,9,19,27},
{21,9,20,22},
{21,9,23,22},
{21,9,25,23},
//{21,9,25,25},
{21,9,29,20},
{21,9,30,18},
{21,9,32,21},
{21,9,34,21},
//{21,9,34,20},
{21,9,36,18},
{21,9,39,30},
{21,9,39,33},
{21,9,41,34},
{21,9,43,21},
{21,9,44,17},
{21,9,45,15},
{21,9,49,15},
{21,9,50,14},
{21,9,51,13},
{21,9,53,14},
{21,9,58,15},
{21,9,59,18},
{21,9,59,17},
{21,10,1,20},
{21,10,3,25},
{21,10,4,30},
{21,10,5,32},
{21,10,6,31},
{21,10,9,33},
{21,10,12,32},
{21,10,14,34},
{21,10,15,32},
{21,10,17,35},
{21,10,17,40},
{21,10,19,42},
{21,10,21,33},
{21,10,24,31},
{21,10,26,23},
{21,10,28,22},
{21,10,30,26},
{21,10,30,24},
{21,10,33,26},
{21,10,35,28},
{21,10,38,26},
{21,10,39,27},
{21,10,42,39},
{21,10,42,35},
{21,10,45,36},
{21,10,47,33},
{21,10,49,40},
{21,10,51,39},
{21,10,53,37},
{21,10,55,33},
{21,10,57,43},
{21,10,59,46},
{21,11,1,35},
{21,11,2,33},
{21,11,4,33},
{21,11,6,30},
{21,11,9,30},
{21,11,12,29},
{21,11,13,28},
{21,11,15,35},
{21,11,17,33},
{21,11,19,41},
{21,11,22,43},
{21,11,23,44},
{21,11,25,50},
{21,11,27,46},
{21,11,29,42},
{21,11,31,39},
{21,11,34,39},
{21,11,34,41},
{21,11,37,39},
{21,11,39,44},
{21,11,41,51},
{21,11,43,52},
{21,11,44,40},
{21,11,46,27},
{21,11,48,25},
{21,11,51,29},
{21,11,54,30},
{21,11,54,33},
{21,11,57,38},
{21,11,59,40},
{21,12,0,44},
{21,12,2,52},
{21,12,5,46},
{21,12,7,59},
{21,12,8,55},
{21,12,11,41},
{21,12,14,31},
{21,12,17,26},
{21,12,18,44},
{21,12,21,37},
{21,12,23,66},
{21,12,25,84},
{21,12,27,89},
{21,12,29,84},
{21,12,30,77},
{21,12,33,74},
{21,12,35,72},
{21,12,37,74},
{21,12,38,78},
{21,12,41,80},
{21,12,42,80},
{21,12,44,79},
{21,12,46,72},
{21,12,49,62},
{21,12,51,60},
{21,12,52,64},
{21,12,55,70},
{21,12,56,70},
{21,12,59,70},
{21,13,2,71},
{21,13,2,70},
{21,13,4,67},
{21,13,7,58},
{21,13,9,59},
{21,13,11,60},
{21,13,14,55},
{21,13,15,51},
{21,13,17,43},
{21,13,19,43},
{21,13,21,46},
{21,13,22,45},
{21,13,25,52},
{21,13,26,56},
{21,13,28,56},
{21,13,31,65},
{21,13,32,56},
{21,13,35,52},
{21,13,37,54},
{21,13,38,53},
{21,13,40,54},
{21,13,42,48},
{21,13,46,39},
{21,13,46,36},
{21,13,49,34},
{21,13,50,33},
{21,13,53,37},
{21,13,55,42},
{21,13,58,47},
{21,13,58,46},
{21,14,0,41},
{21,14,3,34},
{21,14,4,30},
{21,14,7,26},
{21,14,9,24},
{21,14,11,22},
{21,14,13,23},
{21,14,15,21},
{21,14,16,18},
{21,14,19,15},
{21,14,20,14},
{21,14,23,16},
{21,14,26,18},
{21,14,29,20},
{21,14,30,20},
{21,14,34,20},
{21,14,37,19},
{21,14,38,18},
{21,14,40,17},
{21,14,43,17},
{21,14,45,16},
{21,14,46,15},
{21,14,50,14},
{21,14,54,13},
{21,14,54,12},
{21,14,57,10},
{21,14,58,9},
{21,15,3,9},
{21,15,6,9},
{21,15,8,10},
{21,15,11,11},
{21,15,12,10},
{21,15,14,9},
{21,15,15,9},
{21,15,19,8},
{21,15,20,8},
{21,15,23,9},
{21,15,24,9},
{21,15,28,9},
{21,15,31,9},
{21,15,34,8},
{21,15,35,8},
{21,15,37,7},
{21,15,40,7},
{21,15,40,6},
{21,15,42,5},
{21,15,44,5},
{21,15,48,26},
{21,15,51,25},
{21,15,53,25},
{21,15,54,24},
{21,15,57,24},
{21,16,0,24},
{21,16,3,24},
{21,16,7,24},
{21,16,9,23},
{21,16,11,30},
{21,16,12,30},
{21,16,15,30},
{21,16,19,30},
{21,16,24,30},
{21,16,28,30},
{21,16,32,30},
{21,16,36,30},
{21,16,40,30},
{21,16,44,30},
{21,16,48,30},
{21,16,52,2},
{21,16,55,2},
{21,16,58,17},
{21,17,0,20},
{21,17,2,14},
{21,17,4,17},
{21,17,7,13},
{21,17,9,16},
{21,17,11,15},
{21,17,12,22},
{21,17,16,17},
{21,17,16,20},
{21,17,18,17},
{21,17,21,15},
{21,17,23,20},
{21,17,24,15},
{21,17,27,14},
{21,17,28,20},
{21,17,31,22},
{21,17,32,20},
{21,17,34,13},
{21,17,37,20},
{21,17,39,2},
{21,17,44,2},
{21,17,44,24},
{21,17,46,32},
{21,17,48,31},
{21,17,52,31},
{21,17,55,31},
{21,17,56,30},
{21,18,0,31},
{21,18,0,30},
{21,18,4,30},
{21,18,7,30},
{21,18,12,30},
{21,18,15,30},
{21,18,19,30},
{21,18,23,30},
{21,18,28,30},
{21,18,31,30},
{21,18,35,30},
{21,18,39,30},
{21,18,43,30},
{21,18,47,30},
{21,18,51,30},
{21,18,56,30},
{21,19,0,30},
{21,19,3,30},
{21,19,7,30},
{21,19,11,30},
{21,19,13,2},
{21,19,15,14},
{21,19,16,2},
{21,19,19,31},
{21,19,20,31},
{21,19,22,30},
{21,19,24,30},
{21,19,28,30},
{21,19,32,30},
{21,19,36,30},
{21,19,41,30},
{21,19,45,30},
{21,19,48,2},
{21,19,53,2},
{21,19,56,2},
{21,20,1,2},
{21,20,4,2},
{21,20,9,2},
{21,20,13,2},
{21,20,16,2},
{21,20,20,2},
{21,20,26,2},
{21,20,28,2},
{21,20,32,2},
{21,20,36,2},
{21,20,41,2},
{21,20,44,2},
{21,20,48,2},
{21,20,52,2},
{21,20,56,2},
{21,21,0,2},
{21,21,5,2},
{21,21,8,2},
{21,21,13,2},
{21,21,17,31},
{21,21,17,31},
{21,21,22,31},
{21,21,24,32},
{21,21,25,31},
{21,21,29,30},
{21,21,30,30},
{21,21,33,30},
{21,21,37,30},
{21,21,42,30},
{21,21,46,30},
{21,21,49,30},
{21,21,54,30},
{21,21,58,30},
{21,22,0,31},
{21,22,4,31},
{21,22,5,32},
{21,22,7,2},
{21,22,8,2},
{21,22,12,2},
{21,22,15,2},
{21,22,19,2},
{21,22,24,2},
{21,22,27,2},
{21,22,31,2},
{21,22,35,2},
{21,22,39,2},
{21,22,44,2},
{21,22,47,2},
{21,22,51,2},
{21,22,55,2},
{21,22,59,2},
{21,23,3,2},
{21,23,8,2},
{21,23,12,2},
{21,23,16,2},
{21,23,20,2},
{21,23,24,2},
{21,23,28,2},
{21,23,32,2},
{21,23,37,2},
{21,23,40,2},
{21,23,44,2},
{21,23,48,2},
{21,23,52,2},
{21,23,56,2},
{22,0,1,2},
{22,0,4,2},
{22,0,9,2},
{22,0,12,2},
{22,0,17,2},
{22,0,21,2},
{22,0,25,2},
{22,0,28,2},
{22,0,33,3},
{22,0,37,3},
{22,0,40,3},
{22,0,44,3},
{22,0,48,3},
{22,0,50,3},
{22,0,52,3},
{22,0,57,2},
{22,1,0,2},
{22,1,4,2},
{22,1,8,2},
{22,1,12,2},
{22,1,16,2},
{22,1,20,2},
{22,1,24,2},
{22,1,28,2},
{22,1,33,2},
{22,1,37,2},
{22,1,40,2},
{22,1,44,2},
{22,1,48,2},
{22,1,53,2},
{22,1,57,2},
{22,2,1,2},
{22,2,4,2},
{22,2,8,2},
{22,2,12,2},
{22,2,16,2},
{22,2,21,2},
{22,2,25,2},
{22,2,28,2},
{22,2,33,2},
{22,2,36,2},
{22,2,40,2},
{22,2,44,2},
{22,2,49,2},
{22,2,53,2},
{22,2,56,2},
{22,3,0,2},
{22,3,5,2},
{22,3,9,2},
{22,3,12,2},
{22,3,16,2},
{22,3,20,2},
{22,3,24,2},
{22,3,29,2},
{22,3,32,2},
{22,3,37,2},
{22,3,40,2},
{22,3,44,2},
{22,3,48,2},
{22,3,52,2},
{22,3,56,2},
{22,4,1,2},
{22,4,4,2},
{22,4,9,2},
{22,4,12,2},
{22,4,16,2},
{22,4,21,2},
{22,4,25,2},
{22,4,28,2},
{22,4,32,2},
{22,4,37,2},
{22,4,40,2},
{22,4,44,2},
{22,4,48,2},
{22,4,53,2},
{22,4,57,2},
{22,5,0,2},
{22,5,4,2},
{22,5,8,2},
{22,5,13,2},
{22,5,16,2},
{22,5,20,2},
{22,5,24,2},
{22,5,29,2},
{22,5,33,2},
{22,5,37,2},
{22,5,41,2},
{22,5,44,2},
{22,5,48,2},
{22,5,53,2},
{22,5,56,2},
{22,6,0,2},
{22,6,4,2},
{22,6,8,2},
{22,6,12,2},
{22,6,16,2},
{22,6,20,2},
{22,6,25,2},
{22,6,28,2},
{22,6,33,2},
{22,6,36,2},
{22,6,40,2},
{22,6,45,2},
{22,6,48,2},
{22,6,52,2},
{22,6,56,2},
{22,7,0,2},
{22,7,5,2},
{22,7,9,2},
{22,7,12,2},
{22,7,16,2},
{22,7,20,2},
{22,7,24,2},
{22,7,28,2},
{22,7,32,2},
{22,7,37,2},
{22,7,41,2},
{22,7,45,2},
{22,7,48,2},
{22,7,52,2},
{22,7,56,2},
{22,8,1,2},
{22,8,2,3},
{22,8,5,3},
{22,8,8,3},
{22,8,12,7},
{22,8,17,7},
{22,8,18,8},
{22,8,20,8},
{22,8,24,8},
{22,8,25,10},
{22,8,28,11},
{22,8,32,13},
{22,8,33,14},
{22,8,35,18},
{22,8,36,20},
{22,8,40,22},
{22,8,42,24},
{22,8,42,27},
{22,8,45,33},
{22,8,49,32},
{22,8,53,35},
{22,8,57,36},
{22,8,59,36},
{22,9,1,52},
{22,9,5,59},
{22,9,7,62},
{22,9,10,62},
{22,9,11,62},
{22,9,13,67},
{22,9,15,79},
{22,9,18,70},
{22,9,19,58},
{22,9,21,67},
{22,9,21,76},
{22,9,24,85},
{22,9,26,82},
{22,9,26,80},
{22,9,30,75},
{22,9,30,90},
{22,9,31,110},
{22,9,34,128},
{22,9,35,144},
{22,9,39,91},
{22,9,41,86},
{22,9,41,103},
{22,9,44,113},
{22,9,45,93},
{22,9,46,74},
{22,9,50,66},
{22,9,52,71},
{22,9,53,73},
{22,9,55,62},
{22,9,56,55},
{22,9,59,74},
{22,9,59,75},
{22,10,0,64},
{22,10,2,54},
{22,10,4,60},
{22,10,7,87},
{22,10,8,83},
{22,10,12,87},
{22,10,16,140},
{22,10,17,144},
{22,10,20,123},
{22,10,22,84},
{22,10,26,76},
{22,10,26,73},
{22,10,29,73},
{22,10,30,71},
{22,10,33,93},
{22,10,35,79},
{22,10,39,85},
{22,10,39,78},
{22,10,42,75},
{22,10,43,77},
{22,10,44,81},
{22,10,47,79},
{22,10,48,86},
{22,10,51,83},
{22,10,52,80},
{22,10,54,85},
{22,10,57,83},
{22,10,59,78},
{22,11,3,89},
{22,11,4,105},
{22,11,8,120},
{22,11,11,99},
{22,11,12,103},
{22,11,14,64},
{22,11,16,93},
{22,11,19,88},
{22,11,20,87},
{22,11,23,88},
{22,11,24,75},
{22,11,27,62},
{22,11,28,56},
{22,11,30,78},
{22,11,32,78},
{22,11,35,79},
{22,11,36,81},
{22,11,38,79},
{22,11,42,82},
{22,11,44,61},
{22,11,48,71},
{22,11,48,63},
{22,11,50,65},
{22,11,53,71},
{22,11,54,70},
{22,11,56,77},
{22,11,59,71},
{22,12,1,79},
{22,12,2,72},
{22,12,4,61},
{22,12,6,65},
{22,12,8,60},
{22,12,10,58},
{22,12,13,57},
{22,12,15,56},
{22,12,17,55},
{22,12,19,54},
{22,12,23,54},
{22,12,24,52},
{22,12,27,52},
{22,12,30,50},
{22,12,32,50},
{22,12,35,49},
{22,12,39,49},
{22,12,40,48},
{22,12,43,48},
{22,12,44,47},
{22,12,47,47},
{22,12,51,47},
{22,12,53,46},
{22,12,55,46},
{22,12,59,46},
{22,13,3,45},
{22,13,7,45},
{22,13,11,45},
{22,13,12,46},
{22,13,14,47},
{22,13,16,46},
{22,13,19,47},
{22,13,20,46},
{22,13,23,45},
{22,13,27,45},
{22,13,29,46},
{22,13,30,47},
{22,13,32,47},
{22,13,34,50},
{22,13,36,54},
{22,13,38,53},
{22,13,40,57},
{22,13,42,67},
{22,13,45,64},
{22,13,47,52},
{22,13,48,50},
{22,13,50,50},
{22,13,52,52},
{22,13,54,53},
{22,13,56,50},
{22,13,59,48},
{22,14,1,46},
{22,14,3,45},
{22,14,4,44},
{22,14,6,42},
{22,14,8,41},
{22,14,10,42},
{22,14,12,45},
{22,14,14,44},
{22,14,16,41},
{22,14,19,40},
{22,14,20,39},
{22,14,22,38},
{22,14,24,38},
{22,14,26,38},
{22,14,28,38},
{22,14,30,37},
{22,14,32,35},
{22,14,34,32},
{22,14,37,30},
{22,14,38,29},
{22,14,40,29},
{22,14,43,28},
{22,14,44,28},
{22,14,47,29},
{22,14,48,28},
{22,14,51,27},
{22,14,52,26},
{22,14,54,25},
{22,14,56,24},
{22,14,59,23},
{22,15,0,22},
{22,15,2,21},
{22,15,4,20},
{22,15,7,20},
{22,15,10,22},
{22,15,12,22},
{22,15,14,19},
{22,15,17,18},
{22,15,18,17},
{22,15,20,16},
{22,15,24,16},
{22,15,28,16},
{22,15,30,15},
{22,15,32,14},
{22,15,34,12},
{22,15,36,11},
{22,15,39,10},
{22,15,42,9},
{22,15,43,9},
{22,15,44,8},
{22,15,48,7},
{22,15,50,6},
{22,15,52,5},
{22,15,55,4},
{22,15,59,4},
{22,16,3,4},
{22,16,4,3},
{22,16,7,3},
{22,16,11,2},
{22,16,15,2},
{22,16,20,2},
{22,16,23,31},
{22,16,27,31},
{22,16,31,30},
{22,16,35,30},
{22,16,39,30},
{22,16,43,30},
{22,16,47,30},
{22,16,51,30},
{22,16,56,30},
{22,16,59,30},
{22,17,4,30},
{22,17,8,30},
{22,17,12,30},
{22,17,16,30},
{22,17,20,30},
{22,17,24,30},
{22,17,29,30},
{22,17,32,30},
{22,17,34,2},
{22,17,37,2},
{22,17,41,2},
{22,17,44,2},
{22,17,46,1},
{22,17,49,31},
{22,17,52,31},
{22,17,53,30},
{22,17,56,30},
{22,18,0,30},
{22,18,4,30},
{22,18,8,30},
{22,18,12,30},
{22,18,16,30},
{22,18,20,30},
{22,18,24,30},
{22,18,28,30},
{22,18,32,30},
{22,18,36,30},
{22,18,40,30},
{22,18,44,30},
{22,18,48,30},
{22,18,52,30},
{22,18,56,30},
{22,19,0,30},
{22,19,4,30},
{22,19,8,30},
{22,19,12,2},
{22,19,16,30},
{22,19,17,31},
{22,19,18,30},
{22,19,21,30},
{22,19,24,30},
{22,19,28,30},
{22,19,32,30},
{22,19,36,30},
{22,19,40,30},
{22,19,44,30},
{22,19,48,30},
{22,19,52,30},
{22,19,57,30},
{22,20,1,30},
{22,20,5,30},
{22,20,9,30},
{22,20,13,30},
{22,20,17,30},
{22,20,21,30},
{22,20,25,30},
{22,20,29,30},
{22,20,33,30},
{22,20,37,30},
{22,20,41,30},
{22,20,45,30},
{22,20,49,30},
{22,20,53,30},
{22,20,56,29},
{22,20,58,2},
{22,21,1,2},
{22,21,5,31},
{22,21,8,2},
{22,21,10,2},
{22,21,13,31},
{22,21,17,31},
{22,21,21,30},
{22,21,24,31},
{22,21,26,30},
{22,21,29,30},
{22,21,33,30},
{22,21,37,30},
{22,21,41,30},
{22,21,46,30},
{22,21,50,30},
{22,21,54,30},
{22,21,58,30},
{22,22,2,30},
{22,22,6,2},
{22,22,10,2},
{22,22,14,22},
{22,22,15,12},
{22,22,16,18},
{22,22,18,2},
{22,22,19,2},
{22,22,23,2},
{22,22,27,2},
{22,22,31,2},
{22,22,35,2},
{22,22,39,2},
{22,22,43,2},
{22,22,47,2},
{22,22,51,3},
{22,22,55,3},
{22,22,59,3},
{22,23,3,3},
{22,23,7,3},
{22,23,11,3},
{22,23,13,2},
{22,23,15,2},
{22,23,20,2},
{22,23,24,2},
{22,23,28,2},
{22,23,32,2},
{22,23,36,2},
{22,23,40,2},
{22,23,44,2},
{22,23,48,2},
{22,23,52,2},
{22,23,56,2},
{23,0,0,2},
{23,0,4,2},
{23,0,8,2},
{23,0,12,2},
{23,0,16,2},
{23,0,20,2},
{23,0,24,2},
{23,0,28,2},
{23,0,32,2},
{23,0,36,2},
{23,0,40,2},
{23,0,44,2},
{23,0,48,2},
{23,0,52,2},
{23,0,56,2},
{23,1,0,2},
{23,1,4,2},
{23,1,8,2},
{23,1,12,2},
{23,1,16,2},
{23,1,20,2},
{23,1,24,2},
{23,1,28,2},
{23,1,32,2},
{23,1,36,2},
{23,1,40,2},
{23,1,44,2},
{23,1,48,2},
{23,1,52,2},
{23,1,56,2},
{23,2,0,2},
{23,2,4,2},
{23,2,8,2},
{23,2,12,2},
{23,2,16,2},
{23,2,20,2},
{23,2,24,2},
{23,2,28,2},
{23,2,32,2},
{23,2,36,2},
{23,2,40,1},
{23,2,41,2},
{23,2,44,2},
{23,2,48,2},
{23,2,52,2},
{23,2,56,2},
{23,3,0,2},
{23,3,4,2},
{23,3,8,2},
{23,3,10,2},
{23,3,13,2},
{23,3,16,2},
{23,3,20,2},
{23,3,24,1},
{23,3,25,2},
{23,3,26,1},
{23,3,28,1},
{23,3,29,2},
{23,3,33,2},
{23,3,34,1},
{23,3,36,2},
{23,3,38,1},
{23,3,40,2},
{23,3,42,2},
{23,3,44,1},
{23,3,46,2},
{23,3,49,2},
{23,3,50,1},
{23,3,53,1},
{23,3,54,2},
{23,3,57,2},
{23,3,58,1},
{23,4,0,1},
{23,4,2,1},
{23,4,4,2},
{23,4,6,1},
{23,4,8,2},
{23,4,10,1},
{23,4,12,2},
{23,4,14,1},
{23,4,17,1},
{23,4,20,2},
{23,4,22,1},
{23,4,25,1},
{23,4,29,1},
{23,4,33,1},
{23,4,35,2},
{23,4,36,1},
{23,4,38,1},
{23,4,41,1},
{23,4,45,1},
{23,4,49,1},
{23,4,53,1},
{23,4,57,1},
{23,5,1,1},
{23,5,5,1},
{23,5,9,1},
{23,5,13,1},
{23,5,17,1},
{23,5,21,1},
{23,5,25,1},
{23,5,29,1},
{23,5,33,1},
{23,5,37,1},
{23,5,41,1},
{23,5,45,1},
{23,5,49,1},
{23,5,53,1},
{23,5,57,1},
{23,6,1,1},
{23,6,5,1},
{23,6,9,1},
{23,6,13,1},
{23,6,17,1},
{23,6,21,1},
{23,6,25,1},
{23,6,29,1},
{23,6,33,1},
{23,6,37,1},
{23,6,41,1},
{23,6,45,1},
{23,6,49,1},
{23,6,53,1},
{23,6,57,1},
{23,7,1,1},
{23,7,5,1},
{23,7,9,1},
{23,7,13,1},
{23,7,17,1},
{23,7,21,1},
{23,7,25,1},
{23,7,29,2},
{23,7,30,1},
{23,7,33,2},
{23,7,34,1},
{23,7,36,2},
{23,7,38,2},
{23,7,41,2},
{23,7,46,2},
{23,7,50,3},
{23,7,54,16},
{23,7,57,25},
{23,8,1,26},
{23,8,2,24},
{23,8,6,17},
{23,8,7,16},
{23,8,8,20},
{23,8,11,26},
{23,8,15,17},
{23,8,19,27},
{23,8,23,21},
{23,8,25,29},
{23,8,27,33},
{23,8,28,34},
{23,8,29,26},
{23,8,32,32},
{23,8,33,30},
{23,8,34,31},
{23,8,37,38},
{23,8,38,41},
{23,8,39,43},
{23,8,42,43},
{23,8,43,45},
{23,8,44,44},
{23,8,47,34},
{23,8,48,40},
{23,8,52,38},
{23,8,53,38},
{23,8,54,34},
{23,8,57,57},
{23,8,59,41},
{23,9,2,46},
{23,9,3,47},
{23,9,4,48},
{23,9,7,50},
{23,9,11,48},
{23,9,13,56},
{23,9,14,57},
{23,9,16,59},
{23,9,20,58},
{23,9,21,57},
{23,9,22,55},
{23,9,25,58},
{23,9,30,48},
{23,9,31,49},
{23,9,33,46},
{23,9,35,43},
{23,9,36,39},
{23,9,37,50},
{23,9,40,54},
{23,9,41,50},
{23,9,42,48},
{23,9,44,46},
{23,9,46,44},
{23,9,49,40},
{23,9,50,39},
{23,9,53,46},
{23,9,54,49},
{23,9,55,52},
{23,9,58,50},
{23,9,59,52},
{23,10,2,40},
{23,10,3,44},
{23,10,4,50},
{23,10,6,47},
{23,10,8,41},
{23,10,11,31},
{23,10,12,35},
{23,10,13,33},
{23,10,14,41},
{23,10,16,50},
{23,10,18,40},
{23,10,20,48},
{23,10,21,56},
{23,10,22,60},
{23,10,25,48},
{23,10,26,47},
{23,10,29,43},
{23,10,30,47},
{23,10,33,52},
{23,10,34,55},
{23,10,36,56},
{23,10,38,57},
{23,10,41,53},
{23,10,42,47},
{23,10,43,50},
{23,10,44,44},
{23,10,46,50},
{23,10,47,43},
{23,10,48,49},
{23,10,50,53},
{23,10,52,49},
{23,10,55,45},
{23,10,56,47},
{23,10,59,46},
{23,11,1,49},
{23,11,3,52},
{23,11,4,39},
{23,11,6,39},
{23,11,8,39},
{23,11,11,51},
{23,11,12,56},
{23,11,14,52},
{23,11,16,43},
{23,11,19,35},
{23,11,20,34},
{23,11,22,31},
{23,11,24,29},
{23,11,27,31},
{23,11,28,29},
{23,11,30,30},
{23,11,32,27},
{23,11,35,28},
{23,11,36,32},
{23,11,38,33},
{23,11,40,32},
{23,11,42,31},
{23,11,44,27},
{23,11,47,40},
{23,11,50,43},
{23,11,52,52},
{23,11,54,58},
{23,11,56,57},
{23,11,59,32},
{23,12,0,34},
{23,12,2,39},
{23,12,4,29},
{23,12,6,30},
{23,12,8,26},
{23,12,11,22},
{23,12,12,19},
{23,12,14,25},
{23,12,16,32},
{23,12,18,33},
{23,12,20,43},
{23,12,23,99},
{23,12,24,108},
{23,12,26,134},
{23,12,28,104},
{23,12,30,65},
{23,12,32,53},
{23,12,35,67},
{23,12,36,56},
{23,12,38,65},
{23,12,40,63},
{23,12,42,46},
{23,12,44,39},
{23,12,46,36},
{23,12,48,35},
{23,12,50,32},
{23,12,52,42},
{23,12,54,38},
{23,12,56,41},
{23,12,58,46},
{23,13,0,43},
{23,13,2,35},
{23,13,4,39},
{23,13,6,47},
{23,13,8,47},
{23,13,10,38},
{23,13,12,42},
{23,13,14,36},
{23,13,16,46},
{23,13,19,58},
{23,13,20,56},
{23,13,22,66},
{23,13,24,68},
{23,13,26,67},
{23,13,28,69},
{23,13,30,58},
{23,13,32,40},
{23,13,34,42},
{23,13,36,49},
{23,13,38,46},
{23,13,40,38},
{23,13,43,40},
{23,13,44,43},
{23,13,47,35},
{23,13,48,45},
{23,13,50,41},
{23,13,52,35},
{23,13,54,30},
{23,13,56,34},
{23,13,58,35},
{23,14,0,37},
{23,14,2,37},
{23,14,4,38},
{23,14,7,25},
{23,14,8,29},
{23,14,10,26},
{23,14,12,24},
{23,14,14,26},
{23,14,16,35},
{23,14,18,40},
{23,14,20,34},
{23,14,22,29},
{23,14,24,31},
{23,14,26,31},
{23,14,28,26},
{23,14,30,26},
{23,14,32,26},
{23,14,35,21},
{23,14,36,22},
{23,14,38,25},
{23,14,40,28},
{23,14,42,33},
{23,14,44,23},
{23,14,46,18},
{23,14,50,12},
{23,14,52,12},
{23,14,54,11},
{23,14,56,9},
{23,14,59,10},
{23,15,0,9},
{23,15,2,12},
{23,15,4,12},
{23,15,6,12},
{23,15,8,12},
{23,15,10,12},
{23,15,12,15},
{23,15,14,17},
{23,15,16,13},
{23,15,19,14},
{23,15,23,14},
{23,15,24,13},
{23,15,26,11},
{23,15,28,7},
{23,15,30,5},
{23,15,32,5},
{23,15,34,3},
{23,15,36,3},
{23,15,39,3},
{23,15,43,3},
{23,15,48,3},
{23,15,52,2},
{23,15,56,2},
{23,16,0,2},
{23,16,4,2},
{23,16,8,2},
{23,16,12,2},
{23,16,16,2},
{23,16,20,2},
{23,16,22,1},
{23,16,25,2},
{23,16,28,1},
{23,16,32,1},
{23,16,33,1},
{23,16,37,1},
{23,16,39,2},
{23,16,40,1},
{23,16,42,1},
{23,16,46,2},
{23,16,48,1},
{23,16,50,1},
{23,16,52,2},
{23,16,54,1},
{23,16,56,1},
{23,16,58,2},
{23,17,0,2},
{23,17,2,2},
{23,17,5,1},
{23,17,6,2},
{23,17,9,2},
{23,17,11,1},
{23,17,12,2},
{23,17,14,1},
{23,17,17,2},
{23,17,19,1},
{23,17,20,2},
{23,17,22,1},
{23,17,24,2},
{23,17,26,1},
{23,17,28,1},
{23,17,30,2},
{23,17,33,1},
{23,17,35,2},
{23,17,37,2},
{23,17,39,1},
{23,17,41,2},
{23,17,42,1},
{23,17,44,1},
{23,17,46,2},
{23,17,50,2},
{23,17,53,2},
{23,17,57,2},
{23,18,1,2},
{23,18,7,2},
{23,18,11,2},
{23,18,15,2},
{23,18,19,2},
{23,18,23,2},
{23,18,27,2},
{23,18,31,2},
{23,18,35,2},
{23,18,40,2},
{23,18,44,2},
{23,18,48,2},
{23,18,52,2},
{23,18,56,2},
{23,19,0,2},
{23,19,5,2},
{23,19,8,2},
{23,19,12,2},
{23,19,17,2},
{23,19,20,2},
{23,19,24,2},
{23,19,28,2},
{23,19,32,2},
{23,19,36,2},
{23,19,40,2},
{23,19,44,2},
{23,19,48,2},
{23,19,52,2},
{23,19,56,2},
{23,20,0,2},
{23,20,4,2},
{23,20,9,2},
{23,20,12,2},
{23,20,16,2},
{23,20,20,2},
{23,20,24,2},
{23,20,28,2},
{23,20,32,2},
{23,20,36,2},
{23,20,40,2},
{23,20,44,2},
{23,20,48,2},
{23,20,52,2},
{23,20,56,2},
{23,21,0,2},
{23,21,4,2},
{23,21,8,2},
{23,21,12,2},
{23,21,16,2},
{23,21,20,2},
{23,21,24,2},
{23,21,29,2},
{23,21,32,2},
{23,21,36,2},
{23,21,40,2},
{23,21,44,2},
{23,21,48,2},
{23,21,52,2},
{23,21,56,2},
{23,22,0,2},
{23,22,4,2},
{23,22,8,3},
{23,22,11,3},
{23,22,15,3},
{23,22,19,3},
{23,22,20,2},
{23,22,23,2},
{23,22,27,2},
{23,22,31,2},
{23,22,35,2},
{23,22,39,2},
{23,22,43,2},
{23,22,48,2},
{23,22,52,2},
{23,22,56,2},
{23,23,0,2},
{23,23,4,2},
{23,23,9,2},
{23,23,13,2},
{23,23,17,2},
{23,23,21,2},
{23,23,25,2},
{23,23,29,2},
{23,23,33,2},
{23,23,37,2},
{23,23,41,2},
{23,23,45,2},
{23,23,49,2},
{23,23,53,2},
{23,23,57,2},
{23,23,58,1},
{24,0,0,2},
{24,0,2,2},
{24,0,4,2},
{24,0,6,1},
{24,0,9,2},
{24,0,13,1},
{24,0,14,2},
{24,0,16,2},
{24,0,18,2},
{24,0,21,2},
{24,0,22,1},
{24,0,24,2},
{24,0,26,2},
{24,0,28,2},
{24,0,30,2},
{24,0,32,2},
{24,0,34,2},
{24,0,36,1},
{24,0,38,2},
{24,0,41,1},
{24,0,42,2},
{24,0,45,2},
{24,0,48,1},
{24,0,50,2},
{24,0,52,1},
{24,0,54,1},
{24,0,56,1},
{24,0,58,2},
{24,1,0,1},
{24,1,2,1},
{24,1,4,2},
{24,1,6,1},
{24,1,8,2},
{24,1,10,2},
{24,1,12,1},
{24,1,14,1},
{24,1,16,1},
{24,1,18,1},
{24,1,21,1},
{24,1,24,1},
{24,1,26,2},
{24,1,28,1},
{24,1,30,2},
{24,1,33,1},
{24,1,37,1},
{24,1,41,1},
{24,1,45,1},
{24,1,49,1},
{24,1,53,1},
{24,1,55,2},
{24,1,56,1},
{24,1,58,1},
{24,2,1,2},
{24,2,2,1},
{24,2,5,1},
{24,2,9,1},
{24,2,11,2},
{24,2,12,1},
{24,2,14,1},
{24,2,17,1},
{24,2,21,1},
{24,2,25,1},
{24,2,29,2},
{24,2,30,1},
{24,2,33,1},
{24,2,37,1},
{24,2,41,1},
{24,2,45,1},
{24,2,49,1},
{24,2,53,1},
{24,2,57,1},
{24,3,1,1},
{24,3,5,1},
{24,3,9,1},
{24,3,13,1},
{24,3,17,1},
{24,3,21,1},
{24,3,25,1},
{24,3,29,1},
{24,3,33,1},
{24,3,37,1},
{24,3,41,1},
{24,3,45,1},
{24,3,49,1},
{24,3,53,1},
{24,3,57,1},
{24,4,1,1},
{24,4,5,1},
{24,4,9,1},
{24,4,13,1},
{24,4,17,1},
{24,4,21,1},
{24,4,25,1},
{24,4,29,1},
{24,4,33,1},
{24,4,37,1},
{24,4,41,1},
{24,4,45,1},
{24,4,49,1},
{24,4,53,1},
{24,4,57,1},
{24,5,1,1},
{24,5,5,1},
{24,5,9,1},
{24,5,13,1},
{24,5,17,1},
{24,5,21,1},
{24,5,25,1},
{24,5,29,1},
{24,5,33,1},
{24,5,37,1},
{24,5,41,1},
{24,5,45,1},
{24,5,49,1},
{24,5,53,1},
{24,5,57,1},
{24,6,1,1},
{24,6,5,1},
{24,6,9,1},
{24,6,13,1},
{24,6,15,2},
{24,6,17,2},
{24,6,18,1},
{24,6,21,2},
{24,6,22,1},
{24,6,25,1},
{24,6,29,1},
{24,6,33,1},
{24,6,37,1},
{24,6,38,2},
{24,6,40,1},
{24,6,42,2},
{24,6,44,1},
{24,6,46,1},
{24,6,50,2},
{24,6,51,2},
{24,6,52,1},
{24,6,55,1},
{24,6,59,1},
{24,7,0,2},
{24,7,2,1},
{24,7,4,2},
{24,7,6,1},
{24,7,8,2},
{24,7,10,1},
{24,7,12,1},
{24,7,14,2},
{24,7,16,2},
{24,7,19,2},
{24,7,21,1},
{24,7,22,2},
{24,7,24,2},
{24,7,27,2},
{24,7,31,2},
{24,7,35,2},
{24,7,39,2},
{24,7,43,2},
{24,7,48,3},
{24,7,50,4},
{24,7,52,5},
{24,7,54,7},
{24,7,56,8},
{24,7,59,9},
{24,8,0,8},
{24,8,4,5},
{24,8,5,4},
{24,8,7,5},
{24,8,9,5},
{24,8,13,6},
{24,8,14,7},
{24,8,17,8},
{24,8,19,7},
{24,8,21,6},
{24,8,23,7},
{24,8,24,6},
{24,8,26,7},
{24,8,29,8},
{24,8,33,9},
{24,8,37,10},
{24,8,40,11},
{24,8,42,12},
{24,8,46,12},
{24,8,47,13},
{24,8,48,14},
{24,8,51,14},
{24,8,54,14},
{24,8,56,13},
{24,8,59,13},
{24,9,2,14},
{24,9,3,15},
{24,9,4,16},
{24,9,6,17},
{24,9,7,18},
{24,9,9,19},
{24,9,11,20},
{24,9,12,21},
{24,9,14,22},
{24,9,16,23},
{24,9,18,25},
{24,9,20,27},
{24,9,23,31},
{24,9,24,33},
{24,9,27,34},
{24,9,29,36},
{24,9,31,37},
{24,9,32,38},
{24,9,34,40},
{24,9,36,41},
{24,9,38,42},
{24,9,40,44},
{24,9,42,46},
{24,9,44,49},
{24,9,46,52},
{24,9,48,56},
{24,9,50,59},
{24,9,52,63},
{24,9,54,66},
{24,9,56,68},
{24,9,58,70},
{24,10,0,72},
{24,10,2,71},
{24,10,4,69},
{24,10,6,71},
{24,10,8,71},
{24,10,10,72},
{24,10,12,73},
{24,10,14,74},
{24,10,16,74},
{24,10,19,73},
{24,10,20,70},
{24,10,21,68},
{24,10,22,67},
{24,10,24,68},
{24,10,25,69},
{24,10,28,67},
{24,10,30,63},
{24,10,32,67},
{24,10,34,69},
{24,10,36,69},
{24,10,38,70},
{24,10,40,75},
{24,10,42,75},
{24,10,46,78},
{24,10,48,76},
{24,10,50,73},
{24,10,53,73},
{24,10,56,74},
{24,10,58,74},
{24,11,0,76},
{24,11,2,75},
{24,11,5,76},
{24,11,7,75},
{24,11,8,73},
{24,11,10,71},
{24,11,13,72},
{24,11,14,74},
{24,11,18,77},
{24,11,22,76},
{24,11,23,77},
{24,11,26,81},
{24,11,27,82},
{24,11,28,79},
{24,11,30,76},
{24,11,32,77},
{24,11,34,75},
{24,11,36,76},
{24,11,39,79},
{24,11,40,80},
{24,11,42,78},
{24,11,44,78},
{24,11,47,75},
{24,11,49,72},
{24,11,50,76},
{24,11,52,76},
{24,11,54,74},
{24,11,56,73},
{24,11,58,74},
{24,12,0,73},
{24,12,3,72},
{24,12,4,71},
{24,12,6,69},
{24,12,10,67},
{24,12,12,67},
{24,12,14,66},
{24,12,16,66},
{24,12,18,67},
{24,12,20,66},
{24,12,22,67},
{24,12,24,67},
{24,12,26,66},
{24,12,28,66},
{24,12,31,65},
{24,12,33,66},
{24,12,35,65},
{24,12,37,64},
{24,12,38,63},
{24,12,40,61},
{24,12,42,60},
{24,12,44,60},
{24,12,46,61},
{24,12,48,63},
{24,12,50,68},
{24,12,52,67},
{24,12,53,63},
{24,12,56,58},
{24,12,57,58},
{24,13,1,63},
{24,13,5,65},
{24,13,9,66},
{24,13,13,63},
{24,13,17,65},
{24,13,18,66},
{24,13,20,67},
{24,13,22,67},
{24,13,25,64},
{24,13,26,63},
{24,13,30,64},
{24,13,33,64},
{24,13,34,63},
{24,13,37,61},
{24,13,40,59},
{24,13,41,59},
{24,13,42,58},
{24,13,45,59},
{24,13,49,57},
{24,13,53,56},
{24,13,57,41},
{24,13,58,35},
{24,14,0,26},
{24,14,1,26},
{24,14,5,38},
{24,14,6,36},
{24,14,9,32},
{24,14,13,29},
{24,14,14,31},
{24,14,16,26},
{24,14,18,27},
{24,14,21,21},
{24,14,24,18},
{24,14,25,20},
{24,14,26,23},
{24,14,29,21},
{24,14,33,22},
{24,14,36,20},
{24,14,37,20},
{24,14,38,19},
{24,14,40,18},
{24,14,42,22},
{24,14,45,20},
{24,14,46,22},
{24,14,48,26},
{24,14,50,25},
{24,14,53,22},
{24,14,54,20},
{24,14,57,19},
{24,14,58,20},
{24,15,1,22},
{24,15,5,16},
{24,15,6,14},
{24,15,9,13},
{24,15,12,11},
{24,15,13,11},
{24,15,14,10},
{24,15,16,9},
{24,15,18,9},
{24,15,21,10},
{24,15,24,9},
{24,15,25,9},
{24,15,28,8},
{24,15,29,8},
{24,15,32,7},
{24,15,33,7},
{24,15,37,7},
{24,15,40,6},
{24,15,41,6},
{24,15,44,5},
{24,15,45,5},
{24,15,48,4},
{24,15,49,4},
{24,15,53,4},
{24,15,57,3},
{24,16,1,3},
{24,16,4,3},
{24,16,8,2},
{24,16,11,2},
{24,16,15,2},
{24,16,19,2},
{24,16,23,2},
{24,16,26,2},
{24,16,30,2},
{24,16,34,2},
{24,16,37,2},
{24,16,41,2},
{24,16,45,2},
{24,16,49,2},
{24,16,52,2},
{24,16,56,2},
{24,16,59,2},
{24,17,3,2},
{24,17,7,2},
{24,17,10,2},
{24,17,14,2},
{24,17,18,2},
{24,17,21,2},
{24,17,24,14},
{24,17,25,2},
{24,17,28,18},
{24,17,29,15},
{24,17,32,22},
{24,17,33,17},
{24,17,34,15},
{24,17,37,13},
{24,17,38,22},
{24,17,40,21},
{24,17,42,22},
{24,17,44,16},
{24,17,46,12},
{24,17,49,20},
{24,17,50,12},
{24,17,52,14},
{24,17,54,52},
{24,17,56,51},
{24,17,58,2},
{24,18,1,2},
{24,18,5,23},
{24,18,8,23},
{24,18,10,17},
{24,18,12,14},
{24,18,14,16},
{24,18,16,17},
{24,18,18,18},
{24,18,20,15},
{24,18,22,18},
{24,18,24,22},
{24,18,26,19},
{24,18,28,20},
{24,18,30,20},
{24,18,32,22},
{24,18,34,16},
{24,18,36,21},
{24,18,38,12},
{24,18,40,17},
{24,18,42,12},
{24,18,44,22},
{24,18,48,13},
{24,18,51,2},
{24,18,55,14},
{24,18,58,24},
{24,18,59,14},
{24,19,2,18},
{24,19,3,14},
{24,19,4,16},
{24,19,6,15},
{24,19,7,16},
{24,19,8,13},
{24,19,11,13},
{24,19,12,22},
{24,19,14,14},
{24,19,16,22},
{24,19,18,17},
{24,19,20,15},
{24,19,22,22},
{24,19,24,22},
{24,19,26,14},
{24,19,28,22},
{24,19,31,16},
{24,19,32,17},
{24,19,34,17},
{24,19,36,16},
{24,19,38,18},
{24,19,40,17},
{24,19,42,16},
{24,19,44,13},
{24,19,46,20},
{24,19,48,22},
{24,19,51,15},
{24,19,54,20},
{24,19,55,22},
{24,19,58,22},
{24,19,59,14},
{24,20,0,21},
{24,20,2,22},
{24,20,4,22},
{24,20,6,22},
{24,20,8,14},
{24,20,10,22},
{24,20,12,14},
{24,20,14,13},
{24,20,16,22},
{24,20,18,22},
{24,20,20,14},
{24,20,22,13},
{24,20,24,17},
{24,20,26,22},
{24,20,28,14},
{24,20,30,20},
{24,20,32,17},
{24,20,34,22},
{24,20,36,20},
{24,20,38,20},
{24,20,40,18},
{24,20,43,16},
{24,20,44,13},
{24,20,46,2},
{24,20,48,2},
{24,20,51,2},
{24,20,55,2},
{24,20,58,13},
{24,20,59,19},
{24,21,0,48},
{24,21,2,44},
{24,21,3,44},
{24,21,4,51},
{24,21,6,45},
{24,21,8,49},
{24,21,11,50},
{24,21,12,51},
{24,21,15,43},
{24,21,16,52},
{24,21,18,42},
{24,21,20,42},
{24,21,23,49},
{24,21,24,43},
{24,21,26,50},
{24,21,28,46},
{24,21,30,50},
{24,21,32,51},
{24,21,35,42},
{24,21,36,46},
{24,21,38,51},
{24,21,40,47},
{24,21,42,51},
{24,21,44,49},
{24,21,47,49},
{24,21,48,43},
{24,21,50,42},
{24,21,52,45},
{24,21,54,51},
{24,21,56,51},
{24,21,59,43},
{24,22,0,51},
{24,22,2,21},
{24,22,4,12},
{24,22,6,2},
{24,22,8,2},
{24,22,11,14},
{24,22,12,22},
{24,22,14,17},
{24,22,16,13},
{24,22,18,17},
{24,22,20,18},
{24,22,24,53},
{24,22,26,50},
{24,22,28,43},
{24,22,30,45},
{24,22,32,45},
{24,22,34,22},
{24,22,36,12},
{24,22,39,22},
{24,22,40,20},
{24,22,42,14},
{24,22,44,22},
{24,22,47,15},
{24,22,48,22},
{24,22,50,15},
{24,22,52,19},
{24,22,54,16},
{24,22,56,13},
{24,22,58,20},
{24,23,0,16},
{24,23,4,16},
{24,23,6,16},
{24,23,8,14},
{24,23,10,14},
{24,23,12,13},
{24,23,15,14},
{24,23,18,14},
{24,23,19,2},
{24,23,23,2},
{24,23,27,2},
{24,23,30,2},
{24,23,34,2},
{24,23,37,3},
{24,23,40,3},
{24,23,41,3},
{24,23,45,3},
{24,23,46,2},
{24,23,49,2},
{24,23,53,2},
{24,23,57,2},
{25,0,0,2},
{25,0,4,2},
{25,0,7,2},
{25,0,11,2},
{25,0,15,2},
{25,0,18,2},
{25,0,22,2},
{25,0,26,2},
{25,0,29,2},
{25,0,33,2},
{25,0,37,2},
{25,0,40,2},
{25,0,44,2},
{25,0,48,2},
{25,0,51,2},
{25,0,55,2},
{25,0,59,2},
{25,1,3,2},
{25,1,6,2},
{25,1,8,2},
{25,1,10,2},
{25,1,14,2},
{25,1,17,2},
{25,1,21,2},
{25,1,25,2},
{25,1,28,2},
{25,1,32,2},
{25,1,36,2},
{25,1,39,2},
{25,1,43,2},
{25,1,47,2},
{25,1,50,2},
{25,1,54,2},
{25,1,58,2},
{25,2,2,2},
{25,2,6,2},
{25,2,9,2},
{25,2,13,2},
{25,2,17,2},
{25,2,20,2},
{25,2,24,2},
{25,2,28,2},
{25,2,30,2},
{25,2,32,2},
{25,2,35,2},
{25,2,39,2},
{25,2,43,2},
{25,2,46,2},
{25,2,50,2},
{25,2,54,2},
{25,2,57,2},
{25,3,1,2},
{25,3,5,2},
{25,3,9,2},
{25,3,12,2},
{25,3,16,2},
{25,3,20,2},
{25,3,23,2},
{25,3,27,2},
{25,3,31,2},
{25,3,34,2},
{25,3,38,2},
{25,3,42,2},
{25,3,45,2},
{25,3,49,2},
{25,3,53,2},
{25,3,57,2},
{25,4,0,2},
{25,4,4,2},
{25,4,7,2},
{25,4,11,2},
{25,4,15,2},
{25,4,18,2},
{25,4,22,2},
{25,4,26,2},
{25,4,29,2},
{25,4,33,2},
{25,4,37,2},
{25,4,40,2},
{25,4,44,2},
{25,4,48,2},
{25,4,51,2},
{25,4,55,2},
{25,4,59,2},
{25,5,3,2},
{25,5,6,2},
{25,5,10,2},
{25,5,14,2},
{25,5,17,2},
{25,5,21,2},
{25,5,25,2},
{25,5,28,2},
{25,5,32,2},
{25,5,36,2},
{25,5,39,2},
{25,5,43,2},
{25,5,47,2},
{25,5,50,2},
{25,5,54,2},
{25,5,58,2},
{25,6,2,2},
{25,6,6,2},
{25,6,9,2},
{25,6,13,2},
{25,6,17,2},
{25,6,20,2},
{25,6,24,2},
{25,6,28,2},
{25,6,31,2},
{25,6,35,2},
{25,6,39,2},
{25,6,42,2},
{25,6,46,2},
{25,6,50,2},
{25,6,53,2},
{25,6,57,2},
{25,7,0,2},
{25,7,4,2},
{25,7,8,2},
{25,7,11,2},
{25,7,15,2},
{25,7,19,2},
{25,7,22,2},
{25,7,26,2},
{25,7,30,2},
{25,7,33,2},
{25,7,37,2},
{25,7,41,2},
{25,7,44,2},
{25,7,48,2},
{25,7,52,3},
{25,7,55,3},
{25,8,0,3},
{25,8,3,4},
{25,8,7,4},
{25,8,11,6},
{25,8,15,7},
{25,8,16,8},
{25,8,19,8},
{25,8,23,8},
{25,8,27,9},
{25,8,31,10},
{25,8,33,11},
{25,8,36,10},
{25,8,39,11},
{25,8,40,12},
{25,8,41,13},
{25,8,42,12},
{25,8,45,12},
{25,8,46,13},
{25,8,49,12},
{25,8,51,12},
{25,8,54,10},
{25,8,55,10},
{25,8,57,11},
{25,8,59,13},
{25,9,0,16},
{25,9,1,17},
{25,9,4,13},
{25,9,5,12},
{25,9,6,13},
{25,9,9,18},
{25,9,10,21},
{25,9,14,22},
{25,9,15,24},
{25,9,16,22},
{25,9,19,22},
{25,9,21,24},
{25,9,24,25},
{25,9,25,32},
{25,9,26,33},
{25,9,29,29},
{25,9,31,24},
{25,9,34,19},
{25,9,35,23},
{25,9,39,25},
{25,9,40,27},
{25,9,41,25},
{25,9,42,22},
{25,9,44,21},
{25,9,48,25},
{25,9,49,26},
{25,9,50,25},
{25,9,52,21},
{25,9,54,20},
{25,9,57,22},
{25,9,58,24},
{25,9,59,26},
{25,10,2,26},
{25,10,3,29},
{25,10,4,28},
{25,10,6,31},
{25,10,8,28},
{25,10,11,25},
{25,10,13,29},
{25,10,15,26},
{25,10,16,28},
{25,10,17,30},
{25,10,18,33},
{25,10,20,37},
{25,10,21,38},
{25,10,22,39},
{25,10,25,37},
{25,10,26,36},
{25,10,29,33},
{25,10,33,38},
{25,10,35,42},
{25,10,36,41},
{25,10,38,52},
{25,10,41,54},
{25,10,45,67},
{25,10,46,62},
{25,10,48,78},
{25,10,50,74},
{25,10,53,59},
{25,10,54,67},
{25,10,56,64},
{25,10,58,57},
{25,11,1,51},
{25,11,3,58},
{25,11,5,51},
{25,11,7,45},
{25,11,8,43},
{25,11,10,56},
{25,11,12,63},
{25,11,14,50},
{25,11,17,59},
{25,11,19,60},
{25,11,20,58},
{25,11,22,67},
{25,11,24,51},
{25,11,26,60},
{25,11,28,48},
{25,11,30,47},
{25,11,32,50},
{25,11,34,80},
{25,11,37,79},
{25,11,39,89},
{25,11,40,58},
{25,11,42,65},
{25,11,45,80},
{25,11,47,84},
{25,11,49,82},
{25,11,50,70},
{25,11,52,50},
{25,11,54,57},
{25,11,56,69},
{25,11,58,76},
{25,12,1,71},
{25,12,2,65},
{25,12,4,49},
{25,12,6,44},
{25,12,8,41},
{25,12,10,55},
{25,12,12,82},
{25,12,14,63},
{25,12,16,52},
{25,12,18,61},
{25,12,20,50},
{25,12,22,54},
{25,12,24,44},
{25,12,26,42},
{25,12,29,65},
{25,12,31,57},
{25,12,32,55},
{25,12,34,42},
{25,12,37,36},
{25,12,39,49},
{25,12,40,50},
{25,12,42,36},
{25,12,44,41},
{25,12,46,47},
{25,12,48,50},
{25,12,50,72},
{25,12,52,71},
{25,12,54,68},
{25,12,56,54},
{25,12,58,73},
{25,13,0,70},
{25,13,2,64},
{25,13,4,53},
{25,13,6,60},
{25,13,9,77},
{25,13,12,83},
{25,13,14,66},
{25,13,16,55},
{25,13,18,72},
{25,13,20,80},
{25,13,22,63},
{25,13,24,73},
{25,13,26,74},
{25,13,28,64},
{25,13,30,46},
{25,13,32,50},
{25,13,34,51},
{25,13,36,60},
{25,13,38,60},
{25,13,41,53},
{25,13,42,55},
{25,13,43,54},
{25,13,44,53},
{25,13,46,54},
{25,13,47,58},
{25,13,49,45},
{25,13,51,46},
{25,13,53,43},
{25,13,54,45},
{25,13,56,44},
{25,13,58,48},
{25,14,0,45},
{25,14,3,40},
{25,14,4,37},
{25,14,6,33},
{25,14,8,34},
{25,14,11,29},
{25,14,12,31},
{25,14,13,28},
{25,14,16,23},
{25,14,17,23},
{25,14,18,24},
{25,14,19,26},
{25,14,20,24},
{25,14,22,21},
{25,14,25,17},
{25,14,26,16},
{25,14,27,15},
{25,14,28,16},
{25,14,30,18},
{25,14,31,21},
{25,14,32,20},
{25,14,33,18},
{25,14,34,19},
{25,14,36,18},
{25,14,38,19},
{25,14,40,20},
{25,14,42,21},
{25,14,44,21},
{25,14,48,22},
{25,14,50,19},
{25,14,52,21},
{25,14,54,20},
{25,14,56,19},
{25,14,58,18},
{25,15,0,13},
{25,15,3,11},
{25,15,4,12},
{25,15,7,11},
{25,15,8,13},
{25,15,10,14},
{25,15,12,13},
{25,15,14,13},
{25,15,16,9},
{25,15,18,9},
{25,15,20,7},
{25,15,23,7},
{25,15,28,9},
{25,15,30,11},
{25,15,32,11},
{25,15,34,10},
{25,15,36,9},
{25,15,38,8},
{25,15,40,8},
{25,15,42,10},
{25,15,44,9},
{25,15,46,10},
{25,15,48,9},
{25,15,50,8},
{25,15,52,8},
{25,15,55,7},
{25,15,58,6},
{25,16,0,6},
{25,16,4,5},
{25,16,6,4},
{25,16,8,4},
{25,16,11,3},
{25,16,15,3},
{25,16,18,35},
{25,16,20,34},
{25,16,24,33},
{25,16,28,33},
{25,16,32,33},
{25,16,35,33},
{25,16,39,33},
{25,16,43,33},
{25,16,47,33},
{25,16,51,33},
{25,16,55,33},
{25,17,0,33},
{25,17,3,32},
{25,17,5,33},
{25,17,7,32},
{25,17,8,33},
{25,17,11,33},
{25,17,15,33},
{25,17,19,33},
{25,17,23,33},
{25,17,27,33},
{25,17,31,33},
{25,17,35,33},
{25,17,39,33},
{25,17,43,33},
{25,17,47,33},
{25,17,51,33},
{25,17,55,33},
{25,17,59,33},
{25,18,3,33},
{25,18,5,32},
{25,18,6,33},
{25,18,8,33},
{25,18,11,33},
{25,18,15,33},
{25,18,19,33},
{25,18,23,33},
{25,18,27,33},
{25,18,31,33},
{25,18,35,33},
{25,18,39,33},
{25,18,43,33},
{25,18,48,33},
{25,18,52,33},
{25,18,56,33},
{25,19,0,33},
{25,19,4,33},
{25,19,8,33},
{25,19,12,33},
{25,19,16,33},
{25,19,20,33},
{25,19,24,33},
{25,19,28,32},
{25,19,29,2},
{25,19,32,2},
{25,19,36,2},
{25,19,40,2},
{25,19,44,24},
{25,19,46,24},
{25,19,48,19},
{25,19,50,15},
{25,19,52,14},
{25,19,54,24},
{25,19,56,21},
{25,19,58,15},
{25,20,0,15},
{25,20,2,23},
{25,20,4,21},
{25,20,6,14},
{25,20,8,21},
{25,20,10,18},
{25,20,12,13},
{25,20,14,19},
{25,20,16,14},
{25,20,18,17},
{25,20,20,20},
{25,20,23,12},
{25,20,25,13},
{25,20,26,22},
{25,20,28,14},
{25,20,30,12},
{25,20,32,20},
{25,20,34,20},
{25,20,36,18},
{25,20,38,19},
{25,20,40,19},
{25,20,42,18},
{25,20,44,2},
{25,20,48,2},
{25,20,51,2},
{25,20,55,2},
{25,20,59,2},
{25,21,3,2},
{25,21,7,2},
{25,21,11,2},
{25,21,15,2},
{25,21,19,14},
{25,21,21,2},
{25,21,23,2},
{25,21,27,2},
{25,21,31,2},
{25,21,35,2},
{25,21,39,2},
{25,21,43,2},
{25,21,47,2},
{25,21,51,2},
{25,21,55,2},
{25,21,59,2},
{25,22,3,2},
{25,22,7,2},
{25,22,11,2},
{25,22,15,2},
{25,22,19,2},
{25,22,23,2},
{25,22,28,2},
{25,22,31,21},
{25,22,32,2},
{25,22,34,22},
{25,22,36,13},
{25,22,38,15},
{25,22,40,17},
{25,22,42,13},
{25,22,44,18},
{25,22,46,20},
{25,22,48,19},
{25,22,50,20},
{25,22,52,14},
{25,22,55,17},
{25,22,57,18},
{25,22,59,20},
{25,23,1,18},
{25,23,2,19},
{25,23,4,16},
{25,23,8,20},
{25,23,10,2},
{25,23,12,2},
{25,23,16,2},
{25,23,20,2},
{25,23,24,2},
{25,23,28,2},
{25,23,32,2},
{25,23,36,2},
{25,23,40,3},
{25,23,44,3},
{25,23,48,3},
{25,23,50,2},
{25,23,52,2},
{25,23,56,2},
{26,0,0,2},
{26,0,4,2},
{26,0,8,2},
{26,0,12,2},
{26,0,16,2},
{26,0,20,2},
{26,0,24,2},
{26,0,28,2},
{26,0,32,2},
{26,0,36,2},
{26,0,40,2},
{26,0,44,2},
{26,0,48,2},
{26,0,52,2},
{26,0,56,2},
{26,1,0,2},
{26,1,4,2},
{26,1,8,2},
{26,1,12,2},
{26,1,16,2},
{26,1,20,2},
{26,1,24,2},
{26,1,28,2},
{26,1,32,2},
{26,1,36,2},
{26,1,40,2},
{26,1,44,2},
{26,1,48,2},
{26,1,52,2},
{26,1,57,2},
{26,2,1,2},
{26,2,6,2},
{26,2,10,2},
{26,2,14,2},
{26,2,18,2},
{26,2,22,2},
{26,2,26,2},
{26,2,30,2},
{26,2,34,2},
{26,2,38,2},
{26,2,42,2},
{26,2,46,2},
{26,2,50,2},
{26,2,54,2},
{26,2,58,2},
{26,3,2,2},
{26,3,7,2},
{26,3,10,2},
{26,3,14,2},
{26,3,18,2},
{26,3,22,2},
{26,3,26,2},
{26,3,30,2},
{26,3,34,2},
{26,3,38,2},
{26,3,42,2},
{26,3,46,2},
{26,3,50,2},
{26,3,54,2},
{26,3,58,2},
{26,4,2,2},
{26,4,7,2},
{26,4,10,2},
{26,4,14,2},
{26,4,18,2},
{26,4,22,2},
{26,4,26,2},
{26,4,30,2},
{26,4,34,2},
{26,4,38,2},
{26,4,42,2},
{26,4,46,2},
{26,4,50,2},
{26,4,54,2},
{26,4,58,2},
{26,5,2,2},
{26,5,7,2},
{26,5,10,2},
{26,5,14,2},
{26,5,18,2},
{26,5,22,2},
{26,5,26,2},
{26,5,30,2},
{26,5,34,2},
{26,5,38,2},
{26,5,42,2},
{26,5,46,2},
{26,5,50,2},
{26,5,54,2},
{26,5,58,2},
{26,6,2,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Let us lie in please!
{26,6,7,2},
{26,6,10,2},
{26,6,14,2},
{26,6,18,2},
{26,6,22,2},
{26,6,26,2},
{26,6,30,2},
{26,6,34,2},
{26,6,38,2},
{26,6,42,2},
{26,6,46,2},
{26,6,50,2},
{26,6,54,2},
{26,6,58,2},
{26,7,2,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Let us lie in please!
{26,7,6,1},
{26,7,7,2},
{26,7,11,2},
{26,7,15,2},
{26,7,19,2},
{26,7,23,2},
{26,7,27,2},
{26,7,31,2},
{26,7,35,2},
{26,7,39,2},
{26,7,43,2},
{26,7,48,2},
{26,7,52,3},
{26,7,56,3},
{26,8,0,3},
{26,8,4,3},
{26,8,6,4},
{26,8,8,4},
{26,8,12,4},
{26,8,16,5},
{26,8,20,6},
{26,8,24,13},
{26,8,26,12},
{26,8,28,12},
{26,8,31,13},
{26,8,35,15},
{26,8,40,19},
{26,8,41,21},
{26,8,42,23},
{26,8,45,24},
{26,8,49,30},
{26,8,53,41},
{26,8,57,67},
{26,8,59,97},
{26,9,1,106},
{26,9,3,96},
{26,9,5,94},
{26,9,6,100},
{26,9,7,107},
{26,9,10,98},
{26,9,14,104},
{26,9,15,115},
{26,9,19,121},
{26,9,20,107},
{26,9,21,101},
{26,9,24,119},
{26,9,25,126},
{26,9,29,88},
{26,9,30,91},
{26,9,31,95},
{26,9,34,100},
{26,9,35,116},
{26,9,39,146},
{26,9,40,105},
{26,9,41,99},
{26,9,42,86},
{26,9,44,95},
{26,9,45,97},
{26,9,46,90},
{26,9,49,89},
{26,9,53,93},
{26,9,54,96},
{26,9,57,92},
{26,9,58,87},
{26,10,2,76},
{26,10,3,71},
{26,10,4,66},
{26,10,7,61},
{26,10,8,65},
{26,10,11,67},
{26,10,12,70},
{26,10,13,69},
{26,10,14,64},
{26,10,16,73},
{26,10,17,79},
{26,10,18,83},
{26,10,20,87},
{26,10,22,78},
{26,10,25,64},
{26,10,26,56},
{26,10,27,61},
{26,10,28,64},
{26,10,30,68},
{26,10,31,57},
{26,10,32,59},
{26,10,34,73},
{26,10,36,79},
{26,10,39,67},
{26,10,40,61},
{26,10,42,70},
{26,10,44,75},
{26,10,47,78},
{26,10,48,79},
{26,10,50,85},
{26,10,52,69},
{26,10,55,85},
{26,10,56,90},
{26,10,59,89},
{26,11,0,86},
{26,11,2,91},
{26,11,4,96},
{26,11,7,120},
{26,11,8,124},
{26,11,11,133},
{26,11,12,131},
{26,11,14,116},
{26,11,16,109},
{26,11,19,100},
{26,11,20,101},
{26,11,22,97},
{26,11,24,102},
{26,11,27,103},
{26,11,28,105},
{26,11,31,99},
{26,11,32,101},
{26,11,35,83},
{26,11,39,86},
{26,11,40,83},
{26,11,42,85},
{26,11,44,90},
{26,11,47,80},
{26,11,48,83},
{26,11,50,85},
{26,11,52,85},
{26,11,55,78},
{26,11,56,80},
{26,11,58,82},
{26,12,0,84},
{26,12,2,82},
{26,12,4,82},
{26,12,7,82},
{26,12,8,79},
{26,12,10,78},
{26,12,12,79},
{26,12,14,76},
{26,12,16,72},
{26,12,19,63},
{26,12,20,60},
{26,12,22,62},
{26,12,24,66},
{26,12,28,62},
{26,12,31,59},
{26,12,33,58},
{26,12,35,59},
{26,12,36,58},
{26,12,37,59},
{26,12,40,56},
{26,12,41,59},
{26,12,44,56},
{26,12,48,57},
{26,12,49,56},
{26,12,52,55},
{26,12,54,55},
{26,12,57,54},
{26,12,58,52},
{26,13,0,50},
{26,13,2,47},
{26,13,5,46},
{26,13,8,45},
{26,13,10,44},
{26,13,13,44},
{26,13,16,40},
{26,13,18,40},
{26,13,20,39},
{26,13,22,38},
{26,13,25,39},
{26,13,26,38},
{26,13,29,38},
{26,13,30,37},
{26,13,33,37},
{26,13,34,36},
{26,13,37,36},
{26,13,39,37},
{26,13,41,37},
{26,13,42,35},
{26,13,44,34},
{26,13,47,35},
{26,13,48,34},
{26,13,50,33},
{26,13,51,33},
{26,13,53,32},
{26,13,55,31},
{26,13,59,33},
{26,14,0,31},
{26,14,2,34},
{26,14,4,34},
{26,14,6,35},
{26,14,8,35},
{26,14,10,33},
{26,14,12,36},
{26,14,14,35},
{26,14,16,32},
{26,14,18,35},
{26,14,20,38},
{26,14,22,35},
{26,14,24,37},
{26,14,26,38},
{26,14,28,37},
{26,14,30,34},
{26,14,32,34},
{26,14,34,35},
{26,14,36,35},
{26,14,38,33},
{26,14,40,32},
{26,14,42,33},
{26,14,44,32},
{26,14,47,30},
{26,14,48,29},
{26,14,51,29},
{26,14,52,27},
{26,14,54,24},
{26,14,56,22},
{26,14,59,20},
{26,15,0,19},
{26,15,2,18},
{26,15,5,17},
{26,15,8,16},
{26,15,12,16},
{26,15,14,15},
{26,15,16,14},
{26,15,17,14},
{26,15,21,14},
{26,15,22,13},
{26,15,25,13},
{26,15,26,12},
{26,15,29,11},
{26,15,33,11},
{26,15,35,10},
{26,15,37,10},
{26,15,38,9},
{26,15,41,8},
{26,15,45,8},
{26,15,48,7},
{26,15,50,7},
{26,15,52,6},
{26,15,54,6},
{26,15,56,5},
{26,15,58,5},
{26,16,2,5},
{26,16,4,4},
{26,16,6,4},
{26,16,10,3},
{26,16,14,3},
{26,16,18,30},
{26,16,22,33},
{26,16,24,32},
{26,16,26,32},
{26,16,30,32},
{26,16,34,32},
{26,16,39,32},
{26,16,43,32},
{26,16,47,32},
{26,16,51,33},
{26,16,55,2},
{26,16,59,2},
{26,17,3,2},
{26,17,7,2},
{26,17,11,2},
{26,17,15,2},
{26,17,23,2},
{26,17,27,2},
{26,17,31,2},
{26,17,35,2},
{26,17,39,2},
{26,17,44,2},
{26,17,48,2},
{26,17,53,2},
{26,17,56,2},
{26,18,0,2},
{26,18,5,2},
{26,18,8,2},
{26,18,12,2},
{26,18,17,2},
{26,18,20,2},
{26,18,24,2},
{26,18,28,2},
{26,18,33,2},
{26,18,36,2},
{26,18,40,2},
{26,18,44,2},
{26,18,49,2},
{26,18,52,2},
{26,18,56,2},
{26,19,0,2},
{26,19,4,2},
{26,19,8,2},
{26,19,12,2},
{26,19,17,2},
{26,19,20,2},
{26,19,24,2},
{26,19,28,2},
{26,19,32,2},
{26,19,36,2},
{26,19,40,2},
{26,19,44,2},
{26,19,48,2},
{26,19,52,2},
{26,19,56,2},
{26,20,0,2},
{26,20,4,2},
{26,20,8,2},
{26,20,12,2},
{26,20,16,2},
{26,20,20,2},
{26,20,24,2},
{26,20,32,2},
{26,20,36,2},
{26,20,40,2},
{26,20,44,2},
{26,20,48,2},
{26,20,52,2},
{26,20,56,2},
{26,21,0,2},
{26,21,4,2},
{26,21,8,2},
{26,21,12,2},
{26,21,15,2},
{26,21,20,2},
{26,21,24,2},
{26,21,27,2},
{26,21,31,2},
{26,21,35,2},
{26,21,39,2},
{26,21,43,2},
{26,21,47,19},
{26,21,51,24},
{26,21,52,23},
{26,21,53,20},
{26,21,56,16},
{26,21,57,14},
{26,21,58,22},
{26,22,1,20},
{26,22,3,17},
{26,22,5,23},
{26,22,6,15},
{26,22,7,14},
{26,22,10,23},
{26,22,11,22},
{26,22,15,22},
{26,22,17,20},
{26,22,20,2},
{26,22,21,2},
{26,22,25,2},
{26,22,26,34},
{26,22,30,34},
{26,22,34,33},
{26,22,35,33},
{26,22,39,33},
{26,22,43,33},
{26,22,47,33},
{26,22,51,33},
{26,22,55,33},
{26,22,59,33},
{26,23,0,3},
{26,23,4,4},
{26,23,6,3},
{26,23,9,3},
{26,23,12,3},
{26,23,16,2},
{26,23,20,2},
{26,23,28,2},
{26,23,33,2},
{26,23,37,2},
{26,23,41,2},
{26,23,46,2},
{26,23,50,2},
{26,23,54,2},
{26,23,58,2},
{27,0,2,2},
{27,0,6,2},
{27,0,11,2},
{27,0,14,2},
{27,0,18,2},
{27,0,22,2},
{27,0,26,2},
{27,0,30,2},
{27,0,35,2},
{27,0,38,2},
{27,0,42,2},
{27,0,46,2},
{27,0,50,2},
{27,0,54,2},
{27,0,58,2},
{27,1,3,2},
{27,1,7,2},
{27,1,11,2},
{27,1,15,2},
{27,1,19,2},
{27,1,23,2},
{27,1,27,2},
{27,1,31,2},
{27,1,35,2},
{27,1,39,2},
{27,1,43,2},
{27,1,47,2},
{27,1,51,2},
{27,1,55,2},
{27,1,59,2},
{27,2,3,2},
{27,2,7,2},
{27,2,11,2},
{27,2,15,2},
{27,2,19,2},
{27,2,23,2},
{27,2,27,1},
{27,2,28,2},
{27,2,30,1},
{27,2,32,2},
{27,2,34,1},
{27,2,36,1},
{27,2,39,1},
{27,2,41,2},
{27,2,42,1},
{27,2,44,1},
{27,2,47,2},
{27,2,48,1},
{27,2,51,1},
{27,2,55,1},
{27,2,59,1},
{27,3,3,1},
{27,3,8,1},
{27,3,12,1},
{27,3,16,1},
{27,3,20,1},
{27,3,24,1},
{27,3,28,1},
{27,3,31,1},
{27,3,36,1},
{27,3,40,1},
{27,3,44,1},
{27,3,48,1},
{27,3,52,1},
{27,3,56,1},
{27,4,0,1},
{27,4,4,1},
{27,4,5,2},
{27,4,6,1},
{27,4,8,1},
{27,4,12,1},
{27,4,16,2},
{27,4,17,1},
{27,4,21,1},
{27,4,24,1},
{27,4,26,2},
{27,4,28,1},
{27,4,29,1},
{27,4,31,2},
{27,4,33,1},
{27,4,34,2},
{27,4,36,1},
{27,4,38,2},
{27,4,41,1},
{27,4,42,2},
{27,4,44,2},
{27,4,46,1},
{27,4,50,2},
{27,4,52,1},
{27,4,54,2},
{27,4,57,1},
{27,4,59,2},
{27,5,0,1},
{27,5,2,1},
{27,5,4,2},
{27,5,6,2},
{27,5,6,1},
{27,5,10,1},
{27,5,12,2},
{27,5,14,2},
{27,5,15,1},
{27,5,18,1},
{27,5,21,2},
{27,5,23,1},
{27,5,25,2},
{27,5,26,1},
{27,5,28,1},
{27,5,30,2},
{27,5,32,2},
{27,5,34,2},
{27,5,37,1},
{27,5,39,2},
{27,5,42,2},
{27,5,44,1},
{27,5,45,2},
{27,5,48,1},
{27,5,50,2},
{27,5,53,2},
{27,5,54,1},
{27,5,57,2},
{27,5,58,1},
{27,6,0,2},
{27,6,2,2},
{27,6,4,1},
{27,6,6,2},
{27,6,8,2},
{27,6,10,2},
{27,6,13,1},
{27,6,13,2},
{27,6,17,2},
{27,6,18,1},
{27,6,20,2},
{27,6,22,1},
{27,6,25,1},
{27,6,28,2},
{27,6,30,2},
{27,6,33,1},
{27,6,36,1},
{27,6,38,2},
{27,6,40,1},
{27,6,42,2},
{27,6,44,1},
{27,6,45,1},
{27,6,49,2},
{27,6,50,1},
{27,6,52,2},
{27,6,53,2},
{27,6,57,1},
{27,6,58,2},
{27,7,0,1},
{27,7,2,1},
{27,7,5,2},
{27,7,7,1},
{27,7,8,2},
{27,7,10,2},
{27,7,13,1},
{27,7,14,2},
{27,7,17,2},
{27,7,21,2},
{27,7,25,2},
{27,7,29,2},
{27,7,33,2},
{27,7,37,2},
{27,7,41,2},
{27,7,45,2},
{27,7,49,2},
{27,7,53,2},
{27,7,57,6},
{27,8,1,7},
{27,8,5,9},
{27,8,6,10},
{27,8,10,12},
{27,8,11,12},
{27,8,12,13},
{27,8,14,15},
{27,8,19,18},
{27,8,23,21},
{27,8,27,24},
{27,8,29,26},
{27,8,31,27},
{27,8,33,29},
{27,8,36,31},
{27,8,36,32},
{27,8,38,33},
{27,8,41,36},
{27,8,42,38},
{27,8,43,42},
{27,8,46,44},
{27,8,47,44},
{27,8,48,45},
{27,8,49,47},
{27,8,51,47},
{27,8,52,50},
{27,8,56,61},
{27,9,0,112},
{27,9,1,114},
{27,9,5,86},
{27,9,6,91},
{27,9,7,102},
{27,9,9,100},
{27,9,11,91},
{27,9,12,94},
{27,9,14,93},
{27,9,20,72},
{27,9,21,64},
{27,9,22,58},
{27,9,24,71},
{27,9,26,73},
{27,9,27,75},
{27,9,30,73},
{27,9,33,100},
{27,9,37,151},
{27,9,39,175},
{27,9,41,151},
{27,9,43,114},
{27,9,45,152},
{27,9,49,101},
{27,9,53,88},
{27,9,54,92},
{27,9,58,76},
{27,9,59,73},
{27,9,59,82},
{27,10,2,87},
{27,10,6,77},
{27,10,10,105},
{27,10,15,110},
{27,10,17,96},
{27,10,19,112},
{27,10,20,119},
{27,10,23,105},
{27,10,23,101},
{27,10,25,92},
{27,10,28,81},
{27,10,29,88},
{27,10,30,94},
{27,10,32,70},
{27,10,34,75},
{27,10,34,77},
{27,10,38,72},
{27,10,38,69},
{27,10,40,70},
{27,10,42,69},
{27,10,44,66},
{27,10,48,68},
{27,10,48,68},
{27,10,50,70},
{27,10,53,78},
{27,10,55,75},
{27,10,57,80},
{27,10,58,77},
{27,10,59,74},
{27,11,3,75},
{27,11,5,77},
{27,11,7,88},
{27,11,8,91},
{27,11,12,87},
{27,11,16,81},
{27,11,16,81},
{27,11,18,78},
{27,11,21,76},
{27,11,21,75},
{27,11,25,82},
{27,11,27,84},
{27,11,29,83},
{27,11,30,86},
{27,11,33,91},
{27,11,37,94},
{27,11,39,94},
{27,11,40,93},
{27,11,43,92},
{27,11,45,88},
{27,11,47,85},
{27,11,49,79},
{27,11,53,75},
{27,11,54,76},
{27,11,57,84},
{27,11,59,84},
{27,12,3,83},
{27,12,6,80},
{27,12,11,76},
{27,12,13,77},
{27,12,15,73},
{27,12,19,73},
{27,12,23,71},
{27,12,24,70},
{27,12,25,71},
{27,12,27,73},
{27,12,29,70},
{27,12,30,69},
{27,12,33,70},
{27,12,34,69},
{27,12,35,66},
{27,12,38,66},
{27,12,38,71},
{27,12,40,70},
{27,12,43,69},
{27,12,43,68},
{27,12,45,67},
{27,12,47,64},
{27,12,48,63},
{27,12,52,58},
{27,12,57,58},
{27,13,1,57},
{27,13,5,57},
{27,13,6,62},
{27,13,10,58},
{27,13,11,57},
{27,13,12,58},
{27,13,15,56},
{27,13,17,57},
{27,13,19,57},
{27,13,21,57},
{27,13,24,57},
{27,13,28,56},
{27,13,29,55},
{27,13,33,51},
{27,13,37,50},
{27,13,37,49},
{27,13,41,54},
{27,13,42,55},
{27,13,44,55},
{27,13,47,54},
{27,13,49,53},
{27,13,50,52},
{27,13,54,52},
{27,13,58,52},
{27,14,1,50},
{27,14,6,49},
{27,14,9,47},
{27,14,14,46},
{27,14,17,45},
{27,14,22,44},
{27,14,23,43},
{27,14,26,43},
{27,14,30,41},
{27,14,31,41},
{27,14,31,40},
{27,14,34,39},
{27,14,36,38},
{27,14,39,36},
{27,14,40,35},
{27,14,43,34},
{27,14,44,33},
{27,14,46,33},
{27,14,47,32},
{27,14,52,31},
{27,14,53,31},
{27,14,55,30},
{27,14,56,29},
{27,15,0,28},
{27,15,1,28},
{27,15,6,26},
{27,15,6,23},
{27,15,8,26},
{27,15,10,24},
{27,15,11,24},
{27,15,13,23},
{27,15,14,22},
{27,15,16,22},
{27,15,17,21},
{27,15,18,20},
{27,15,21,19},
{27,15,22,18},
{27,15,26,16},
{27,15,29,15},
{27,15,29,14},
{27,15,33,13},
{27,15,34,12},
{27,15,36,11},
{27,15,39,10},
{27,15,40,9},
{27,15,43,8},
{27,15,45,8},
{27,15,46,7},
{27,15,49,6},
{27,15,51,5},
{27,15,53,5},
{27,15,56,4},
{27,15,58,4},
{27,16,0,4},
{27,16,4,3},
{27,16,6,3},
{27,16,9,3},
{27,16,13,30},
{27,16,16,30},
{27,16,19,2},
{27,16,21,2},
{27,16,25,30},
{27,16,29,29},
{27,16,34,29},
{27,16,37,29},
{27,16,38,29},
{27,16,39,30},
{27,16,42,10},
{27,16,44,31},
{27,16,47,31},
{27,16,51,31},
{27,16,54,31},
{27,16,58,31},
{27,17,3,31},
{27,17,6,31},
{27,17,11,31},
{27,17,14,31},
{27,17,19,31},
{27,17,23,2},
{27,17,28,2},
{27,17,33,2},
{27,17,36,2},
{27,17,40,2},
{27,17,43,2},
{27,17,47,2},
{27,17,52,2},
{27,17,56,2},
{27,18,0,2},
{27,18,4,2},
{27,18,8,2},
{27,18,12,16},
{27,18,16,2},
{27,18,20,2},
{27,18,23,2},
{27,18,28,2},
{27,18,32,32},
{27,18,36,31},
{27,18,39,31},
{27,18,43,31},
{27,18,45,30},
{27,18,47,30},
{27,18,51,30},
{27,18,55,30},
{27,18,59,30},
{27,19,2,30},
{27,19,8,30},
{27,19,13,30},
{27,19,16,31},
{27,19,20,31},
{27,19,24,31},
{27,19,28,31},
{27,19,32,31},
{27,19,36,31},
{27,19,41,31},
{27,19,45,31},
{27,19,48,31},
{27,19,54,31},
{27,19,57,31},
{27,19,58,30},
{27,19,59,31},
{27,20,3,2},
{27,20,7,2},
{27,20,11,2},
{27,20,14,2},
{27,20,19,31},
{27,20,23,31},
{27,20,28,30},
{27,20,32,30},
{27,20,36,30},
{27,20,40,30},
{27,20,44,30},
{27,20,48,30},
{27,20,53,30},
{27,20,56,30},
{27,21,0,30},
{27,21,4,30},
{27,21,8,30},
{27,21,11,30},
{27,21,16,2},
{27,21,19,2},
{27,21,23,2},
{27,21,28,2},
{27,21,32,18},
{27,21,36,14},
{27,21,37,2},
{27,21,41,2},
{27,21,45,2},
{27,21,49,2},
{27,21,53,2},
{27,21,57,2},
{27,21,58,31},
{27,22,1,31},
{27,22,5,30},
{27,22,7,30},
{27,22,7,31},
{27,22,10,30},
{27,22,15,31},
{27,22,19,31},
{27,22,23,2},
{27,22,27,19},
{27,22,31,12},
{27,22,33,22},
{27,22,35,15},
{27,22,36,14},
{27,22,40,3},
{27,22,40,3},
{27,22,45,3},
{27,22,48,3},
{27,22,53,3},
{27,22,56,3},
{27,23,1,3},
{27,23,4,3},
{27,23,8,3},
{27,23,13,2},
{27,23,16,2},
{27,23,21,2},
{27,23,25,2},
{27,23,28,2},
{27,23,32,2},
{27,23,36,2},
{27,23,40,2},
{27,23,45,2},
{27,23,49,2},
{27,23,54,2},
{27,23,58,2},
{28,0,2,2},
{28,0,5,2},
{28,0,11,2},
{28,0,14,2},
{28,0,18,2},
{28,0,22,2},
{28,0,26,2},
{28,0,29,2},
{28,0,33,2},
{28,0,37,2},
{28,0,42,2},
{28,0,42,1},
{28,0,44,2},
{28,0,47,1},
{28,0,48,2},
{28,0,50,1},
{28,0,54,1},
{28,0,59,1},
{28,1,3,1},
{28,1,6,1},
{28,1,11,1},
{28,1,15,1},
{28,1,18,1},
{28,1,23,1},
{28,1,26,1},
{28,1,30,1},
{28,1,35,1},
{28,1,40,1},
{28,1,43,1},
{28,1,46,2},
{28,1,47,1},
{28,1,49,2},
{28,1,52,1},
{28,1,54,1},
{28,1,56,2},
{28,1,57,1},
{28,1,59,2},
{28,2,1,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Let us lie in please!
{28,2,4,2},
{28,2,8,2},
{28,2,13,2},
{28,2,17,2},
{28,2,21,2},
{28,2,25,2},
{28,2,29,2},
{28,2,33,2},
{28,2,36,2},
{28,2,41,2},
{28,2,44,2},
{28,2,48,2},
{28,2,53,2},
{28,2,57,2},
{28,3,1,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Let us lie in please!
{28,3,5,2},
{28,3,8,2},
{28,3,12,2},
{28,3,17,2},
{28,3,21,2},
{28,3,25,2},
{28,3,28,2},
{28,3,33,1},
{28,3,33,2},
{28,3,38,2},
{28,3,42,2},
{28,3,45,2},
{28,3,49,2},
{28,3,54,2},
{28,3,57,2},
{28,4,1,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Let us lie in please!
{28,4,5,2},
{28,4,8,1},
{28,4,10,2},
{28,4,10,1},
{28,4,11,2},
{28,4,14,2},
{28,4,18,2},
{28,4,21,1},
{28,4,23,2},
{28,4,26,2},
{28,4,30,2},
{28,4,35,2},
{28,4,39,2},
{28,4,41,1},
{28,4,44,2},
{28,4,44,2},
{28,4,46,1},
{28,4,47,2},
{28,4,49,2},
{28,4,53,2},
{28,4,55,1},
{28,4,57,2},
{28,4,58,2},
{28,5,3,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Let us lie in please!
{28,5,7,2},
{28,5,10,2},
{28,5,15,2},
{28,5,18,2},
{28,5,23,2},
{28,5,27,1},
{28,5,27,2},
{28,5,31,1},
{28,5,31,2},
{28,5,35,2},
{28,5,38,2},
{28,5,43,2},
{28,5,46,2},
{28,5,50,1},
{28,5,51,2},
{28,5,54,2},
{28,5,55,2},
{28,5,57,2},
{28,5,59,2},
{28,6,3,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Let us lie in please!
{28,6,6,1},
{28,6,7,2},
{28,6,10,1},
{28,6,12,2},
{28,6,14,1},
{28,6,16,2},
{28,6,19,2},
{28,6,22,1},
{28,6,24,2},
{28,6,26,2},
{28,6,28,1},
{28,6,31,2},
{28,6,35,1},
{28,6,38,2},
{28,6,39,1},
{28,6,40,2},
{28,6,44,1},
{28,6,46,2},
{28,6,49,1},
{28,6,52,1},
{28,6,54,2},
{28,6,55,1},
{28,6,56,2},
{28,6,57,1},
{28,6,59,2},
{28,7,2,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Let us lie in please!
{28,7,3,2},
{28,7,6,2},
{28,7,9,1},
{28,7,11,2},
{28,7,14,2},
{28,7,19,2},
{28,7,22,2},
{28,7,26,2},
{28,7,31,2},
{28,7,35,2},
{28,7,40,2},
{28,7,44,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Let us lie in please!
{28,7,48,2},
{28,7,50,3},
{28,7,54,3},
{28,8,0,3},
{28,8,4,4},
{28,8,11,4},
{28,8,15,5},
{28,8,18,6},
{28,8,22,7},
{28,8,26,7},
{28,8,30,8},
{28,8,34,9},
{28,8,36,10},
{28,8,39,10},
{28,8,39,11},
{28,8,43,13},
{28,8,45,13},
{28,8,46,14},
{28,8,48,15},
{28,8,49,16},
{28,8,53,15},
{28,8,55,16},
{28,8,58,16},
{28,9,3,36},
{28,9,7,42},
{28,9,7,55},
{28,9,12,43},
{28,9,12,43},
{28,9,15,44},
{28,9,17,47},
{28,9,20,48},
{28,9,25,58},
{28,9,26,60},
{28,9,26,61},
{28,9,28,68},
{28,9,29,66},
{28,9,31,66},
{28,9,32,64},
{28,9,34,77},
{28,9,36,72},
{28,9,36,97},
{28,9,39,133},
{28,9,41,131},
{28,9,44,123},
{28,9,48,129},
{28,9,50,81},
{28,9,52,89},
{28,9,53,83},
{28,9,57,72},
{28,9,59,71},
{28,9,59,69},
{28,10,3,77},
{28,10,6,71},
{28,10,8,72},
{28,10,9,76},
{28,10,12,79},
{28,10,12,81},
{28,10,13,83},
{28,10,16,95},
{28,10,18,94},
{28,10,21,112},
{28,10,21,102},
{28,10,23,96},
{28,10,24,91},
{28,10,25,71},
{28,10,27,58},
{28,10,27,57},
{28,10,31,85},
{28,10,31,79},
{28,10,33,72},
{28,10,33,74},
{28,10,35,71},
{28,10,36,74},
{28,10,38,69},
{28,10,40,72},
{28,10,42,75},
{28,10,44,69},
{28,10,49,74},
{28,10,49,76},
{28,10,53,76},
{28,10,56,90},
{28,10,57,88},
{28,11,0,84},
{28,11,1,79},
{28,11,4,86},
{28,11,5,80},
{28,11,8,102},
{28,11,10,113},
{28,11,12,79},
{28,11,13,74},
{28,11,14,77},
{28,11,17,83},
{28,11,21,81},
{28,11,23,81},
{28,11,23,77},
{28,11,26,71},
{28,11,27,71},
{28,11,31,77},
{28,11,33,76},
{28,11,34,77},
{28,11,37,76},
{28,11,39,75},
{28,11,42,73},
{28,11,43,72},
{28,11,45,70},
{28,11,48,68},
{28,11,51,66},
{28,11,52,65},
{28,11,53,64},
{28,11,55,63},
{28,11,59,61},
{28,12,0,61},
{28,12,3,60},
{28,12,4,60},
{28,12,9,58},
{28,12,9,57},
{28,12,12,56},
{28,12,16,56},
{28,12,17,55},
{28,12,19,54},
{28,12,21,54},
{28,12,25,53},
{28,12,25,52},
{28,12,28,52},
{28,12,29,51},
{28,12,33,50},
{28,12,36,50},
{28,12,38,49},
{28,12,41,49},
{28,12,42,48},
{28,12,45,45},
{28,12,46,44},
{28,12,47,46},
{28,12,49,46},
{28,12,50,46},
{28,12,52,44},
{28,12,54,42},
{28,12,56,43},
{28,12,57,44},
{28,12,59,44},
{28,13,3,44},
{28,13,6,42},
{28,13,7,40},
{28,13,9,35},
{28,13,11,32},
{28,13,15,32},
{28,13,16,31},
{28,13,18,32},
{28,13,22,33},
{28,13,23,32},
{28,13,25,32},
{28,13,27,33},
{28,13,30,36},
{28,13,31,36},
{28,13,35,36},
{28,13,36,34},
{28,13,37,32},
{28,13,40,32},
{28,13,42,34},
{28,13,43,37},
{28,13,47,36},
{28,13,50,33},
{28,13,51,31},
{28,13,53,29},
{28,13,55,28},
{28,13,58,29},
{28,14,3,29},
{28,14,5,28},
{28,14,7,28},
{28,14,11,28},
{28,14,12,29},
{28,14,14,27},
{28,14,15,26},
{28,14,17,25},
{28,14,19,25},
{28,14,22,24},
{28,14,23,25},
{28,14,26,26},
{28,14,30,26},
{28,14,32,28},
{28,14,34,29},
{28,14,38,29},
{28,14,43,29},
{28,14,47,28},
{28,14,51,28},
{28,14,55,28},
{28,14,57,27},
{28,14,59,27},
{28,15,1,26},
{28,15,3,26},
{28,15,6,24},
{28,15,11,23},
{28,15,15,22},
{28,15,19,20},
{28,15,22,19},
{28,15,26,18},
{28,15,32,16},
{28,15,33,16},
{28,15,36,15},
{28,15,41,13},
{28,15,45,12},
{28,15,48,10},
{28,15,53,9},
{28,15,56,7},
{28,16,0,6},
{28,16,4,5},
{28,16,6,4},
{28,16,8,4},
{28,16,10,3},
{28,16,12,3},
{28,16,16,3},
{28,16,17,2},
{28,16,21,2},
{28,16,26,2},
{28,16,30,2},
{28,16,34,2},
{28,16,37,2},
{28,16,41,1},
{28,16,42,1},
{28,16,46,1},
{28,16,50,1},
{28,16,54,1},
{28,16,58,1},
{28,17,2,1},
{28,17,4,2},
{28,17,6,2},
{28,17,11,2},
{28,17,15,2},
{28,17,19,2},
{28,17,24,2},
{28,17,27,2},
{28,17,31,2},
{28,17,36,2, ALDataSample::NO_OCC_EXPECTATION, true, false, ALDataSample::SB_MINMAX}, // Vacant, possibly reduced setback in anticipation of occupancy.
{28,17,39,31},
{28,17,43,30, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // Occupied, no setback.
{28,17,46,1},
{28,17,50,2},
{28,17,54,2},
{28,18,1,2},
{28,18,4,21},
{28,18,6,23},
{28,18,8,14},
{28,18,12,23},
{28,18,17,2},
{28,18,20,33},
{28,18,25,33},
{28,18,28,2},
{28,18,34,17},
{28,18,34,14},
{28,18,35,19},
{28,18,38,16},
{28,18,40,24},
{28,18,43,22},
{28,18,45,14},
{28,18,49,22},
{28,18,50,13},
{28,18,50,18},
{28,18,53,13},
{28,18,54,20},
{28,18,55,15},
{28,18,58,14},
{28,18,59,15},
{28,19,3,21},
{28,19,4,15},
{28,19,5,19},
{28,19,8,16},
{28,19,9,17},
{28,19,13,19},
{28,19,14,14},
{28,19,15,13},
{28,19,18,21},
{28,19,20,18},
{28,19,23,44},
{28,19,24,43},
{28,19,25,52},
{28,19,29,46},
{28,19,29,42},
{28,19,33,50},
{ }
    };
TEST(AmbientLightOccupancyDetection,sample5sHard3)
{
    simpleDataSampleRun(sample5sHard3);
}

// "2b" 2016/10/08+09 test set with tough occupancy to detect in the evening ~19:00Z to 20:00Z.
// 2016/12/21 see http://www.earth.org.uk/img/20161128-occ-analysis-2b-hard.svg
static const ALDataSample sample2bHard[] =
    {
{8,0,12,3},
{8,0,24,3, occType::OCC_NONE, true, false}, // Dark, vacant.
// ...
{8,5,28,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, maximum setback.
// ...
{8,7,28,3, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Dark, vacant; possibly reducing setback with antipicated occupancy.
{8,7,40,180, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_NONEECO}, // Curtains drawn, OCCUPANCY (but may be deferred).
{8,7,44,179, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // Curtains drawn, OCCUPANCY; no setback by now.
{8,7,52,180},
{8,8,0,182},
{8,8,8,183},
{8,8,20,182},
{8,8,28,182},
{8,8,36,183},
{8,8,48,183},
{8,8,52,182},
{8,9,0,182},
{8,9,4,182},
{8,9,20,184},
{8,9,24,183},
{8,9,32,183},
{8,9,36,183},
{8,9,48,183},
{8,10,4,183},
{8,10,16,183},
{8,10,28,182},
{8,10,32,183},
{8,10,44,185},
{8,10,48,186},
{8,11,0,184},
{8,11,4,183},
{8,11,20,184},
{8,11,24,185},
{8,11,29,186},
{8,11,36,185},
{8,11,44,186},
{8,11,48,186},
{8,12,4,186, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_NONEECO}, // Broad daylight, vacant. Small setback allowed.
{8,12,16,187},
{8,12,20,187},
{8,12,32,184},
{8,12,36,186},
{8,12,48,185},
{8,12,56,185},
{8,13,4,186},
{8,13,8,187},
{8,13,24,186},
{8,13,28,183},
{8,13,32,186},
{8,13,40,120},
{8,13,44,173},
{8,13,48,176},
{8,13,52,178},
{8,13,56,179},
{8,14,4,180},
{8,14,8,182},
{8,14,12,183},
{8,14,18,183},
{8,14,28,185},
{8,14,32,186},
{8,14,40,186},
{8,14,48,185},
{8,14,52,186},
{8,15,0,182},
{8,15,4,181},
{8,15,12,184},
{8,15,19,186},
{8,15,24,182},
{8,15,32,181},
{8,15,40,182},
{8,15,52,182},
{8,16,0,178},
{8,16,4,176},
{8,16,16,181},
{8,16,20,182},
{8,16,32,178},
{8,16,40,176},
{8,16,48,168},
{8,16,52,176},
{8,16,56,154},
{8,17,5,68},
{8,17,8,37},
{8,17,16,30},
{8,17,20,20},
{8,17,32,12},
{8,17,40,5},
{8,17,44,4},
{8,17,52,3},
{8,18,0,3},
{8,18,12,3, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX},  // Dark, vacant.  Decent setback expected.
{8,18,24,3},
{8,18,40,3},
{8,18,52,3},
{8,19,4,3},
{8,19,20,3},
{8,19,32,4},
{8,19,39,4},
{8,19,52,4, occType::OCC_NONE, true, false},  // Dark, vacant.
{8,20,0,7},
{8,20,16,6},
{8,20,20,10, occType::OCC_PROBABLE, ALDataSample::NO_RD_EXPECTATION, true, ALDataSample::SB_NONEMIN}, // Light on, OCCUPANCY.  FIXME: should be no setback.  FIXME: should be light.
{8,20,28,6, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, true, ALDataSample::SB_NONEMIN}, // Occupied.
{8,20,36,3, occType::OCC_NONE, true},  // Dark, becoming vacant.
{8,20,42,3},
// ...
{9,5,32,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, maximum setback.
// ...
{9,7,40,3},
{9,7,48,3},
{9,7,52,4},
{9,8,8,176, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONE}, // Curtains drawn, OCCUPANCY.  No setback.
{9,8,20,177},
{9,8,32,177},
{9,8,44,178},
{9,8,56,178},
{9,9,8,179},
{9,9,16,179},
{9,9,20,180},
{9,9,36,180},
{9,9,48,180},
{9,9,52,181},
{9,10,0,181},
{9,10,4,179},
{9,10,8,181},
{9,10,20,182},
{9,10,24,185},
{9,10,40,185},
{9,10,44,184},
{9,10,52,184},
{9,11,0,184},
{9,11,8,185},
{9,11,12,186},
{9,11,16,185},
{9,11,24,183},
{9,11,28,183},
{9,11,40,186},
{9,11,44,186},
{9,12,4,184, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_NONEECO}, // Broad daylight.  Some setback allowed.
{9,12,16,184},
{9,12,24,186},
{9,12,32,187},
{9,12,40,186},
{9,12,44,187},
{9,12,56,187},
{9,13,8,186},
{9,13,12,185},
{9,13,13,185},
{9,13,24,187},
{9,13,36,188},
{9,13,48,184},
{9,13,52,186},
{9,13,56,185},
{9,14,4,185},
{9,14,12,184},
{9,14,16,186},
{9,14,28,185},
{9,14,36,187},
{9,14,40,186},
{9,14,52,184},
{9,15,0,183},
{9,15,4,185},
{9,15,8,183},
{9,15,16,176},
{9,15,24,164},
{9,15,28,178},
{9,15,32,181},
{9,15,40,177},
{9,15,44,128},
{9,15,48,107},
{9,15,56,98},
{9,16,0,96},
{9,16,4,68},
{9,16,12,63},
{9,16,20,81},
{9,16,33,95},
{9,16,44,97},
{9,16,52,73},
{9,16,56,56},
{9,17,0,46},
{9,17,4,40},
{9,17,12,32},
{9,17,16,25},
{9,17,32,7, occType::OCC_NONE, ALDataSample::NO_RD_EXPECTATION, false}, // No active occupancy.
{9,17,36,5},
{9,17,41,4},
{9,17,48,3},
{9,18,0,3},
{9,18,12,3, occType::OCC_NONE, true, false, ALDataSample::SB_MINECO}, // Light off, no active occupancy.  Some setback should happen.
{9,18,28,3},
{9,18,40,3},
{9,18,56,3},
{9,19,8,10, occType::OCC_PROBABLE, false, true}, // Light on, OCCUPANCY.  FIXME: should be light.
{9,19,16,9, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, true, ALDataSample::SB_NONEMIN}, // Occupied.  // FIXME: should be not dark and no setback.
{9,19,28,10, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, true, ALDataSample::SB_NONEMIN}, // Occupied.  // FIXME: should be not dark and no setback.
{9,19,44,6, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, true, ALDataSample::SB_NONEMIN}, // Occupied.  // FIXME: should be not dark and no setback.
{9,19,48,11, occType::OCC_PROBABLE, false, true}, // Small light on?  Possible occupancy.  FIXME: should be light.
{9,19,56,8},
{9,20,4,8},
{9,20,8,3, occType::OCC_NONE, true}, // Light off.
{9,20,20,3, occType::OCC_NONE, true}, // Dark.
{9,20,36,3, occType::OCC_NONE, true, false}, // Dark, no active occupancy.
    { }
    };
// Test with real data set.
TEST(AmbientLightOccupancyDetection,sample2bHard)
{
    simpleDataSampleRun(sample2bHard);
}

// "2b" 2016/11/28+29 test set with tough occupancy to detect in the evening ~20:00Z to 21:00Z.
static const ALDataSample sample2bHard2[] =
    {
{28,0,8,8, occType::OCC_NONE, true, false}, // Sleeping, albeit with week night light.
{28,0,16,8, occType::OCC_NONE, true, false}, // Sleeping, albeit with week night light.
// ...
{28,4,8,8, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Should be on full setback.
// ...
{28,5,8,8, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Should be on full setback.
// ...
{28,7,21,8},
{28,7,33,8, ALDataSample::NO_OCC_EXPECTATION, true, false, ALDataSample::SB_MINMAX}, // May be on reduced setback, anticipating occupancy.
{28,7,40,35, ALDataSample::NO_OCC_EXPECTATION, false}, // FIXME: should be able to detect curtains drawn here (occType::OCC_PROBABLE) but may be deferred.
{28,7,53,54, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // FIXME: should be able to detect curtains drawn here (occType::OCC_PROBABLE), and thus occupancy, and this small/no setback.
{28,8,0,69},
{28,8,12,85},
{28,8,16,90},
{28,8,24,103},
{28,8,37,115},
{28,8,41,120},
{28,8,53,133},
{28,8,54,134},
{28,9,0,140},
{28,9,9,148},
{28,9,13,152},
{28,9,25,164},
{28,9,29,167},
{28,9,40,173},
{28,9,44,174},
{28,9,56,176},
{28,10,4,176},
{28,10,10,177},
{28,10,17,177},
{28,10,23,178},
{28,10,24,178},
{28,10,45,179},
{28,10,50,179},
{28,11,0,179},
{28,11,17,179},
{28,11,28,179},
{28,11,37,180},
{28,11,41,180},
{28,11,57,180},
{28,12,4,180, ALDataSample::NO_OCC_EXPECTATION, false, false}, // Broad daylight, vacant.
{28,12,20,181},
{28,12,33,181},
{28,12,44,182},
{28,12,57,182},
{28,13,8,183},
{28,13,21,183},
{28,13,25,184},
{28,13,28,184},
{28,13,45,184},
{28,13,48,185},
{28,13,52,185},
{28,14,8,185},
{28,14,21,185},
{28,14,25,185},
{28,14,32,185},
{28,14,41,183},
{28,14,56,184},
{28,15,5,183},
{28,15,8,182},
{28,15,20,176},
{28,15,24,174},
{28,15,25,172},
{28,15,32,151},
{28,15,40,118},
{28,15,45,111},
{28,15,52,68},
{28,16,1,42},
{28,16,4,34},
{28,16,9,8},
{28,16,16,8},
// ....
{28,19,13,8},
{28,19,28,8},
{28,19,44,14, occType::OCC_PROBABLE, ALDataSample::NO_RD_EXPECTATION, true}, // Light on: OCCUPIED.  FIXME: should not be dark.
{28,19,48,13},
{28,20,1,16, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, true}, // Light on: OCCUPIED.  FIXME: should not be dark.
{28,20,16,13},
{28,20,28,12},
{28,20,36,15, occType::OCC_NONE, ALDataSample::NO_RD_EXPECTATION}, // Light on: OCCUPIED.  FIXME: should not be dark nor vacant.
{28,20,40,8},
{28,20,48,8},
// ...
{29,2,0,8, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Full setback.
// ...
{29,3,0,8, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Full setback.
// ...
{29,4,0,8, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Full setback.
// ...
{29,5,4,8, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Full setback.
// ...
{29,7,20,8},
{29,7,32,8, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // May hve reduced setabck anticipating occupancy.
{29,7,48,34, ALDataSample::NO_OCC_EXPECTATION, false}, // FIXME: Should be able to detect curtains drawn here; occupancy detection may be deferred.
{29,8,1,30, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // Light, occupancy, no.min setback by now.
{29,8,12,77},
{29,8,16,82},
{29,8,36,107},
{29,8,44,118},
{29,8,48,122},
{29,9,0,134},
{29,9,8,142},
{29,9,20,153},
{29,9,24,158},
{29,9,40,171},
{29,9,52,175},
{29,10,4,176},
{29,10,20,177},
{29,10,36,178},
{29,10,52,179},
{29,11,0,179},
{29,11,12,179},
{29,11,28,179},
{29,11,48,180},
{29,12,0,180},
{29,12,8,180},
{29,12,24,180},
{29,12,36,181},
{29,12,40,181},
{29,12,52,182},
{29,12,56,182},
{29,13,8,183},
{29,13,24,183},
{29,13,36,184},
{29,13,44,184},
{29,13,48,185},
{29,13,56,185},
{29,14,8,185},
{29,14,24,185},
{29,14,32,184},
{29,14,44,181},
{29,14,48,183},
{29,14,52,184},
{29,15,4,183},
{29,15,8,181},
{29,15,12,174},
{29,15,24,130},
{29,15,28,121},
{29,15,40,89},
{29,15,44,78},
{29,15,48,67},
{29,16,0,38},
{29,16,8,24},
{29,16,12,20},
{29,16,20,13},
{29,16,29,10},
{29,16,32,9},
{29,16,36,9},
{29,16,48,8},
{29,16,52,8},
// ...
{29,19,28,8},
{29,19,40,8},
{29,19,56,16, occType::OCC_PROBABLE, ALDataSample::NO_RD_EXPECTATION, true}, // Light on: OCCUPIED.  FIXME: should not be dark.
{29,20,4,12},
{29,20,8,11},
{29,20,16,10},
{29,20,32,8},
{29,20,44,8},
// ...
{29,23,44,8, occType::OCC_NONE, true, false, ALDataSample::SB_MAX},
{29,23,56,8, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Light off, dark, no active occupation.
     { }
    };
// Test with real data set.
TEST(AmbientLightOccupancyDetection,sample2bHard2)
{
    simpleDataSampleRun(sample2bHard2);
}

// "6k" 2016/10/08+09 (Sat+Sun) test set relatively easy to detect daytime occupancy in busy room.
static const ALDataSample sample6k[] =
    {
{8,0,7,1, occType::OCC_NONE, true, false}, // Not occupied.
{8,0,19,1},
{8,0,35,1},
{8,0,47,1},
{8,1,3,1, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX}, // Dark, vacant, significant setback.
{8,1,19,2},
{8,1,35,2},
{8,1,39,2},
// ...
{8,4,3,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, max setback.
// ...
{8,6,11,2},
{8,6,23,3},
{8,6,35,5},
{8,6,39,4},
{8,6,42,4},
{8,6,47,4},
{8,6,55,5, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Dark, but may reduce setback anticipating occupancy.
{8,7,7,20},
{8,7,15,25},
{8,7,19,33},
{8,7,31,121, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONE}, // Light on: OCCUPIED, no setback.
{8,7,40,35},
{8,7,52,62},
{8,8,7,168},
{8,8,19,173},
{8,8,23,146},
{8,8,35,96},
{8,8,43,57},
{8,8,47,61},
{8,9,3,44},
{8,9,7,48},
{8,9,19,93},
{8,9,23,107},
{8,9,31,174},
{8,9,43,146},
{8,9,47,128},
{8,9,55,145},
{8,10,7,121},
{8,10,11,110},
{8,10,19,118},
{8,10,27,119},
{8,10,35,137},
{8,10,39,166},
{8,10,43,177},
{8,10,47,180},
{8,10,55,127},
{8,10,59,131},
{8,11,11,152},
{8,11,15,166},
{8,11,31,153},
{8,11,35,147},
{8,11,43,143},
{8,11,51,162},
{8,11,55,178},
{8,12,7,155, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_NONEECO}, // Broad daylight, limited setback possible.
{8,12,15,179},
{8,12,17,172},
{8,12,19,84},
{8,12,27,55},
{8,12,35,85},
{8,12,43,90},
{8,12,55,89},
{8,12,59,100},
{8,13,11,106, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Vacant, should be set back at least a little.
{8,13,15,102},
{8,13,23,101},
{8,13,35,14},
{8,13,47,38},
{8,13,55,34},
{8,13,59,25},
{8,14,3,27},
{8,14,11,41},
{8,14,15,50},
{8,14,19,53, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_NONEECO}, // occType::OCC_WEAK}, // Light still on?  Occupied? Possible small setback.
{8,14,27,58},
{8,14,31,59},
{8,14,35,52},
{8,14,47,63},
{8,14,59,29},
{8,15,3,24},
{8,15,11,38},
{8,15,15,45},
{8,15,19,61},
{8,15,27,44},
{8,15,39,44},
{8,15,43,40},
{8,15,51,33},
{8,15,55,29},
{8,15,59,28},
{8,16,3,23},
{8,16,19,27},
{8,16,27,18, occType::OCC_NONE, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, ALDataSample::SB_MINECO}, // Dark, but with reduced setback anticipating occupancy.
{8,16,35,164, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONE}, // Light on: OCCUPIED.  No setback.
{8,16,39,151},
{8,16,51,153},
{8,17,3,151},
{8,17,11,122},
{8,17,15,131},
{8,17,31,138},
{8,17,35,1, occType::OCC_NONE, true}, // Light off: (just) not occupied.
{8,17,43,1},
{8,17,55,1},
{8,18,3,1},
{8,18,15,1},
{8,18,23,1},
{8,18,35,1, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Light off: not occupied, setback possible.
{8,18,47,1},
{8,18,59,1},
{8,19,11,1},
{8,19,23,1},
{8,19,31,7},
{8,19,35,6},
{8,19,47,6},
{8,19,59,6},
{8,20,11,6},
{8,20,19,1},
{8,20,23,1},
{8,20,35,1},
{8,20,51,1},
{8,20,59,1},
{8,21,11,1},
{8,21,27,90, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONE}, // Light on: OCCUPIED.  No setback.
{8,21,43,82},
{8,21,47,80},
{8,21,51,79},
{8,22,7,1},
{8,22,19,1, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Light off: not occupied.  Setback possible.
// ...
{9,5,15,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, max setback.
// ...
{9,5,59,1},
{9,6,7,2},
{9,6,11,2},
{9,6,15,3},
{9,6,23,4},
{9,6,31,6},
{9,6,35,8, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Dark, but may reduce setback anticipating occupancy.
{9,6,47,50, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONE}, // Light on or blinds open: OCCUPIED. No setback.
{9,6,51,53},
{9,7,7,48},
{9,7,11,57},
{9,7,23,108},
{9,7,39,185},
{9,7,43,184},
{9,7,51,184},
    { }
    };
TEST(AmbientLightOccupancyDetection,sample6k)
{
    simpleDataSampleRun(sample6k);
}

//-----------------------------------------------------------------------------------------------------------------
// "3l" fortnight to 2016/11/24 looking for habitual evening artificial lighting to watch TV, etc.
// This is not especially intended to check response to other events, though will verify some key ones.
// See http://www.earth.org.uk/img/20161124-16WWal.png
// Also for some snapshot analysis 2016/12/20:
// See http://www.earth.org.uk/img/20161115-amblight-occ-analysis-3l-evening.dat
// See http://www.earth.org.uk/img/20161115-amblight-occ-analysis-3l-evening.svg
static const ALDataSample sample3leveningTV[] =
    {
{10,0,7,1, occType::OCC_NONE, true, false}, // Definitely not occupied.
// ...
{10,6,31,1, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX}, // Dark, vacant, running long enough for max setback but may be anticipating occupancy.
{10,6,47,1},
{10,6,59,2},
{10,7,3,2},
{10,7,23,9}, // Curtains drawn, temporarily occupied, small setback still possible.  FIXME: should not be classified as dark.
{10,7,31,12},
{10,7,39,17},
{10,7,47,23, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEECO},
{10,7,59,27},
{10,8,3,29, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEECO}, // Light, may be occupied, should only have at most ECO setback because light.
{10,8,19,45},
{10,8,31,61},
{10,8,47,61},
{10,8,59,94},
{10,9,15,78, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::NO_RD_EXPECTATION, ALDataSample::SB_NONEECO}, // Light, probably not occupied, should only have at most ECO setback because light.
{10,9,19,76},
{10,9,27,74},
{10,9,39,73},
{10,9,43,76},
{10,9,55,83},
{10,10,11,116, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::NO_RD_EXPECTATION, ALDataSample::SB_NONEECO}, // Light, probably not occupied, should only have at most ECO setback because light.
{10,10,23,143},
{10,10,27,138},
{10,10,39,154},
{10,10,51,155},
{10,10,59,173},
{10,11,11,173, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::NO_RD_EXPECTATION, ALDataSample::SB_NONEECO}, // Light, probably not occupied, should only have at most ECO setback because light.
{10,11,15,177},
{10,11,23,176},
{10,11,39,164},
{10,11,51,152},
{10,11,55,159},
{10,11,59,156},
{10,12,3,171, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_NONEECO}, // Broad daylight, vacant, should only have at most ECO setback because light.
{10,12,11,181},
{10,12,15,180},
{10,12,23,125},
{10,12,27,102},
{10,12,31,112},
{10,12,39,111},
{10,12,47,118},
{10,12,51,125},
{10,13,3,164, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::NO_RD_EXPECTATION, ALDataSample::SB_NONEECO}, // Light, probably not occupied, should only have at most ECO setback because light.
{10,13,11,110},
{10,13,15,96},
{10,13,17,95},
{10,13,19,96},
{10,13,23,96},
{10,13,27,91},
{10,13,35,85},
{10,13,43,57},
{10,13,51,67},
{10,13,55,100},
{10,14,3,140, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::NO_RD_EXPECTATION, ALDataSample::SB_NONEECO}, // Light, probably not occupied, should only have at most ECO setback because light.
{10,14,7,137},
{10,14,11,129},
{10,14,19,178},
{10,14,23,170},
{10,14,27,149},
{10,14,35,178},
{10,14,39,182},
{10,14,43,178},
{10,14,55,153},
{10,14,59,142},
{10,15,3,163, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::NO_RD_EXPECTATION, ALDataSample::SB_NONEECO}, // Light, probably not occupied, should only have at most ECO setback because light.
{10,15,7,177},
{10,15,15,178},
{10,15,23,152},
{10,15,27,176},
{10,15,31,131},
{10,15,39,83},
{10,15,43,56},
{10,15,51,41},
{10,15,59,44, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC, ALDataSample::SB_NONEECO}, // TV watching, occupied, no setback.
{10,16,3,39},
{10,16,15,19},
{10,16,23,44, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONE}, // TV watching, occupied, no setback.
{10,16,35,36},
{10,16,47,33},
{10,16,51,35, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // FIXME: occType::OCC_WEAK}, // TV watching, occupied, no setback.
{10,17,3,34},
{10,17,7,35},
{10,17,19,36},
{10,17,23,35},
{10,17,39,35, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // TV watching, occupied, no setback.
{10,17,51,34},
{10,17,59,30},
{10,18,3,31, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE}, // TV watching, occupied, no setback.
{10,18,15,31},
{10,18,27,31},
{10,18,31,30},
{10,18,39,30, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // TV watching, borderline occupied, dark, maybe small setback.
{10,18,51,30},
{10,19,7,31},
{10,19,15,40},
{10,19,27,40, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // TV watching, borderline occupied, borderline dark, maybe small setback.
{10,19,43,39},
{10,19,55,41, occType::OCC_WEAK, false, true, ALDataSample::SB_NONEMIN}, // TV watching, borderline occupied, borderline dark, maybe small setback.
{10,19,59,42},
{10,20,11,39},
{10,20,23,41, occType::OCC_WEAK, false, true, ALDataSample::SB_NONEMIN}, // TV watching, borderline occupied, borderline dark, maybe small setback.
{10,20,31,39},
{10,20,43,40, occType::OCC_WEAK, false, true, ALDataSample::SB_NONEMIN}, // TV watching, borderline occupied, borderline dark, maybe small setback.
{10,20,47,39},
{10,20,51,40, occType::OCC_WEAK, false, true, ALDataSample::SB_NONEMIN}, // TV watching, borderline occupied, borderline dark, maybe small setback.
{10,21,7,40},
{10,21,9,41},
{10,21,15,41},
{10,21,35,40},
{10,21,47,40},
{10,21,55,39, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // TV watching, borderline occupied, borderline dark, maybe small setback.
{10,22,7,1},
{10,22,15,1}, // Vacant, dark.
{10,22,27,1}, // Vacant, dark.
{10,22,43,1}, // Vacant, dark.
{10,22,59,1, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX}, // Vacant, dark.
// ...
{11,6,27,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Vacant, dark, dark long enough for full setback.
{11,6,43,1},
{11,6,55,2},
{11,7,7,5, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Vacant, dark, may be anticipating occupancy.
{11,7,19,11},
{11,7,23,13},
{11,7,31,19},
{11,7,35,21},
{11,7,43,25},
{11,7,55,32},
{11,8,7,41},
{11,8,23,55},
{11,8,35,65},
{11,8,43,70},
{11,8,47,72},
{11,9,3,92},
{11,9,11,103},
{11,9,15,115},
{11,9,27,119},
{11,9,39,137},
{11,9,43,152},
{11,9,51,154},
{11,9,55,147},
{11,10,7,144},
{11,10,15,157},
{11,10,19,162},
{11,10,31,168},
{11,10,35,172},
{11,10,47,167},
{11,10,59,171},
{11,11,3,166},
{11,11,15,176},
{11,11,23,175},
{11,11,31,176},
{11,11,42,177},
{11,11,47,177},
{11,12,3,177},
{11,12,15,178},
{11,12,19,178},
{11,12,35,178},
{11,12,47,178},
{11,12,59,179},
{11,13,11,180},
{11,13,15,180},
{11,13,23,180},
{11,13,39,182},
{11,13,47,182},
{11,14,3,182},
{11,14,15,182},
{11,14,23,182},
{11,14,27,182},
{11,14,39,182},
{11,14,47,177},
{11,14,55,174},
{11,15,7,150},
{11,15,11,135},
{11,15,23,69},
{11,15,35,49},
{11,15,39,45},
{11,15,49,43},
{11,15,55,38},
{11,15,59,34},
{11,16,7,19},
{11,16,11,14},
{11,16,23,1},
{11,16,39,1},
{11,16,47,13},
{11,16,55,1},
{11,17,3,1},
{11,17,15,1},
{11,17,31,1},
{11,17,47,10},
{11,18,3,9},
{11,18,15,10},
{11,18,19,10},
{11,18,35,9},
{11,18,47,31},
{11,18,55,29},
{11,18,59,29},
{11,19,15,29},
{11,19,27,24},
{11,19,39,24},
{11,19,51,25},
{11,20,3,25},
{11,20,19,25},
{11,20,20,24},
{11,20,27,25},
{11,20,35,38},
{11,20,39,40},
{11,20,53,40},
{11,21,7,41},
{11,21,11,40},
{11,21,19,41},
{11,21,35,39},
{11,21,47,41},
{11,21,51,39},
{11,21,55,40},
{11,22,7,1},
{11,22,11,1},
// ...
{12,6,7,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
// ...
{12,7,7,1, occType::OCC_NONE, true, false, ALDataSample::SB_MINMAX}, // Vacant, dark, may be anticipating occupancy.
{12,7,19,1},
{12,7,35,5},
{12,7,38,6},
{12,7,39,6},
{12,7,51,7},
{12,7,59,11},
{12,8,15,11},
{12,8,31,52},
{12,8,35,56},
{12,8,47,54},
{12,8,59,56},
{12,9,7,54},
{12,9,15,54},
{12,9,27,14},
{12,9,31,16},
{12,9,35,20},
{12,9,43,32},
{12,9,51,37},
{12,10,3,68},
{12,10,15,63},
{12,10,19,54},
{12,10,35,62},
{12,10,51,64},
{12,10,55,53},
{12,11,7,64},
{12,11,11,65},
{12,11,23,83},
{12,11,35,83},
{12,11,39,82},
{12,11,55,92},
{12,11,59,94},
{12,12,7,75},
{12,12,19,71},
{12,12,23,79},
{12,12,31,72},
{12,12,39,68},
{12,12,47,60},
{12,12,51,60},
{12,13,5,69},
{12,13,7,68},
{12,13,11,69},
{12,13,31,69},
{12,13,43,70},
{12,13,47,74},
{12,13,51,66},
{12,14,3,57},
{12,14,23,28},
{12,14,35,30},
{12,14,47,27},
{12,14,55,29},
{12,14,59,29},
{12,15,15,18},
{12,15,19,15},
{12,15,31,11}, // KEY/SENSITIVE DATA POINT FOLLOWS...
{12,15,35,46, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONE}, // Light on?  Occupied, no setback.
{12,15,47,49},
{12,15,51,47},
{12,15,59,43},
{12,16,10,41},
{12,16,11,43},
{12,16,23,41},
{12,16,27,43},
{12,16,35,41, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // TV watching, small or no setback.
{12,16,47,42},
{12,16,51,43},
{12,17,0,43},
{12,17,11,42, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // TV watching, small or no setback.
{12,17,23,1},
{12,17,39,13},
{12,17,40,14},
{12,17,47,13},
{12,17,59,14},
{12,18,11,44, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // TV watching, small or no setback.
{12,18,19,43},
{12,18,23,45},
{12,18,39,44},
{12,18,51,41},
{12,18,55,41},
{12,19,11,37, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // TV watching, small or no setback.
{12,19,15,35},
{12,19,19,35},
{12,19,35,34},
{12,19,47,35},
{12,19,59,42, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // TV watching, small or no setback.
{12,20,15,42},
{12,20,26,44},
{12,20,27,43},
{12,20,31,42},
{12,20,43,43},
{12,20,59,43},
{12,21,7,43, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // TV watching, small or no setback.
{12,21,11,45},
{12,21,21,43},
{12,21,23,44},
{12,21,39,42, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // TV watching, small or no setback.
{12,21,40,44},
{12,21,51,42},
{12,21,55,44},
{12,22,3,43},
{12,22,19,43},
{12,22,31,43},
{12,22,35,44, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // TV watching, small or no setback.
{12,22,51,14},
{12,22,59,14},
{12,23,3,14},
{12,23,19,13},
{12,23,31,13},
{12,23,43,14},
{12,23,51,14},
{12,23,59,13},
{13,0,4,14},
{13,0,11,14},
{13,0,15,13},
{13,0,31,14},
{13,0,35,13},
{13,0,47,14},
{13,0,51,1, occType::OCC_NONE, true, false}, // Dark, vacant.
{13,1,3,1},
{13,1,19,1, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX}, // Dark, vacant, some setback should be in place.
// ...
{13,4,11,1, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX}, // Dark, vacant, some setback should be in place.
// ...
{13,5,7,1, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark and vacant long enough for max setback.
// ...
{13,7,23,1},
{13,7,35,1},
{13,7,51,52, occType::OCC_PROBABLE, false, true, ALDataSample::SB_MINMAX}, // Dark, vacant, some setback expected.
{13,8,7,71},
{13,8,19,73},
{13,8,27,85},
{13,8,35,93},
{13,8,39,97},
{13,8,43,103},
{13,8,51,101},
{13,8,55,103},
{13,9,11,103},
{13,9,15,105},
{13,9,30,81},
{13,9,43,127},
{13,9,51,136},
{13,9,59,145},
{13,10,7,163},
{13,10,11,168},
{13,10,27,172},
{13,10,31,176},
{13,10,47,126},
{13,11,3,177},
{13,11,10,178},
{13,11,19,176},
{13,11,31,140},
{13,11,35,179},
{13,11,51,177},
{13,11,55,176},
{13,12,3,185},
{13,12,4,185},
{13,12,8,177},
{13,12,12,179},
{13,12,29,179},
{13,12,41,179},
{13,12,48,172},
{13,12,53,178},
{13,13,5,180},
{13,13,8,181},
{13,13,13,181},
{13,13,25,102},
{13,13,33,145},
{13,13,41,167},
{13,13,53,48},
{13,13,56,52},
{13,14,9,19},
{13,14,16,14},
{13,14,18,14},
{13,14,33,5},
{13,14,53,178},
{13,15,8,130},
{13,15,20,17},
{13,15,33,62},
{13,15,36,59},
{13,15,52,40},
{13,16,5,37},
{13,16,9,25},
{13,16,24,52},
{13,16,29,50},
{13,16,40,44},
{13,16,52,43},
{13,16,57,44},
{13,17,4,44},
{13,17,16,44},
{13,17,29,45},
{13,17,37,44},
{13,17,41,43},
{13,17,52,45},
{13,18,0,46},
{13,18,17,45},
{13,18,20,46},
{13,18,25,46},
{13,18,32,45},
{13,18,37,44},
{13,18,48,43},
{13,18,56,45},
{13,19,1,45},
{13,19,17,45},
{13,19,28,44},
{13,19,37,44},
{13,19,45,39},
{13,19,49,46},
{13,20,1,44},
{13,20,16,44},
{13,20,24,46},
{13,20,37,46},
{13,20,41,45},
{13,20,45,45},
{13,20,57,44},
{13,21,9,44},
{13,21,12,45},
{13,21,32,46},
{13,21,49,3},
{13,22,1,3},
//
{14,5,44,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
// ...
{14,6,52,3},
{14,7,8,3},
{14,7,16,5},
{14,7,20,5},
{14,7,37,11},
{14,7,40,13},
{14,7,48,22},
{14,7,56,32},
{14,8,4,30},
{14,8,8,32},
{14,8,20,47},
{14,8,24,51},
{14,8,28,52},
{14,8,36,43},
{14,8,44,58},
{14,8,52,60},
{14,8,56,57},
{14,9,8,62},
{14,9,17,63},
{14,9,21,62},
{14,9,32,96},
{14,9,36,117},
{14,9,40,132},
{14,9,44,137},
{14,10,0,116},
{14,10,9,114},
{14,10,20,120},
{14,10,32,120},
{14,10,36,101},
{14,10,57,131},
{14,11,12,120},
{14,11,29,85},
{14,11,40,87},
{14,11,44,84},
{14,11,52,151},
{14,12,4,139},
{14,12,8,169},
{14,12,17,135},
{14,12,24,153},
{14,12,32,156},
{14,12,44,134},
{14,12,49,114},
{14,13,0,137},
{14,13,16,112},
{14,13,32,94},
{14,13,48,84},
{14,13,52,65},
{14,14,0,81},
{14,14,13,80},
{14,14,26,71},
{14,14,32,52},
{14,14,44,46},
{14,14,52,41},
{14,15,0,42},
{14,15,4,51},
{14,15,12,39},
{14,15,20,40},
{14,15,25,28},
{14,15,36,18},
{14,15,44,16},
{14,15,48,15},
{14,16,0,19},
{14,16,12,17},
{14,16,16,16},
{14,16,32,3},
{14,16,40,3},
{14,16,52,16},
{14,16,56,15},
{14,17,4,3},
{14,17,16,3},
{14,17,24,3},
{14,17,36,3},
{14,17,48,3},
{14,18,4,3},
{14,18,20,3},
{14,18,32,3},
{14,18,44,3},
{14,19,0,3},
{14,19,20,48},
{14,19,28,46},
{14,19,32,45},
{14,19,44,45},
{14,19,52,46},
{14,19,56,46},
{14,20,4,46},
{14,20,12,46},
{14,20,24,46},
{14,20,28,44},
{14,20,32,45},
{14,20,36,3},
{14,20,48,3},
{14,20,56,3},
{14,21,12,47},
{14,21,16,49},
{14,21,20,47},
{14,21,24,46},
{14,21,32,46},
{14,21,36,45},
{14,21,40,46},
{14,21,52,43},
{14,22,0,16},
{14,22,4,3},
{14,22,20,3},
//
{15,5,0,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
// ...
{15,6,48,3},
{15,7,0,3},
{15,7,12,4},
{15,7,22,5},
{15,7,28,6},
{15,7,36,11},
{15,7,52,19},
{15,8,4,34},
{15,8,8,33},
{15,8,16,33},
{15,8,28,48},
{15,8,32,55},
{15,8,48,76},
{15,9,0,63}, // Apparently rather fast-changing sunlight all morning, eg from clouds passing...
{15,9,4,108},
{15,9,16,92},
{15,9,20,112},
{15,9,24,102},
{15,9,28,72},
{15,9,32,73},
{15,9,48,125},
{15,9,56,52},
{15,10,0,63},
{15,10,4,100},
{15,10,12,134},
{15,10,24,102},
{15,10,28,115},
{15,10,36,112},
{15,10,40,144},
{15,10,52,180},
{15,10,56,175},
{15,11,8,159},
{15,11,12,142},
{15,11,24,137},
{15,11,32,144},
{15,11,36,130},
{15,11,44,103},
{15,11,56,177},
{15,12,0,154},
{15,12,16,145},
{15,12,32,178},
{15,12,40,176},
{15,12,44,173},
{15,12,56,114},
{15,13,0,105},
{15,13,4,92},
{15,13,12,87},
{15,13,20,86},
{15,13,24,123},
{15,13,36,166},
{15,13,44,98},
{15,13,48,96},
{15,13,56,72},
{15,14,4,149},
{15,14,12,62},
{15,14,16,76},
{15,14,28,178},
{15,14,36,60},
{15,14,40,50},
{15,14,44,41},
{15,14,52,21},
{15,15,0,20},
{15,15,4,21},
{15,15,8,27},
{15,15,16,15},
{15,15,24,16},
{15,15,28,17},
{15,15,40,13},
{15,15,45,46},
{15,15,48,50},
{15,16,0,45},
{15,16,6,44},
{15,16,8,45},
{15,16,16,69},
{15,16,17,27},
{15,16,20,15},
//{15,16,20,15},
{15,16,32,48},
{15,16,43,48},
{15,16,48,49},
{15,16,52,48},
{15,17,4,47},
{15,17,12,47},
{15,17,16,46},
{15,17,24,48},
{15,17,36,46},
{15,17,40,48},
{15,17,44,47},
{15,18,0,48},
{15,18,4,46},
{15,18,16,48},
{15,18,20,47},
{15,18,28,43},
{15,18,44,44},
{15,18,56,46},
{15,19,8,45},
{15,19,12,44},
{15,19,20,43},
{15,19,28,46},
{15,19,44,46},
{15,19,56,44},
{15,20,8,45},
{15,20,16,47},
{15,20,20,45},
{15,20,28,46},
{15,20,44,3},
{15,20,56,3},
// ...
{16,5,12,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
// ...
{16,6,48,3},
{16,7,0,3},
{16,7,12,5},
{16,7,16,6},
{16,7,24,9},
{16,7,40,15},
{16,7,48,14},
{16,7,52,13},
{16,7,56,20},
{16,8,8,37},
{16,8,12,38},
{16,8,20,44},
{16,8,32,53},
{16,8,36,55},
{16,8,48,58},
{16,9,0,90},
{16,9,4,105},
{16,9,8,122},
{16,9,12,136},
{16,9,16,143},
{16,9,32,107},
{16,9,40,96},
{16,9,44,133},
{16,9,52,145},
{16,10,0,160},
{16,10,4,174},
{16,10,8,177},
{16,10,17,149},
{16,10,20,170},
{16,10,24,142},
{16,10,44,140},
{16,10,52,171},
{16,10,56,166},
{16,11,0,178},
{16,11,8,180},
{16,11,14,177},
{16,11,16,179},
{16,11,20,178},
{16,11,36,177},
{16,11,52,180},
{16,12,0,178},
{16,12,12,177},
{16,12,16,178},
{16,12,20,178},
{16,12,24,176},
{16,12,36,177},
{16,12,48,178},
{16,13,0,155},
{16,13,4,159},
{16,13,8,151},
{16,13,16,103},
{16,13,24,148},
{16,13,27,176},
{16,13,28,177},
{16,13,40,183},
{16,13,52,178},
{16,14,4,181},
{16,14,16,124},
{16,14,20,73},
{16,14,23,86},
{16,14,24,100},
{16,14,32,176},
{16,14,40,178},
{16,14,48,179},
{16,15,0,155},
{16,15,4,135},
{16,15,12,117},
{16,15,16,102},
{16,15,20,90},
{16,15,28,75},
{16,15,32,68},
{16,15,44,33},
{16,15,49,28},
{16,15,52,21},
{16,15,56,16},
{16,16,8,48},
{16,16,12,45},
{16,16,16,47},
{16,16,28,45},
{16,16,36,43},
{16,16,44,43},
{16,16,48,45},
{16,17,0,43},
{16,17,4,45},
{16,17,20,43},
{16,17,24,45},
{16,17,36,43},
{16,17,40,45},
{16,17,48,45},
{16,18,0,45},
{16,18,4,43},
{16,18,12,44},
{16,18,24,45},
{16,18,36,43},
{16,18,48,43},
{16,18,52,42},
{16,18,56,41},
{16,19,8,44},
{16,19,16,44},
{16,19,24,43},
{16,19,28,44},
{16,19,40,43},
{16,19,44,41},
{16,19,48,42},
{16,20,0,42},
{16,20,4,43},
{16,20,12,43},
{16,20,20,42},
{16,20,24,43},
{16,20,36,43},
{16,20,40,43},
{16,20,52,44},
{16,21,8,43},
{16,21,20,44},
{16,21,28,43},
{16,21,32,44},
{16,21,36,43},
{16,21,44,44},
{16,21,48,44},
{16,22,4,43},
{16,22,8,42},
{16,22,16,44},
{16,22,24,3},
{16,22,40,3},
// ...
{17,4,8,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
// ...
{17,6,56,3},
{17,7,8,3},
{17,7,20,5},
{17,7,24,7},
{17,7,25,8},
{17,7,32,14},
{17,7,48,24},
{17,7,56,22},
{17,8,0,21},
{17,8,8,30},
{17,8,20,47},
{17,8,24,46},
{17,8,32,53},
{17,8,48,56},
{17,8,52,64},
{17,9,0,57},
{17,9,12,55},
{17,9,24,54},
{17,9,36,49},
{17,9,40,54},
{17,9,52,58},
{17,9,56,62},
{17,10,4,83},
{17,10,12,137},
{17,10,20,145},
{17,10,24,147},
{17,10,40,87},
{17,10,44,171},
{17,10,52,175},
{17,10,56,158},
{17,11,0,153},
{17,11,16,170},
{17,11,24,166},
{17,11,36,51},
{17,11,44,56},
{17,11,49,103},
{17,11,52,93},
{17,12,8,179},
{17,12,20,173},
{17,12,28,123},
{17,12,40,86},
{17,12,44,106},
{17,12,56,182},
{17,13,0,177},
{17,13,8,170},
{17,13,12,169},
{17,13,16,182},
{17,13,28,176},
{17,13,32,181},
{17,13,44,180},
{17,13,56,180},
{17,14,4,148},
{17,14,8,101},
{17,14,20,119},
{17,14,24,82},
{17,14,40,122},
{17,14,52,101},
{17,15,4,108},
{17,15,12,110},
{17,15,16,108},
{17,15,28,93},
{17,15,36,51},
{17,15,40,40},
{17,15,56,23},
{17,16,0,21},
{17,16,3,19},
{17,16,12,16},
{17,16,16,15},
{17,16,20,15},
{17,16,40,14},
{17,16,48,14},
{17,16,52,15},
{17,16,56,3},
{17,17,0,3},
{17,17,16,3},
{17,17,24,3},
{17,17,36,3},
{17,17,48,3},
{17,17,56,3},
{17,18,4,3},
{17,18,12,3},
{17,18,32,3},
{17,18,44,3},
{17,18,56,37},
{17,19,4,46},
{17,19,16,44},
{17,19,28,44},
{17,19,40,43},
{17,19,52,44},
{17,20,0,44},
{17,20,8,43},
{17,20,16,43},
{17,20,28,43},
{17,20,36,45},
{17,20,44,45},
{17,20,56,44},
{17,21,8,45},
{17,21,12,43},
{17,21,20,43},
{17,21,36,45},
{17,21,52,43},
{17,22,8,45},
{17,22,20,3},
{17,22,32,3},
//
{18,4,40,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
// ...
{18,6,40,3},
{18,6,56,3},
{18,7,8,4},
{18,7,13,5},
{18,7,16,6},
{18,7,32,13},
{18,7,36,15},
{18,7,44,20},
{18,7,56,29},
{18,7,58,32},
{18,8,4,38},
{18,8,20,55},
{18,8,36,77},
{18,8,44,87},
{18,8,52,102},
{18,9,0,126},
{18,9,4,137},
{18,9,20,173},
{18,9,24,175},
{18,9,36,176},
{18,9,44,163},
{18,9,48,152},
{18,10,4,148},
{18,10,20,173},
{18,10,32,160},
{18,10,40,152},
{18,10,51,128},
{18,10,52,127},
{18,11,8,123},
{18,11,24,121},
{18,11,36,132},
{18,11,40,142},
{18,11,50,175},
{18,12,4,176},
{18,12,19,177},
{18,12,24,180},
{18,12,28,178},
{18,12,36,180},
{18,12,48,175},
{18,12,52,174},
{18,13,8,178},
{18,13,20,164},
{18,13,32,180},
{18,13,36,182},
{18,13,48,182},
{18,13,52,183},
{18,14,4,182},
{18,14,24,180},
{18,14,40,176},
{18,14,52,178},
{18,15,4,171},
{18,15,8,132},
{18,15,24,94},
{18,15,32,58},
{18,15,36,71},
{18,15,48,48},
{18,16,0,16},
{18,16,4,12},
{18,16,16,48},
{18,16,32,45},
{18,16,48,55},
{18,16,52,45},
{18,17,0,44},
{18,17,4,45},
{18,17,8,45},
{18,17,19,3},
{18,17,28,15},
{18,17,40,44},
{18,17,45,46},
{18,17,48,46},
{18,18,4,43},
{18,18,16,45},
{18,18,32,43},
{18,18,48,45},
{18,19,4,46},
{18,19,12,43},
{18,19,24,46},
{18,19,36,46},
{18,19,48,46},
{18,19,52,46},
{18,20,8,45},
{18,20,19,45},
{18,20,24,44},
{18,20,28,44},
{18,20,44,46},
{18,20,48,43},
{18,20,52,44},
{18,21,8,44},
{18,21,16,45},
{18,21,28,45},
{18,21,44,45},
{18,21,48,43},
{18,22,0,3},
{18,22,12,3},
// ...
{19,5,24,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
// ...
{19,7,24,3},
{19,7,40,3},
{19,7,52,30},
{19,8,0,38},
{19,8,12,41},
{19,8,20,46},
{19,8,36,54},
{19,8,52,65},
{19,9,4,87},
{19,9,8,99},
{19,9,20,139},
{19,9,32,122},
{19,9,44,124},
{19,10,0,149},
{19,10,4,165},
{19,10,12,171},
{19,10,28,115},
{19,10,40,107},
{19,10,44,143},
{19,10,56,156},
{19,11,5,165},
{19,11,8,137},
{19,11,20,170},
{19,11,24,174},
{19,11,36,176},
{19,11,48,173},
{19,12,0,178},
{19,12,12,178},
{19,12,32,179},
{19,12,44,172},
{19,12,48,174},
{19,12,56,178},
{19,13,8,176},
{19,13,12,174},
{19,13,20,176},
{19,13,32,180},
{19,13,40,180},
{19,13,52,179},
{19,14,0,178},
{19,14,4,177},
{19,14,16,154},
{19,14,24,127},
{19,14,44,63},
{19,15,0,56},
{19,15,12,43},
{19,15,13,41},
{19,15,32,27},
{19,15,44,15},
{19,15,48,12},
{19,16,0,6},
{19,16,4,5},
{19,16,16,3},
{19,16,24,3},
{19,16,36,3},
{19,16,48,3},
{19,16,56,15},
{19,17,4,15},
{19,17,12,15},
{19,17,24,16},
{19,17,32,16},
{19,17,44,3},
{19,17,56,44},
{19,18,1,45},
{19,18,8,45},
{19,18,16,45},
{19,18,28,46},
{19,18,40,45},
{19,18,48,46},
{19,18,56,47},
{19,19,12,47},
{19,19,20,45},
{19,19,28,45, occType::OCC_WEAK, false, true, ALDataSample::SB_NONEECO}, // TV watching, small or no setback.
{19,19,32,46},
{19,19,44,45},
{19,20,0,45},
{19,20,12,46},
{19,20,20,46, occType::OCC_WEAK, false, true, ALDataSample::SB_NONEECO}, // TV watching, small or no setback.
{19,20,32,43},
{19,20,36,45},
{19,20,48,44},
{19,20,59,44},
{19,21,12,3, occType::OCC_NONE, true},  // Dark, just vacated.
{19,21,28,16}, // Unusual lighting, ie not the 'habitual' level.
{19,21,40,14},
{19,21,44,15}, // FIXME  // Lights on, TV watching.
{19,21,52,15},
{19,22,4,15},
{19,22,16,15},
{19,22,32,15},
{19,22,48,15},
{19,23,0,16},
{19,23,4,15},
{19,23,8,15},
{19,23,24,15},
{19,23,40,16},
{19,23,52,15},
{20,0,0,15},
{20,0,12,16},
{20,0,16,15},
{20,0,28,15},
{20,0,32,16},
{20,0,40,16},
{20,0,48,15},
{20,1,0,15},
{20,1,8,15},
{20,1,24,16},
{20,1,28,15},
{20,1,37,15},
{20,1,52,3},
{20,2,4,3},
{20,2,16,3},
// ...
{20,5,52,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
// ...
{20,7,28,3},
{20,7,40,3},
{20,7,52,17},
{20,8,8,19},
{20,8,12,29},
{20,8,25,33},
{20,8,40,35},
{20,8,52,25},
{20,9,4,44},
{20,9,16,41},
{20,9,24,40},
{20,9,36,47},
{20,9,52,95},
{20,10,4,97},
{20,10,8,67},
{20,10,24,83},
{20,10,36,65},
{20,10,40,85},
{20,10,52,113},
{20,11,4,81},
{20,11,16,70},
{20,11,20,62},
{20,11,36,77},
{20,11,40,70},
{20,11,48,58},
{20,12,0,81},
{20,12,16,80},
{20,12,20,75},
{20,12,32,81},
{20,12,48,70},
{20,12,53,66},
{20,12,56,54},
{20,13,4,66},
{20,13,16,47},
{20,13,20,68},
{20,13,28,63},
{20,13,40,86},
{20,13,44,119},
{20,13,52,73},
{20,14,0,71},
{20,14,4,70},
{20,14,12,89},
{20,14,20,81},
{20,14,35,27},
{20,14,44,28},
{20,14,52,28},
{20,14,56,25},
{20,15,8,30},
{20,15,12,27},
{20,15,28,25},
{20,15,32,34},
{20,15,40,33},
{20,15,56,21},
{20,16,12,15},
{20,16,20,15},
{20,16,32,16},
{20,16,48,15},
{20,17,0,15},
{20,17,8,15},
{20,17,20,14},
{20,17,32,14},
{20,17,44,15},
{20,17,56,15},
{20,18,8,14},
{20,18,24,15},
{20,18,32,58},
{20,18,36,55},
{20,18,48,53},
{20,18,56,54},
{20,19,0,54},
{20,19,12,54},
{20,19,20,54},
{20,19,32,53},
{20,19,40,44},
{20,19,48,43},
{20,19,56,43},
{20,20,12,43},
{20,20,28,43},
{20,20,36,43},
{20,20,40,44},
{20,20,44,43},
{20,20,52,43},
{20,20,56,43},
{20,21,12,43},
{20,21,16,42},
{20,21,20,42},
{20,21,32,44},
{20,21,40,44},
{20,21,48,44},
{20,21,56,43},
{20,22,12,43},
{20,22,24,3},
{20,22,36,3},
// ...
{21,4,12,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
// ...
{21,7,4,3},
{21,7,23,3},
{21,7,32,4},
{21,7,44,5},
{21,7,48,6},
{21,8,0,9},
{21,8,12,33},
{21,8,16,39},
{21,8,28,35},
{21,8,44,55},
{21,8,56,88},
{21,9,12,89},
{21,9,22,111},
{21,9,24,131},
{21,9,32,123},
{21,9,48,75},
{21,9,56,63},
{21,10,0,55},
{21,10,16,30},
{21,10,28,65},
{21,10,32,47},
{21,10,52,49},
{21,11,4,38},
{21,11,8,58},
{21,11,20,56},
{21,11,36,68},
{21,11,48,51},
{21,12,0,19},
{21,12,8,18},
{21,12,12,23},
{21,12,24,20},
{21,12,40,13},
{21,12,48,46},
{21,12,56,25},
{21,13,9,18},
{21,13,16,16},
{21,13,19,19},
{21,13,32,20},
{21,13,36,34},
{21,13,44,177},
{21,14,0,175},
{21,14,12,148},
{21,14,16,170},
{21,14,24,178},
{21,14,28,157},
{21,14,32,178},
{21,14,48,175},
{21,14,52,176},
{21,15,4,169},
{21,15,24,39},
{21,15,40,19},
{21,15,56,56},
{21,16,8,47},
{21,16,12,45},
{21,16,20,46},
{21,16,32,16},
{21,16,44,3},
{21,16,56,16},
{21,17,12,3},
{21,17,32,3},
{21,17,44,3},
{21,17,55,3},
{21,18,4,3},
{21,18,24,3},
{21,18,36,3},
{21,18,48,3},
{21,19,8,16},
{21,19,28,45},
{21,19,32,46},
{21,19,40,46},
{21,19,44,44},
{21,19,48,45},
{21,20,4,46},
{21,20,20,46},
{21,20,24,47},
{21,20,28,46},
{21,20,40,44},
{21,20,48,45},
{21,20,56,46},
{21,21,16,46},
{21,21,28,46},
{21,21,44,45},
{21,21,48,46},
{21,21,56,46},
{21,22,4,3},
{21,22,16,3},
// ...
{22,5,24,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
// ...
{22,6,56,3},
{22,7,8,3},
{22,7,18,4},
{22,7,31,53},
{22,7,47,22},
{22,8,0,30},
{22,8,11,36},
{22,8,24,49},
{22,8,31,46},
{22,8,48,62},
{22,8,56,53},
{22,9,8,59},
{22,9,24,86},
{22,9,28,78},
{22,9,39,99},
{22,9,52,128},
{22,9,56,111},
{22,10,3,153},
{22,10,12,137},
{22,10,19,141},
{22,10,24,114},
{22,10,27,120},
{22,10,36,131},
{22,10,48,167},
{22,11,0,170},
{22,11,7,137},
{22,11,12,167},
{22,11,20,103},
{22,11,32,137},
{22,11,47,166},
{22,11,51,171},
{22,12,0,167},
{22,12,4,151},
{22,12,16,170},
{22,12,19,104},
{22,12,36,158},
{22,12,51,179},
{22,13,8,180},
{22,13,20,180},
{22,13,23,181},
{22,13,32,181},
{22,13,44,147},
{22,13,48,183},
{22,13,59,183},
{22,14,7,174},
{22,14,11,183},
{22,14,23,175},
{22,14,31,176},
{22,14,39,158},
{22,14,52,177},
{22,15,3,132},
{22,15,8,108},
{22,15,24,93},
{22,15,27,110},
{22,15,48,51},
{22,16,3,18},
{22,16,16,47},
{22,16,20,49},
{22,16,32,45},
{22,16,43,46},
{22,16,48,45},
{22,16,55,46},
{22,17,4,47},
{22,17,7,47},
{22,17,15,46},
{22,17,19,45},
{22,17,24,46},
{22,17,32,46},
{22,17,48,15},
{22,18,0,47},
{22,18,11,47},
{22,18,27,44},
{22,18,40,46},
{22,18,56,45},
{22,19,12,46},
{22,19,24,46},
{22,19,28,44},
{22,19,40,45},
{22,19,51,46},
{22,20,4,46},
{22,20,19,46},
{22,20,32,45},
{22,20,43,46},
{22,20,51,46},
{22,20,56,45},
{22,21,8,46},
{22,21,12,46},
{22,21,27,46},
{22,21,32,45},
{22,21,40,45},
{22,21,52,46},
{22,22,4,47},
{22,22,8,45},
{22,22,19,3},
{22,22,28,3},
// ...
{23,4,59,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
{23,5,7,3},
{23,5,11,2},
{23,5,20,3},
{23,5,31,3},
// ...
{23,6,59,3},
{23,7,8,3},
{23,7,24,4},
{23,7,35,5},
{23,7,48,9},
{23,7,51,10},
{23,8,0,13},
{23,8,15,21},
{23,8,27,32},
{23,8,43,60},
{23,8,59,81},
{23,9,11,103},
{23,9,27,117},
{23,9,35,117},
{23,9,39,122},
{23,9,55,112},
{23,10,7,131},
{23,10,23,127},
{23,10,40,175},
{23,10,51,178},
{23,11,4,162},
{23,11,12,175},
{23,11,16,173},
{23,11,40,178},
{23,11,52,164},
{23,12,7,176},
{23,12,15,171},
{23,12,20,170},
{23,12,39,176},
{23,13,11,178},
{23,13,28,176},
{23,13,39,147},
{23,13,48,104},
{23,13,59,107},
{23,14,11,114},
{23,14,13,113},
{23,14,19,95},
{23,14,31,86},
{23,14,40,50},
{23,14,47,55},
{23,14,54,38},
{23,14,55,36},
{23,14,59,25},
{23,15,3,17},
{23,15,19,12},
{23,15,31,8},
{23,15,43,6},
{23,16,0,5},
{23,16,3,6},
{23,16,11,5},
{23,16,27,3},
{23,16,39,45, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONEMIN}, // TV watching, small or no setback.
{23,16,53,46},
{23,16,59,47},
{23,17,7,47},
{23,17,12,46},
{23,17,28,47},
{23,17,39,46},
{23,17,55,47, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // Lights on, TV watching.  FIXME: should be seen as WEAK occupancy, small or no setback.
{23,18,8,45},
{23,18,15,47},
{23,18,19,44},
{23,18,23,45},
{23,18,35,45},
{23,18,55,45},
{23,19,8,47},
{23,19,11,44},
{23,19,23,45},
{23,19,32,44},
{23,19,35,44},
{23,19,47,46},
{23,19,59,46},
{23,20,19,44},
{23,20,31,46},
{23,20,43,46},
{23,20,47,44},
{23,20,59,46},
{23,21,19,44},
{23,21,31,44},
{23,21,35,46},
{23,21,47,44},
{23,22,3,44},
{23,22,7,46},
{23,22,19,3},
{23,22,35,3},
// ...
{24,5,11,3, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacant, running long enough for max setback.
// ...
{24,6,59,3, ALDataSample::NO_OCC_EXPECTATION, true, false, ALDataSample::SB_MAX}, // Dark, vacant, max setback.
{24,7,15,3, ALDataSample::NO_OCC_EXPECTATION, true, false}, // Dark, vacant.
{24,7,23,4},
{24,7,43,8},
{24,7,53,15},
{24,7,59,19},
{24,8,11,35},
{24,8,15,39},
{24,8,27,52},
{24,8,29,56},
{24,8,35,67},
{24,8,51,74},
{24,9,1,80, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Light but vacant.
{24,9,11,103},
{24,9,15,113},
{24,9,35,137},
{24,9,50,147},
{24,9,55,129},
{24,9,59,117},
{24,10,15,109, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Light but vacant.
{24,10,35,113},
{24,10,47,104},
{24,10,59,154},
{24,11,7,159, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Light but vacant.
{24,11,19,174},
{24,11,23,173},
{24,11,27,175},
{24,11,39,177},
{24,11,50,179},
{24,11,55,177},
{24,12,11,153, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Light but vacant.
{24,12,19,166},
{24,12,23,175},
{24,12,31,173},
{24,12,39,170},
{24,12,47,175},
{24,12,55,137},
{24,12,59,139},
{24,13,3,109, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Light but vacant.
{24,13,11,112},
{24,13,23,67},
{24,13,35,51},
{24,13,39,90},
{24,13,47,92},
{24,14,3,134, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Light but vacant.
{24,14,19,96},
{24,14,35,62},
{24,14,51,89},
{24,15,3,59, ALDataSample::NO_OCC_EXPECTATION, false, false, ALDataSample::SB_MINECO}, // Light but vacant.
{24,15,7,60},
{24,15,16,29},
{24,15,19,28},
{24,15,23,39},
{24,15,43,22},
{24,15,55,11},
{24,16,3,48, occType::OCC_PROBABLE, false, true, ALDataSample::SB_NONE}, // Lights on, TV watching.
{24,16,15,47},
{24,16,23,46, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN},
{24,16,31,43},
{24,16,43,46},
{24,16,51,46},
{24,17,3,43, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN},
{24,17,19,44},
{24,17,27,46},
{24,17,39,45},
{24,17,43,44, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN},
{24,17,47,46},
{24,17,59,46},
{24,18,15,46},
{24,18,27,45, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN},
{24,18,43,47},
{24,18,55,47},
{24,18,59,46},
{24,19,3,47, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN},
{24,19,15,44},
{24,19,19,46},
{24,19,23,46, occType::OCC_WEAK, false, true, ALDataSample::SB_NONEMIN}, // TV watching?
{24,19,39,44},
{24,19,55,46},
{24,20,3,45, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN},
{24,20,7,47},
{24,20,23,45, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN},
{24,20,27,44},
{24,20,39,46, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN},
{24,20,43,45},
{24,20,55,46, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN}, // occType::OCC_WEAK}, // TV watching?
{24,21,3,44},
{24,21,7,46},
{24,21,15,44},
{24,21,29,47, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONEMIN},
{24,21,35,46},
{24,21,47,46},
{24,21,55,46, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::SB_NONEMIN}, // occType::OCC_WEAK}, // TV watching?  FIXME: should show occupancy.
{24,22,7,47, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::SB_NONEMIN}, // occType::OCC_WEAK}, // TV watching?  FIXME: should show occupancy.
{24,22,11,46},
{24,22,15,3, ALDataSample::NO_OCC_EXPECTATION, true}, // Dark.
    { }
    };
// "3l" fortnight to 2016/11/24 looking for habitual artificial lighting to watch TV, etc.
// This is not especially intended to check response to other events, though will verify some key ones.
TEST(AmbientLightOccupancyDetection,sample3leveningTV)
{
    simpleDataSampleRun(sample3leveningTV);
}

// December: avoiding false triggering in a hallway.  (TODO-1085)
static const ALDataSample sample7h[] =
    {
{20,0,10,2, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX}, // Dark, vacanct, should have decent setback.
{20,0,15,2},
{20,0,26,2},
{20,0,35,2},
{20,0,51,2},
{20,1,2,3},
{20,1,7,2},
{20,1,19,2},
{20,1,34,2},
{20,1,51,2},
{20,2,7,2},
{20,2,22,2},
{20,2,34,2},
{20,2,50,2},
{20,3,7,2},
{20,3,23,2},
{20,3,36,2},
{20,3,51,2},
{20,4,5,2},
{20,4,19,2},
{20,4,35,2},
{20,4,43,3},
{20,4,51,2},
{20,5,3,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacanct, should have MAX setback.
{20,5,19,2},
{20,5,34,2},
{20,5,51,2},
{20,6,7,2},
{20,6,21,2},
{20,6,35,2},
{20,6,51,2},
{20,7,11,2},
{20,7,23,42},
{20,7,27,41},
{20,7,39,39},
{20,7,42,39},
{20,7,46,38},
{20,7,59,38},
{20,8,11,3},
{20,8,19,4},
{20,8,22,4},
{20,8,33,5},
{20,8,43,7},
{20,8,50,8},
{20,8,55,9},
{20,9,7,10},
{20,9,15,10},
{20,9,19,11},
{20,9,22,16},
{20,9,31,14},
{20,9,35,16},
{20,9,39,13},
{20,9,46,13},
{20,9,54,14},
{20,10,2,14},
{20,10,10,14},
{20,10,19,14},
{20,10,30,13},
{20,10,47,16},
{20,10,51,20},
{20,11,2,16},
{20,11,7,18},
{20,11,11,19},
{20,11,18,23},
{20,11,35,15},
{20,11,38,11},
{20,11,43,9},
{20,11,54,7},
{20,11,58,8},
{20,12,11,28},
{20,12,14,20},
{20,12,23,15},
{20,12,30,17},
{20,12,41,15},
{20,12,49,17},
{20,12,55,16},
{20,12,59,14},
{20,13,6,18},
{20,13,10,16},
{20,13,18,11},
{20,13,30,11},
{20,13,42,11},
{20,13,46,12},
{20,13,54,11},
{20,14,3,11},
{20,14,10,11},
{20,14,18,15},
{20,14,30,12},
{20,14,35,9},
{20,14,51,7},
{20,14,54,10},
{20,15,10,4},
{20,15,27,4},
{20,15,42,4},
{20,15,47,3},
{20,16,2,3},
{20,16,19,2},
{20,16,34,2},
{20,16,43,3},
{20,16,50,2},
{20,16,54,2},
{20,17,6,2},
{20,17,23,2},
{20,17,38,2},
{20,17,54,2},
{20,18,10,2},
{20,18,26,2},
{20,18,42,2},
{20,18,58,51},
{20,19,6,45},
{20,19,14,44},
{20,19,18,43},
{20,19,34,37},
{20,19,55,36},
{20,19,57,4},
{20,20,10,40},
{20,20,14,7},
{20,20,18,6},
{20,20,31,7},
{20,20,39,7},
{20,20,46,3},
{20,21,2,3},
{20,21,18,4},
{20,21,26,3},
{20,21,39,3},
{20,21,50,3},
{20,21,54,2},
{20,21,59,3},
{20,22,10,3},
{20,22,14,2},
{20,22,18,3},
{20,22,26,2},
{20,22,43,2},
{20,22,58,2},
{20,23,14,2},
{20,23,30,2},
{20,23,46,2},
{20,23,58,2},
{21,0,14,2, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX}, // Dark, vacanct, should have decent setback.
{21,0,30,2},
{21,0,42,2},
{21,0,58,2},
{21,1,14,2},
{21,1,30,2},
{21,1,46,2},
{21,2,3,2},
{21,2,18,2},
{21,2,34,2},
{21,2,54,2},
{21,3,10,2},
{21,3,26,2},
{21,3,38,2},
{21,3,54,2},
{21,4,7,2},
{21,4,22,2},
{21,4,38,2},
{21,4,58,2},
{21,5,10,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacanct, should have MAX setback.
{21,5,22,2},
{21,5,39,2},
{21,5,57,2},
{21,6,6,2},
{21,6,18,2},
{21,6,34,2},
{21,6,49,2},
{21,6,50,3},
{21,6,54,2},
{21,7,2,2},
{21,7,16,43},
{21,7,30,41},
{21,7,34,39},
{21,7,50,38},
{21,8,2,8},
{21,8,9,3},
{21,8,10,3},
{21,8,27,6},
{21,8,34,5},
{21,8,38,6},
{21,8,46,5},
{21,8,50,6},
{21,8,59,6},
{21,9,3,5},
{21,9,11,5},
{21,9,22,7},
{21,9,26,8},
{21,9,30,6},
{21,9,43,7},
{21,9,46,5},
{21,9,58,6},
{21,10,6,9},
{21,10,14,10},
{21,10,25,8},
{21,10,38,11},
{21,10,42,14},
{21,10,46,13},
{21,10,58,15},
{21,11,2,12},
{21,11,14,11},
{21,11,18,13},
{21,11,22,14},
{21,11,34,13},
{21,11,38,14},
{21,11,42,15},
{21,11,50,9},
{21,12,6,17},
{21,12,10,14},
{21,12,22,19},
{21,12,30,19},
{21,12,41,19},
{21,12,43,19},
{21,12,50,15},
{21,12,58,17},
{21,13,14,27},
{21,13,31,13},
{21,13,34,14},
{21,13,38,13},
{21,13,42,56},
{21,13,50,51},
{21,13,54,11},
{21,14,10,11},
{21,14,17,6},
{21,14,26,7},
{21,14,42,7},
{21,14,46,6},
{21,14,59,7},
{21,15,2,9},
{21,15,10,8},
{21,15,18,4},
{21,15,30,4},
{21,15,46,3},
{21,16,2,3},
{21,16,18,3},
{21,16,33,42},
{21,16,38,12},
{21,16,50,39},
{21,16,54,39},
{21,16,58,3},
{21,17,10,43},
{21,17,14,42},
{21,17,30,38},
{21,17,34,38},
{21,17,38,3},
{21,17,46,3},
{21,18,2,43},
{21,18,19,3},
{21,18,22,3},
{21,18,38,41},
{21,18,46,40},
{21,18,50,39},
{21,18,58,38},
{21,19,2,38},
{21,19,18,6},
{21,19,22,7},
{21,19,38,39},
{21,19,50,39},
{21,19,54,3},
{21,20,10,3},
{21,20,26,3},
{21,20,42,41},
{21,20,46,3},
{21,20,54,2},
{21,21,2,3},
{21,21,14,2},
{21,21,22,3},
{21,21,34,3},
{21,21,38,2},
{21,21,42,3},
{21,21,54,3},
{21,22,10,2},
{21,22,14,3},
{21,22,26,3},
{21,22,42,3},
{21,22,58,3},
{21,23,10,3},
{21,23,14,2},
{21,23,18,3},
{21,23,30,3},
{21,23,42,3},
{21,23,50,2},
{21,23,58,3},
{22,0,2,3, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX}, // Dark, vacanct, should have decent setback.
{22,0,18,3},
{22,0,30,2},
{22,0,50,2},
{22,0,58,2},
{22,1,6,3},
{22,1,14,2},
{22,1,30,2},
{22,1,46,2},
{22,2,2,2},
{22,2,6,3},
{22,2,14,2},
{22,2,22,2},
{22,2,38,2},
{22,2,54,2},
{22,3,10,2},
{22,3,26,2},
{22,3,42,2},
{22,3,54,2},
{22,4,10,2},
{22,4,26,2},
{22,4,42,2},
{22,4,58,2},
{22,5,14,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacanct, should have MAX setback.
{22,5,30,2},
{22,5,46,2},
{22,6,2,3},
{22,6,6,2},
{22,6,22,2},
{22,6,32,2},
{22,6,46,2},
{22,7,2,2},
{22,7,22,3},
{22,7,26,2},
{22,7,38,2},
{22,7,50,3},
{22,7,58,3},
{22,8,10,3},
{22,8,26,4},
{22,8,30,5},
{22,8,34,6},
{22,8,38,5},
{22,8,45,6},
{22,8,46,6},
{22,9,2,10},
{22,9,10,12},
{22,9,18,10},
{22,9,26,9},
{22,9,34,11},
{22,9,38,11},
{22,9,42,15},
{22,9,54,13},
{22,10,2,14},
{22,10,10,11},
{22,10,14,11},
{22,10,22,11},
{22,10,27,14},
{22,10,38,11},
{22,10,42,12},
{22,10,50,11},
{22,10,58,11},
{22,11,10,14},
{22,11,27,14},
{22,11,38,24},
{22,11,42,27},
{22,11,50,20},
{22,12,6,18},
{22,12,13,19},
{22,12,22,16},
{22,12,26,15},
{22,12,30,14},
{22,12,38,13},
{22,12,54,11},
{22,13,10,11},
{22,13,26,14},
{22,13,38,18},
{22,13,58,14},
{22,14,2,14},
{22,14,6,13},
{22,14,14,14},
{22,14,22,12},
{22,14,30,18},
{22,14,46,17},
{22,14,50,16},
{22,14,58,13},
{22,15,10,7},
{22,15,15,7},
{22,15,22,6},
{22,15,30,5},
{22,15,34,5},
{22,15,38,4},
{22,15,47,3},
{22,16,1,46},
{22,16,6,46},
{22,16,18,42},
{22,16,22,41},
{22,16,26,39},
{22,16,38,40},
{22,16,50,42},
{22,16,58,38},
{22,17,2,38},
{22,17,6,39},
{22,17,14,38},
{22,17,30,38},
{22,17,50,3},
{22,17,54,39},
{22,18,10,42},
{22,18,18,38},
{22,18,30,38},
{22,18,46,38},
{22,19,2,38},
{22,19,18,38},
{22,19,22,37},
{22,19,34,37},
{22,19,50,37},
{22,20,10,37},
{22,20,22,37},
{22,20,42,37},
{22,20,54,37},
{22,21,2,13},
{22,21,10,42},
{22,21,14,42},
{22,21,18,38},
{22,21,26,3},
{22,21,34,3},
{22,21,46,2},
{22,21,50,3},
{22,21,58,3},
{22,22,10,3},
{22,22,26,3},
{22,22,42,3},
{22,22,58,3},
{22,23,14,3},
{22,23,34,3},
{22,23,50,3},
{22,23,58,2},
{23,0,10,3, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX}, // Dark, vacanct, should have decent setback.
{23,0,14,2},
{23,0,23,2},
{23,0,38,2},
{23,0,54,2},
{23,0,58,3},
{23,1,10,2},
{23,1,26,2},
{23,1,42,2},
{23,1,58,2},
{23,2,14,2},
{23,2,30,2},
{23,2,46,2},
{23,3,2,2},
{23,3,18,2},
{23,3,34,2},
{23,3,50,2},
{23,4,6,2},
{23,4,18,2},
{23,4,38,2},
{23,4,54,2},
{23,5,6,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacanct, should have MAX setback.
{23,5,19,2},
{23,5,34,2},
{23,5,50,2},
{23,6,2,2},
{23,6,18,2},
{23,6,31,2},
{23,6,46,2},
{23,7,2,2},
{23,7,18,2},
{23,7,34,3},
{23,7,38,2},
{23,7,50,3},
{23,8,10,4},
{23,8,14,3},
{23,8,22,4},
{23,8,38,6},
{23,8,46,6},
{23,8,58,8},
{23,9,13,11},
{23,9,22,13},
{23,9,25,12},
{23,9,36,10},
{23,9,38,12},
{23,9,46,9},
{23,9,54,11},
{23,9,58,12},
{23,10,6,20},
{23,10,14,13},
{23,10,18,14},
{23,10,22,22},
{23,10,34,25},
{23,10,38,21},
{23,10,42,16},
{23,10,53,10},
{23,11,2,8}, // Vacant
{23,11,10,7},
{23,11,18,7},
{23,11,24,6},
{23,11,26,6},
{23,11,34,7},
{23,11,50,8},
{23,11,54,9},
{23,12,1,7},
{23,12,6,6},
{23,12,15,8},
{23,12,34,12},
{23,12,42,9},
{23,12,50,7},
{23,12,54,8},
{23,13,6,9},
{23,13,10,8},
{23,13,18,10},
{23,13,26,12},
{23,13,34,8},
{23,13,42,8},
{23,13,54,8},
{23,14,2,7},
{23,14,10,6},
{23,14,18,8},
{23,14,22,6},
{23,14,30,6},
{23,14,38,6},
{23,14,50,4},
{23,14,58,4},
{23,15,7,4, ALDataSample::NO_OCC_EXPECTATION, true, false, ALDataSample::SB_ECOMAX}, // Vacant, dark: a decent setback should be in place.
{23,15,14,5},
{23,15,18,4},
{23,15,26,4},
{23,15,34,3},
{23,15,46,3},
{23,16,0,2},
{23,16,6,3},
{23,16,14,2, ALDataSample::NO_OCC_EXPECTATION, true, false, ALDataSample::SB_MINMAX}, // Vacant, dark: a setback should be in place.
{23,16,26,40}, // Reoccupied
{23,16,42,43, ALDataSample::NO_OCC_EXPECTATION, false, true, ALDataSample::SB_NONE},
{23,16,50,39},
{23,17,2,37},
{23,17,18,38},
{23,17,22,39},
{23,17,38,38},
{23,17,46,41},
{23,17,58,41},
{23,18,14,36},
{23,18,26,36},
{23,18,42,36},
{23,18,58,35},
{23,19,2,36},
{23,19,14,36},
{23,19,30,39},
{23,19,36,41},
{23,19,42,41},
{23,19,46,41},
{23,20,2,30},
{23,20,14,36},
{23,20,26,36},
{23,20,34,36},
{23,20,50,36},
{23,21,3,40},
{23,21,18,41},
{23,21,22,40},
{23,21,26,4},
{23,21,30,5},
{23,21,34,5},
{23,21,42,4},
{23,21,54,5},
{23,22,6,4},
{23,22,10,5},
{23,22,18,4},
{23,22,26,5},
{23,22,38,3},
{23,22,54,3},
{23,23,14,3},
{23,23,26,3},
{23,23,42,3},
{23,23,58,3},
{24,0,14,3, occType::OCC_NONE, true, false, ALDataSample::SB_ECOMAX}, // Dark, vacanct, should have decent setback.
{24,0,22,2},
{24,0,30,2},
{24,0,34,3},
{24,0,38,2},
{24,0,50,2},
{24,1,6,2},
{24,1,22,2},
{24,1,38,2},
{24,1,54,2},
{24,2,7,2},
{24,2,22,2},
{24,2,38,2},
{24,2,54,2},
{24,3,10,2},
{24,3,26,2},
{24,3,42,2},
{24,3,58,2},
{24,4,14,2},
{24,4,30,2},
{24,4,46,2},
{24,5,2,2, occType::OCC_NONE, true, false, ALDataSample::SB_MAX}, // Dark, vacanct, should have MAX setback.
{24,5,18,2},
{24,5,34,2},
{24,5,50,2},
{24,6,6,2},
{24,6,22,2},
{24,6,38,2},
{24,6,54,2},
{24,7,7,2},
{24,7,22,2},
{24,7,38,2},
{24,7,46,3},
{24,7,54,3},
{24,8,10,4},
{24,8,14,5},
{24,8,18,4},
{24,8,21,3},
{24,8,26,42},
{24,8,34,4},
{24,8,42,5},
{24,8,58,5},
{24,9,2,6},
{ },
    };
// "7k" 2016/12/20--24 hallway.
// Was showing (on TRV1.5-RC3b release) false occupancy 23th ~11:00--16:00.
// Some features of ambient light seen by this unit:
//   * Daylight is less bright than artificial, at least in this sample.
//   * There is lots of light-on activity for transient occupancy.
TEST(AmbientLightOccupancyDetection,sample7h)
{
    simpleDataSampleRun(sample7h);
}

// Some more real Autumn UK (north London) data samples.
static const ALDataSample samplea0[] =
    {
{14,11,6,182},
{14,11,22,181},
{14,11,38,183},
{14,11,42,183},
{14,11,50,183},
{14,11,57,183},
{14,12,10,182, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC},
{14,12,21,183},
{14,12,26,183},
{14,12,38,182},
{14,12,54,183},
{14,13,10,183},
{14,13,21,182},
{14,13,34,182},
{14,13,42,183},
{14,13,47,183},
{14,13,58,182},
{14,14,10,180},
{14,14,18,180},
{14,14,23,182},
{14,14,26,182},
{14,14,42,182},
{14,14,54,182},
{14,15,6,182},
{14,15,26,180},
{14,15,30,179},
{14,15,42,180},
{14,15,54,179},
{14,16,10,150},
{14,16,22,116},
{14,16,29,104},
{14,16,45,179},
{14,16,54,183},
{14,16,58,181},
{14,17,2,183},
{14,17,6,182},
{14,17,14,182},
{14,17,26,6},
{14,17,38,4},
{14,17,42,32},
{14,17,58,31},
{14,18,2,30},
{14,18,14,15},
{14,18,30,31},
{14,18,42,33},
{14,18,58,19},
{14,19,14,18},
{14,19,30,18},
{14,19,33,17},
{14,19,41,13},
{14,19,53,19},
{14,19,58,11},
{14,20,22,18},
{14,20,38,19},
{14,20,50,18},
{14,21,6,20},
{14,21,22,21},
{14,21,34,19},
{14,21,46,19},
{14,21,58,19},
{14,22,14,19},
{14,22,21,19},
{14,22,34,19},
{14,22,38,19},
{14,22,49,19},
{14,23,6,18},
{14,23,10,4},
{14,23,17,4},
{14,23,26,4},
{14,23,34,4},
{14,23,46,4},
{15,0,2,4},
{15,0,18,4},
{15,0,26,4},
{15,0,42,4},
{15,1,2,4},
{15,1,10,4},
{15,1,17,4},
{15,1,26,4},
{15,1,33,4},
{15,1,42,4},
{15,1,58,4},
{15,2,9,4},
{15,2,18,4},
{15,2,30,4},
{15,2,42,4},
{15,2,50,4},
{15,3,13,4},
{15,3,22,4},
{15,3,37,4, ALDataSample::NO_OCC_EXPECTATION, true, false, ALDataSample::SB_MAX},
{15,3,59,26},
{15,4,9,14},
{15,4,26,4},
{15,4,34,4},
{15,4,45,4},
{15,4,58,4},
{15,5,7,4},
{15,5,21,4},
{15,5,30,4},
{15,5,42,4},
{15,5,58,4},
{15,6,5,4},
{15,6,14,5, ALDataSample::NO_OCC_EXPECTATION, true, false, ALDataSample::SB_MINMAX},
{15,6,21,8},
{15,6,25,11},
{15,6,30,16},
{15,6,38,26},
{15,6,42,36},
{15,6,45,39},
{15,6,50,38},
{15,7,2,42},
{15,7,22,136},
{15,7,26,148},
{15,7,33,174},
{15,7,38,176},
{15,7,42,176},
{15,7,57,178},
{15,7,59,178},
{15,8,10,178},
{15,8,21,177},
{15,8,29,176},
{15,8,41,174},
{15,8,58,178},
{15,9,10,181},
{15,9,13,181},
{15,9,26,181},
{15,9,41,182},
{15,9,50,181},
{15,9,54,180},
{15,10,9,176},
{15,10,21,179},
{15,10,26,182},
{15,10,38,182},
{15,10,50,181},
{15,11,1,183},
{15,11,6,184},
{15,11,8,183},
{15,11,17,184},
{15,11,25,182},
{15,11,30,183},
{15,11,42,184},
{15,11,49,182},
{15,11,50,183},
{15,12,1,182, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC},
{15,12,10,182},
{15,12,17,183},
{15,12,21,184},
{15,12,34,183},
{15,12,37,183},
{15,12,48,181},
{15,12,57,183},
{15,13,1,181},
{15,13,7,181},
{15,13,17,179},
{15,13,21,181},
{15,13,37,184},
{15,13,41,183},
{15,13,46,181},
{15,13,57,183},
{15,14,9,182},
{15,14,13,182},
{15,14,29,181},
{15,14,37,181},
{15,14,45,184},
{15,14,50,181},
{15,15,6,179},
{15,15,9,182},
{15,15,18,181},
{15,15,26,180},
{15,15,29,179},
{15,15,45,125},
{15,15,57,182},
{15,16,13,180},
{15,16,21,183},
{15,16,33,182},
{15,16,45,182},
{15,16,57,181},
{15,17,9,183},
{15,17,13,182},
{15,17,25,182},
{15,17,33,41},
{15,17,41,41},
{15,17,45,40},
{15,17,53,75},
{15,18,13,34},
{15,18,25,33},
{15,18,33,29},
{15,18,53,32},
{15,19,9,32},
{15,19,29,31},
{15,19,33,32},
{15,19,41,31},
{15,19,58,32},
{15,20,9,33},
{15,20,17,34},
{15,20,25,34},
{15,20,37,33},
{15,20,50,32},
{15,20,57,32},
{15,21,10,32},
{15,21,21,31},
{15,21,29,36},
{15,21,33,28},
{15,21,53,32},
{15,22,5,31},
{15,22,21,13},
{15,22,38,13},
{15,22,53,12},
{15,23,2,13},
{15,23,22,4},
{15,23,30,4},
{15,23,57,4},
{16,0,10,4},
{16,0,25,4},
{16,0,37,4},
{16,0,49,4},
{16,1,1,4},
{16,1,13,4},
{16,1,38,4},
{16,2,1,4},
{16,2,17,4},
{16,2,29,4},
{16,2,45,4},
{16,3,1,4},
{16,3,13,4},
{16,3,19,4},
{16,3,33,4},
{16,3,49,4},
{16,4,25,4},
{16,4,57,4},
{16,5,13,4},
{16,5,25,4},
{16,5,37,4},
{16,5,45,4},
{16,5,57,4},
{16,6,9,4},
{16,6,25,181},
{16,6,38,23},
{16,6,49,19},
{16,6,54,15},
{16,6,57,18},
{16,7,9,26},
{16,7,21,33},
{16,7,26,29},
{16,7,29,38},
{16,7,33,43},
{16,7,42,75},
{16,7,49,81},
{16,7,53,87},
{16,7,57,112},
{16,8,5,105},
{16,8,9,67},
{16,8,21,95},
{16,8,46,91},
{16,8,49,74},
{16,9,1,67},
{16,9,13,179},
{16,9,33,180},
{16,9,37,181},
{16,9,45,175},
{16,9,49,179},
{16,10,5,181},
{16,10,19,182},
{16,10,21,181},
{16,10,33,183},
{16,10,45,183},
{16,10,49,183},
{16,10,57,182},
{16,11,9,181},
{16,11,25,179},
{16,11,29,182},
{16,11,37,183},
{16,11,45,182},
{16,11,49,183},
{16,12,1,183, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC},
{16,12,13,183},
{16,12,33,183},
{16,12,41,183},
{16,12,53,182},
{16,12,57,184},
{16,13,13,182},
{16,13,21,182},
{16,13,33,183},
{16,13,41,184},
{16,13,53,180},
{16,13,57,179},
{16,14,5,180},
{16,14,17,179},
{16,14,21,179},
{16,14,33,178},
{16,14,37,181},
{16,14,53,183},
{16,14,57,180},
{16,15,1,178},
{16,15,17,183},
{16,15,21,182},
{16,15,29,178},
{16,15,37,168},
{16,15,45,177},
{16,15,57,175},
{16,16,9,140},
{16,16,13,170},
{16,16,17,151},
{16,16,25,116},
{16,16,33,132},
{16,16,37,133},
{16,16,41,96},
{16,16,49,64},
{16,17,1,38},
{16,17,5,31},
{16,17,17,28},
{16,17,21,24},
{16,17,29,29},
{16,17,41,35},
{16,17,45,37},
{16,17,53,35},
{16,18,5,55},
{16,18,7,37},
{16,18,17,37},
{16,18,21,36},
{16,18,29,36},
{16,18,41,32},
{16,19,1,27},
{16,19,17,53},
{16,19,25,27},
{16,19,41,27},
{16,19,53,28},
{16,20,4,27},
{16,20,5,28},
{16,20,13,27},
{16,20,25,26},
{16,20,29,27},
{16,20,37,27},
{16,20,49,23},
{16,21,1,4},
{16,21,17,4},
{16,21,29,4},
{16,21,41,4},
{16,21,53,4},
{16,22,5,4},
{16,22,13,4},
{16,22,25,4},
{16,22,37,4},
{16,22,49,4},
{16,22,53,4},
{16,23,5,4},
{16,23,15,4},
{16,23,33,4},
{16,23,49,4},
{16,23,57,4},
{17,0,9,4},
{17,0,25,4},
{17,0,37,4},
{17,1,41,4},
{17,1,53,4},
{17,2,5,4},
{17,2,17,4},
{17,2,29,4},
{17,2,53,4},
{17,3,5,4},
{17,3,45,4},
{17,3,57,4},
{17,4,9,4},
{17,4,29,4},
{17,5,1,4},
{17,5,9,4},
{17,5,21,4},
{17,5,33,4},
{17,5,49,4},
{17,6,1,183},
{17,6,5,183},
{17,6,13,183},
{17,6,21,176},
{17,6,25,181},
{17,6,41,181},
{17,6,55,182},
{17,6,57,181},
{17,7,9,120},
{17,7,21,166},
{17,7,41,172},
{17,7,53,177},
{17,7,57,178},
{17,8,5,178},
{17,8,21,177},
{17,8,33,179},
{17,8,37,180},
{17,8,53,179},
{17,8,57,179},
{17,9,1,178},
{17,9,13,179},
{17,9,17,176},
{17,9,29,177},
{17,9,45,178},
{17,9,49,177},
{17,10,1,179},
{17,10,9,180},
{17,10,13,181},
{17,10,25,180},
{17,10,33,180},
{17,10,49,180},
{17,11,0,183},
{17,11,1,181},
{17,11,5,182},
{17,11,21,182},
{17,11,29,181},
{17,11,33,179},
{17,11,45,181},
{17,11,53,183},
{17,11,57,181},
{17,12,5,182},
{17,12,9,182},
{17,12,21,184},
{17,12,22,184},
{17,12,37,182},
{17,12,41,183},
{17,12,57,183},
{17,13,1,184},
{17,13,17,183},
{17,13,21,181},
{17,13,33,183},
{17,13,37,184},
{17,13,49,182},
{17,14,1,183},
{17,14,5,182},
{17,14,25,183},
{17,14,41,181},
{17,14,45,183},
{17,14,49,182},
{17,14,57,182},
{17,15,3,182},
{17,15,13,180},
{17,15,17,181},
{17,15,25,182},
{17,15,37,178},
{17,15,41,180},
{17,15,49,175},
{17,15,57,123},
{17,16,5,92},
{17,16,9,59},
{17,16,13,77},
{17,16,29,108},
{17,16,33,69},
{17,16,49,60},
{17,16,53,53},
{17,17,1,47},
{17,17,13,183},
{17,17,21,183},
{17,17,49,182},
{17,17,57,181},
{17,18,1,183},
{17,18,9,183},
{17,18,17,181},
{17,18,21,183},
{17,18,41,179},
{17,18,53,178},
{17,19,9,179},
{17,19,21,180},
{17,19,29,177},
{17,19,33,176},
{17,19,41,179},
{17,19,53,181},
{17,19,57,182},
{17,20,5,182},
{17,20,13,15},
{17,20,25,15},
{17,20,41,15},
{17,21,1,13},
{17,21,13,4},
{17,21,25,4},
{17,21,37,4},
{17,21,53,4},
{17,22,9,4},
{17,22,25,4},
{17,22,41,4},
{17,22,57,4},
{17,23,13,4},
{17,23,29,4},
{17,23,49,4},
{18,0,1,4},
{18,0,9,4},
{18,0,17,4},
{18,0,29,4},
{18,0,45,4},
{18,0,57,4},
{18,1,5,4},
{18,1,17,4},
{18,1,27,4},
{18,1,41,4},
{18,1,57,4},
{18,2,21,4},
{18,2,42,4},
{18,2,53,4},
{18,3,9,4},
{18,3,37,4},
{18,3,49,4},
{18,4,1,4},
{18,4,21,4},
{18,4,29,4},
{18,4,49,4},
{18,5,5,183},
{18,5,21,183},
{18,5,33,183},
{18,5,45,181},
{18,5,57,182},
{18,6,9,181},
{18,6,25,178},
{18,6,41,182},
{18,6,45,180},
{18,6,57,181},
{18,7,5,181},
{18,7,9,180},
{18,7,25,99},
{18,7,37,104},
{18,8,1,153},
{18,8,5,124},
{18,8,17,149},
{18,8,21,110},
{18,8,29,118},
{18,8,37,175},
{18,8,45,180},
{18,8,53,179},
{18,8,57,179},
{18,9,1,181},
{18,9,9,181},
{18,9,21,181},
{18,9,33,180},
{18,9,49,180},
{18,10,1,179},
{18,10,13,181},
{18,10,17,182},
{18,10,33,180},
{18,10,45,181},
{18,10,53,178},
{18,11,5,182},
{18,11,9,180},
{18,11,21,182},
{18,11,33,179},
{18,11,45,179},
{18,12,1,181},
{18,12,13,181},
{18,12,21,182},
{18,12,33,182},
{18,12,49,181},
{18,12,57,183},
{18,13,1,181},
{18,13,13,181},
{18,13,25,181},
{18,13,29,182},
{18,13,33,183},
{18,13,37,182},
{18,13,49,181},
{18,14,1,179},
{18,14,5,180},
{18,14,9,180},
{18,14,17,179},
{18,14,25,180},
{18,14,29,182},
{18,14,41,180},
{18,14,49,177},
{18,14,53,175},
{18,15,5,174},
{18,15,37,175},
{18,15,53,179},
{18,16,13,114},
{18,16,17,111},
{18,16,25,80},
{18,16,33,66},
{18,16,37,55},
{18,16,57,25},
{18,17,5,24},
{18,17,13,10},
{18,17,25,5},
{18,17,37,183},
{18,17,49,183},
{18,18,5,180},
{18,18,9,182},
{18,18,25,181},
{18,18,37,181},
{18,18,47,182},
{18,18,49,179},
{18,19,5,179},
{18,19,9,182},
{18,19,21,180},
{18,19,33,22},
{18,19,37,22},
{18,19,49,20},
{18,19,53,21},
{18,20,13,20},
{18,20,29,21},
{18,20,45,21},
{18,20,53,21},
{18,21,5,20},
{18,21,17,22},
{18,21,29,4},
{18,21,45,4},
{18,21,57,4},
{18,22,5,4},
{18,22,17,4},
{18,22,25,4},
{18,22,37,4},
{18,22,53,4},
{18,23,13,4},
{18,23,45,4},
{18,23,57,4},
{19,0,10,4},
{19,0,19,4},
{19,0,33,179},
{19,0,45,4},
{19,0,53,4},
{19,1,5,4},
{19,1,13,4},
{19,1,29,4},
{19,1,53,4},
{19,1,59,4},
{19,2,17,4},
{19,2,37,4},
{19,2,49,4},
{19,3,29,4},
{19,3,45,4},
{19,4,1,4},
{19,4,9,4},
{19,4,25,4},
{19,4,33,4},
{19,4,45,4},
{19,5,13,177},
{19,5,17,183},
{19,5,25,183},
{19,5,29,180},
{19,5,45,21},
{19,5,57,20},
{19,6,5,20},
{19,6,17,20},
{19,6,21,22},
{19,6,29,36},
{19,6,41,47},
{19,6,53,71},
{19,6,57,65},
{19,7,13,109},
{19,7,17,113},
{19,7,25,140},
{19,7,37,164},
{19,7,41,164},
{19,8,1,174},
{19,8,9,173},
{19,8,21,176},
{19,8,33,179},
{19,8,45,180},
{19,8,49,181},
{19,9,1,177},
{19,9,21,182},
{19,9,33,182},
{19,9,41,182},
{19,9,53,182},
{19,10,1,183},
{19,10,5,183},
{19,10,17,183},
{19,10,25,183},
{19,10,41,183},
{19,10,57,183},
{19,11,13,183},
{19,11,25,183},
{19,11,33,184},
{19,11,37,183},
{19,11,53,182},
{19,11,57,181},
{19,12,1,181},
{19,12,5,182},
{19,12,25,181},
{19,12,29,182},
{19,12,32,183},
{19,12,37,183},
{19,12,49,183},
{19,13,1,182},
{19,13,13,182},
{19,13,17,183},
{19,13,25,183},
{19,13,33,183},
{19,13,34,182},
{19,13,41,183},
{19,13,45,182},
{19,13,49,181},
{19,13,57,177},
{19,14,5,180},
{19,14,21,109},
{19,14,37,182},
{19,14,45,183},
{19,14,53,181},
{19,14,57,174},
{19,15,9,177},
{19,15,17,181},
{19,15,25,179},
{19,15,37,175},
{19,15,41,159},
{19,15,45,141},
{19,15,57,80},
{19,16,9,75},
{19,16,13,183},
{19,16,33,108},
{19,16,45,129},
{19,16,49,139},
{19,16,54,107},
{19,17,6,116},
{19,17,17,117},
{19,17,29,75},
{19,17,33,110},
{19,17,45,123},
{19,18,5,147},
{19,18,13,118},
{19,18,29,109},
{19,18,33,113},
{19,18,45,136},
{19,18,57,109},
{19,19,1,108},
{19,19,17,110},
{19,19,21,101},
{19,19,33,10},
{19,19,45,8},
{19,19,57,9},
{19,20,1,10},
{19,20,17,11},
{19,20,21,10},
{19,20,25,7},
{19,20,37,10},
{19,20,41,10},
{19,20,57,9},
{19,21,9,24},
{19,21,17,17},
{19,21,25,16},
{19,21,37,47},
{19,21,49,4},
{19,22,1,4},
{19,22,5,10},
{19,22,13,4},
{19,22,25,4},
{19,22,45,4},
{19,23,1,4},
{19,23,13,4},
{19,23,29,4},
{19,23,44,4},
{19,23,53,4},
{20,0,5,4},
{20,0,21,4},
{20,0,37,4},
{20,0,49,4},
{20,1,16,4},
{20,1,29,4},
{20,1,49,4},
{20,1,57,4},
{20,2,1,4},
{20,2,17,4},
{20,2,33,4},
{20,2,45,4},
{20,2,53,4},
{20,3,1,4},
{20,3,9,4},
{20,3,25,4},
{20,3,33,4},
{20,3,45,4},
{20,3,57,4},
{20,4,9,4},
{20,4,21,4},
{20,4,37,4},
{20,4,53,4},
{20,5,9,4},
{20,5,21,4},
{20,5,33,4},
{20,5,53,183},
{20,6,5,181},
{20,6,9,183},
{20,6,17,182},
{20,6,29,183},
{20,6,33,181},
{20,6,47,180},
{20,7,1,181},
{20,7,9,180},
{20,7,13,183},
{20,7,29,181},
{20,7,33,183},
{20,7,37,183},
{20,7,53,183},
{20,8,5,184},
{20,8,17,178},
{20,8,45,179},
{20,8,59,181},
{20,9,5,182},
{20,9,17,181},
{20,9,21,180},
{20,9,33,183},
{20,9,49,183},
{20,9,53,181},
{20,10,1,183},
{20,10,5,181},
{20,10,17,183},
{20,10,21,179},
{20,10,37,183},
{20,10,41,184},
{20,10,53,183},
{20,11,5,182},
{20,11,9,179},
{20,11,17,180},
{20,11,21,180},
{20,11,33,182},
{20,11,37,179},
{20,11,49,183},
{20,11,53,183},
{20,12,5,183},
{20,12,13,183},
{20,12,21,183},
{20,12,29,184},
{20,12,37,185},
{20,12,41,183},
{20,12,45,182},
{20,12,53,184},
{20,13,5,183},
{20,13,13,183},
{20,13,17,181},
{20,13,25,181},
{20,13,33,182},
{20,13,37,179},
{20,13,45,181},
{20,13,49,180},
{20,13,53,179},
{20,13,57,181},
{20,14,9,183},
{20,14,17,181},
{20,14,33,182},
{20,14,45,182},
{20,14,49,181},
{20,14,53,182},
{20,15,5,182},
{20,15,13,143},
{20,15,17,44},
{20,15,21,79},
{20,15,33,137},
{20,15,45,63},
{20,15,49,82},
{20,15,57,100},
{20,16,1,108},
{20,16,9,85},
{20,16,17,92},
{20,16,21,79},
{20,16,29,88},
{20,16,37,68},
{20,16,41,53},
{20,16,45,41},
{20,16,49,36},
{20,17,1,18},
{20,17,17,179},
{20,17,28,182},
{20,17,33,180},
{20,17,45,182},
{20,17,49,182},
{20,18,1,179},
{20,18,13,182},
{20,18,25,182},
{20,18,37,179},
{20,18,41,181},
{20,18,53,182},
{20,18,57,181},
{20,19,9,182},
{20,19,21,180},
{20,19,25,182},
{20,19,41,183},
{20,19,57,182},
{20,20,9,181},
{20,20,13,182},
{20,20,29,180},
{20,20,48,182},
{20,20,57,182},
{20,21,9,180},
{20,21,17,182},
{20,21,29,183},
{20,21,33,180},
{20,21,41,183},
{20,21,53,4},
{20,22,5,4},
{20,22,17,4},
{20,22,33,4},
{20,22,45,4},
{20,22,49,4},
{20,23,5,4},
{20,23,17,4},
{20,23,25,4},
{20,23,37,4},
{20,23,53,4},
{21,0,9,4},
{21,0,25,4},
{21,0,33,4},
{21,0,45,4},
{21,0,57,4},
{21,1,13,4},
{21,1,25,4},
{21,1,49,4},
{21,2,5,4},
{21,2,13,4},
{21,2,25,4},
{21,2,37,4},
{21,2,49,4},
{21,2,57,4},
{21,3,9,4},
{21,3,25,4},
{21,3,41,4},
{21,3,53,4},
{21,4,5,4},
{21,4,21,4},
{21,4,37,4},
{21,4,57,4},
{21,5,9,4},
{21,5,25,4},
{21,5,37,4},
{21,5,53,4},
{21,6,5,4},
{21,6,25,7},
{21,6,45,16},
{21,6,49,20},
{21,6,57,24},
{21,7,9,50},
{21,7,13,76},
{21,7,21,62},
{21,7,33,77},
{21,7,45,144},
{21,7,57,177},
{21,8,5,177},
{21,8,13,179},
{21,8,25,179},
{21,8,41,180},
{21,8,57,180},
{21,9,13,180},
{21,9,23,181},
{21,9,25,182},
{21,9,41,183},
{21,11,1,183},
{21,11,9,184},
{21,11,13,183},
{21,11,25,183},
{21,11,37,183},
{21,11,45,184},
{21,11,49,184},
{21,12,5,184},
{21,12,13,183},
{21,12,18,183},
{21,12,21,184},
{21,12,29,184},
{21,12,33,184},
{21,12,49,183},
{21,12,51,184},
{21,12,57,184},
{21,13,5,183},
{21,13,17,183},
{21,13,33,183},
{21,13,57,183},
{21,14,9,184},
{21,14,13,184},
{21,14,21,182},
{21,14,25,129},
{21,14,37,172},
{21,14,41,175},
{21,14,45,161},
{21,14,50,152},
{21,14,51,153},
{21,14,53,140},
{21,15,5,156},
{21,15,9,157},
{21,15,17,179},
{21,15,29,181},
{21,15,41,177},
{21,15,49,176},
{21,15,53,175},
{21,16,9,95},
{21,16,13,84},
{21,16,19,60},
{21,16,29,181},
{21,16,45,10},
{21,16,49,9},
{21,16,57,7},
{21,17,9,5},
{21,17,21,183},
{21,17,33,180},
{21,17,37,182},
{21,17,45,178},
{21,18,1,16},
{21,18,17,181},
{21,18,33,18},
{21,18,41,13},
{21,18,49,14},
{21,19,1,14},
{21,19,5,27},
{21,19,17,16},
{21,19,25,17},
{21,19,36,183},
{21,19,37,182},
{21,19,49,17},
{21,20,1,15},
{21,20,5,14},
{21,20,21,21},
{21,20,37,21},
{21,20,41,22},
{21,20,53,21},
{21,21,9,20},
{21,21,13,20},
{21,21,21,20},
{21,21,22,21},
{21,21,37,21},
{21,21,45,20},
{21,21,57,20},
{21,22,5,20},
{21,22,17,29},
{21,22,25,4},
{21,22,41,4},
{21,22,57,4},
{21,23,9,4},
{21,23,25,4},
{21,23,33,4},
{21,23,49,4},
{22,0,5,4},
{22,0,21,4},
{22,0,29,4},
{22,0,37,4},
{22,0,45,4},
{22,0,57,4},
{22,1,8,4},
{22,1,17,4},
{22,1,29,4},
{22,1,37,4},
{22,1,49,4},
{22,2,1,4},
{22,2,13,4},
{22,2,25,4},
{22,2,41,4},
{22,2,57,4},
{22,3,5,4},
{22,3,12,4},
{22,3,24,4},
{22,3,41,4},
{22,3,57,4},
{22,4,25,4},
{22,4,49,4},
{22,5,21,4},
{22,5,29,4},
{22,5,37,4},
{22,5,49,4},
{22,6,1,4},
{22,6,17,4},
{22,6,29,181},
{22,6,35,182},
{22,6,41,181},
{22,6,49,183},
{22,7,9,78},
{22,7,13,86},
{22,7,21,102},
{22,7,32,145},
{22,7,44,164},
{22,8,0,176},
{22,8,9,179},
{22,8,21,179},
{22,8,33,181},
{22,8,49,179},
{22,9,5,180},
{22,9,17,176},
{22,9,21,177},
{22,9,29,181},
{22,9,41,182},
{22,9,48,182},
{22,10,0,183},
{22,10,17,182},
{22,10,38,183},
{22,10,52,182},
{22,11,4,182},
{22,11,17,182},
{22,11,24,181},
{22,11,29,183},
{22,11,41,181},
{22,11,53,182},
{22,12,5,180},
{22,12,17,175},
{22,12,29,183},
{22,12,37,181},
{22,12,40,182},
{22,12,49,182},
{22,13,1,183},
{22,13,16,181},
{22,13,21,182},
{22,13,29,179},
{22,13,37,180},
{22,13,41,181},
{22,14,8,183},
{22,14,23,182},
{22,14,28,183},
{22,14,45,182},
{22,14,56,179},
{22,15,0,174},
{22,15,13,177},
{22,15,25,180},
{22,15,28,181},
{22,15,37,180},
{22,15,41,179},
{22,15,45,176},
{22,15,56,145},
{22,16,1,133},
{22,16,5,124},
{22,16,9,121},
{22,16,17,84},
{22,16,25,59},
{22,16,29,52},
{22,16,33,47},
{22,16,49,182},
{22,16,53,17},
{22,16,56,13},
{22,17,9,182},
{22,17,17,4},
{22,17,24,182},
{22,17,29,36},
{22,17,36,41},
{22,17,49,183},
{22,17,58,179},
{22,18,1,182},
{22,18,40,4},
{22,18,53,182},
{22,18,57,179},
{22,19,9,4},
{22,19,20,4},
{22,19,32,4},
{22,19,41,4},
{22,19,49,4},
{22,19,56,4},
{22,20,26,4},
{22,20,41,4},
{22,20,50,4},
{22,21,20,4},
{22,21,40,4},
{22,21,53,4},
{22,22,0,4},
{22,22,16,4},
{22,22,32,4},
{22,22,49,4},
{22,23,16,4},
{22,23,29,4},
{22,23,41,4},
{22,23,52,4},
{23,0,5,4},
{23,0,16,4},
{23,0,28,4},
{23,0,41,4},
{23,0,52,4},
{23,1,4,4},
{23,1,12,4},
{23,1,17,4},
{23,1,25,4},
{23,1,44,4},
{23,1,57,4},
{23,2,13,4},
{23,2,28,4},
{23,2,48,4},
{23,3,1,4},
{23,3,16,4},
{23,3,29,4},
{23,3,40,4},
{23,3,56,4},
{23,4,8,4},
{23,4,25,4},
{23,4,52,4},
{23,4,59,4},
{23,5,6,4},
{23,5,21,4},
{23,5,37,4},
{23,5,52,4},
{23,6,4,4},
{23,6,12,4},
{23,6,20,5},
{23,6,24,5},
{23,6,44,18},
{23,6,52,26},
{23,7,0,34},
{23,7,16,50},
{23,7,24,73},
{23,7,53,143},
{23,8,5,97},
{23,8,13,101},
{23,8,17,103},
{23,8,20,104},
{23,8,28,116},
{23,8,33,119},
{23,8,52,175},
{23,9,0,178},
{23,9,8,177},
{23,9,12,166},
{23,9,28,176},
{23,9,53,178},
{23,10,1,178},
{23,10,4,178},
{23,10,16,178},
{23,10,25,180},
{23,10,37,181},
{23,10,48,182},
{23,11,0,183},
{23,11,10,181},
{23,11,16,183},
{23,11,24,182},
{23,11,29,183},
{23,11,40,182},
{23,12,9,182},
{23,12,16,182},
{23,12,20,183},
{23,12,28,182},
{23,12,37,183},
{23,12,44,183},
{23,12,54,183},
{23,13,13,183},
{23,13,16,182},
{23,13,28,180},
{23,13,33,181},
{23,13,44,181},
{23,13,56,182},
{23,14,1,181},
{23,14,12,179},
{23,14,16,179},
{23,14,28,182},
{23,14,36,181},
{23,14,41,180},
{23,14,56,182},
{23,15,0,181},
{23,15,8,181},
{23,15,12,179},
{23,15,16,180},
{23,15,24,181},
{23,15,36,178},
{23,15,40,176},
{23,15,44,177},
{23,16,0,137},
{23,16,4,66},
{23,16,32,33},
{23,16,40,25},
{23,16,56,9},
{23,17,9,5},
{23,17,24,4},
{23,17,44,4},
{23,17,52,4},
{23,18,4,4},
{23,18,16,4},
{23,18,28,4},
{23,18,36,4},
{23,18,49,4},
{23,18,56,16},
{23,19,4,20},
{23,19,8,20},
{23,19,20,22},
{23,19,32,22},
{23,19,52,22},
{23,20,0,21},
{23,20,21,20},
{23,20,28,21},
{23,20,36,21},
{23,20,44,21},
{23,20,53,21},
{23,21,1,20},
{23,21,4,21},
{23,21,20,21},
{23,21,29,22},
{23,21,48,22},
{23,22,0,20},
{23,22,13,4},
{23,22,28,4},
{23,22,40,4},
{23,22,56,4},
{23,23,8,4},
{23,23,20,4},
{23,23,36,4},
{23,23,44,4},
{23,23,56,4},
{24,0,8,4},
{24,0,20,4},
{24,0,32,4},
{24,0,47,4},
{24,1,0,4},
{24,1,16,4},
{24,1,36,4},
{24,1,48,4},
{24,1,56,4},
{24,2,6,4},
{24,2,28,4},
{24,2,40,4},
{24,2,52,4},
{24,3,4,4},
{24,3,37,4},
{24,3,48,4},
{24,4,0,4},
{24,4,13,4},
{24,4,32,4},
{24,4,44,4},
{24,5,0,4},
{24,5,24,4},
{24,5,40,4},
{24,5,44,4},
{24,5,56,4},
{24,6,8,4},
{24,6,24,4},
{24,6,36,6},
{24,6,44,7},
{24,6,52,9},
{24,6,56,11},
{24,7,8,24},
{24,7,12,22},
{24,7,20,25},
{24,7,36,64},
{24,7,44,63},
{24,7,58,90},
{24,8,12,108},
{24,8,20,176},
{24,8,28,177},
{24,8,40,175},
{24,9,12,180},
{24,9,16,179},
{24,9,24,180},
{24,9,28,182},
{24,9,32,182},
{24,9,48,182},
{24,10,20,183},
{24,10,32,182},
{24,10,36,182},
{24,11,0,181},
{24,11,4,180},
{24,11,16,177},
{24,11,24,179},
{24,11,28,181},
{24,11,40,181},
{24,12,16,182},
{24,12,44,183},
{24,12,52,182},
{24,13,7,183},
{24,13,16,182},
{24,13,24,183},
{24,13,32,182},
{24,13,40,181},
{24,13,56,182},
{24,14,8,181},
{24,14,12,182},
{24,14,24,182},
{24,14,36,176},
{24,14,40,174},
{24,14,52,167},
{24,15,0,164},
{24,15,4,159},
{24,15,8,161},
{24,15,16,144},
{24,15,24,166},
{24,15,32,168},
{24,15,44,137},
{24,15,56,95},
{24,16,12,58},
{24,16,24,78},
{24,16,32,38},
{24,16,36,67},
{24,17,12,180},
{24,17,40,183},
{24,18,12,183},
{24,18,24,183},
{24,18,44,4},
{24,18,56,4},
{24,19,8,4},
{24,19,20,4},
{24,19,32,4},
{24,19,48,4},
{24,20,8,4},
{24,20,24,4},
{24,20,36,4},
{24,20,48,4},
{24,21,0,4},
{24,21,16,178},
{24,21,28,4},
{24,21,48,4},
{24,22,4,179},
{24,22,9,182},
{24,22,16,168},
{24,22,24,4},
{24,23,12,4},
{24,23,24,4},
{24,23,36,4},
{24,23,48,4},
{25,0,4,4},
{25,0,20,4},
{25,0,36,4},
{25,0,48,4},
{25,1,4,4},
{25,1,28,4},
{25,1,44,4},
{25,2,16,4},
{25,2,24,4},
{25,2,32,4},
{25,2,40,4},
{25,2,52,4},
{25,3,0,4},
{25,3,24,4},
{25,3,36,4},
{25,3,47,4},
{25,3,52,4},
{25,4,8,4},
{25,4,28,4},
{25,4,44,4},
{25,4,56,4, ALDataSample::NO_OCC_EXPECTATION, true, false, ALDataSample::SB_ECOMAX},
{ },
    };
static const ALDataSample samplea0b[] =
    {
{8,7,10,181},
{8,7,22,181},
{8,7,30,181},
{8,7,59,183},
{8,8,6,181},
{8,8,19,183},
{8,8,30,158},
{8,8,46,119},
{8,9,39,177},
{8,9,54,179},
{8,10,10,181},
{8,10,14,182},
{8,10,18,182},
{8,10,34,183},
{8,11,2,183},
{8,11,14,183},
{8,11,18,183},
{8,11,34,183},
{8,11,42,183},
{8,11,58,183},
{8,12,10,183, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC},
{8,12,18,183},
{8,12,26,183},
{8,12,38,183},
{8,12,48,183},
{8,12,54,183},
{8,13,6,183},
{8,13,18,183},
{8,13,26,182},
{8,13,38,183},
{8,13,50,183},
{8,14,44,178},
{8,14,54,179},
{8,15,26,140},
{8,16,6,24},
{8,16,14,14},
{8,16,26,181},
{8,16,38,180},
{8,16,58,182},
{8,17,10,181},
{8,17,22,183},
{8,17,30,181},
{8,17,34,181},
{8,17,42,183},
{8,17,58,180},
{8,18,10,182},
{8,18,14,15},
{8,18,22,14},
{8,18,34,14},
{8,18,46,182},
{8,18,58,12},
{8,19,10,12},
{8,19,22,14},
{8,19,38,14},
{8,19,54,14},
{8,20,6,13},
{8,20,18,13},
{8,20,34,15},
{8,20,46,13},
{8,20,58,13},
{8,20,59,11},
{8,21,10,13},
{8,21,22,13},
{8,21,38,13},
{8,21,51,13},
{8,21,58,14},
{8,22,2,13},
{8,22,18,13},
{8,22,26,13},
{8,22,34,13},
{8,22,44,13},
{8,22,54,13},
{8,23,6,11},
{8,23,10,4},
{8,23,38,4},
{8,23,50,4},
{9,0,10,4},
{9,0,18,4},
{9,0,26,4},
{9,0,38,4},
{9,0,54,4},
{9,1,6,4},
{9,1,18,4},
{9,1,30,4},
{9,1,46,4},
{9,2,2,4},
{9,2,10,4},
{9,2,24,4},
{9,2,42,4},
{9,2,54,4},
{9,3,2,4},
{9,3,18,4},
{9,3,26,4},
{9,3,42,4},
{9,3,58,4},
{9,4,6,4},
{9,4,15,4, occType::OCC_NONE, true, false, ALDataSample::SB_MAX},
{9,4,26,4},
{9,4,42,4},
{9,4,50,4},
{9,4,58,4},
{9,5,14,4},
{9,5,26,4},
{9,5,42,4},
{9,5,58,4},
{9,6,6,4},
{9,6,18,4},
{9,6,30,4},
{9,6,42,183},
{9,6,54,182},
{9,6,58,180},
{9,7,14,181},
{9,7,26,183},
{9,7,38,183},
{9,7,42,183},
{9,7,58,182},
{9,8,15,179},
{9,8,22,180},
{9,8,26,182},
{9,8,42,84},
{9,8,54,86},
{9,8,58,106},
{9,9,6,117},
{9,9,22,168},
{9,9,30,116},
{9,9,42,114},
{9,9,54,171},
{9,10,14,125},
{9,10,26,124},
{9,10,34,173},
{9,10,38,146},
{9,10,46,146},
{9,10,54,175},
{9,10,58,178},
{9,11,10,182},
{9,11,14,183},
{9,11,23,180},
{9,11,38,177},
{9,11,50,131},
{9,11,54,111},
{9,12,6,175},
{9,12,18,180},
{9,12,22,181},
{9,12,26,182},
{9,12,34,183},
{9,12,46,181},
{9,12,50,179},
{9,13,2,183},
{9,13,6,182},
{9,13,18,178},
{9,13,22,181},
{9,13,38,181},
{9,13,42,173},
{9,13,54,181},
{9,14,6,181},
{9,14,10,182},
{9,14,22,181},
{9,14,26,178},
{9,14,42,171},
{9,14,46,158},
{9,14,58,181},
{9,15,2,180},
{9,15,4,180},
{9,15,6,179},
{9,15,14,180},
{9,15,18,179},
{9,15,30,83},
{9,15,39,107},
{9,15,46,68},
{9,15,50,66},
{9,15,58,67},
{9,16,6,54},
{9,16,10,30},
{9,16,14,27},
{9,16,22,17},
{9,16,30,9},
{9,16,34,7},
{9,16,38,6},
{9,16,58,175},
{9,17,6,177},
{9,17,14,183},
{9,17,26,179},
{9,17,38,180},
{9,17,42,180},
{9,17,54,180},
{9,18,6,183},
{9,18,22,4},
{9,18,42,181},
{9,18,58,179},
{9,19,14,182},
{9,19,22,181},
{9,19,26,42},
{9,19,38,180},
{9,19,46,182},
{9,19,58,182},
{9,20,6,179},
{9,20,10,180},
{9,20,14,179},
{9,20,26,182},
{9,20,30,183},
{9,20,34,180},
{9,20,50,181},
{9,21,22,181},
{9,21,26,183},
{9,21,34,27},
{9,21,46,28},
{9,21,50,12},
{9,21,58,29},
{9,22,6,4},
{9,22,10,4},
{9,22,18,4},
{9,22,26,4},
{9,22,38,129},
{9,22,42,4},
{9,22,50,4},
{9,23,2,4},
{9,23,10,4},
{9,23,26,4},
{9,23,38,183},
{9,23,50,4},
{10,0,2,4},
{10,0,14,4},
{10,0,26,4},
{10,1,6,4},
{10,1,18,4},
{10,1,26,4},
{10,1,38,4},
{10,1,54,4},
{10,2,2,4},
{10,2,10,4},
{10,2,26,4},
{10,2,42,4},
{10,2,58,4},
{10,3,14,4},
{10,3,22,4},
{10,3,38,4},
{10,3,50,4},
{10,4,2,4, ALDataSample::NO_OCC_EXPECTATION, true, false, ALDataSample::SB_MAX},
{10,4,22,4},
{10,4,34,4},
{10,4,46,4},
{10,4,58,4},
{10,5,10,4},
{10,5,22,4},
{10,5,26,4},
{10,5,42,4},
{10,5,58,4},
{10,6,10,4},
{10,6,20,4},
{10,6,30,4},
{10,6,42,183},
{10,6,58,183},
{10,7,2,182},
{10,7,6,182},
{10,7,14,183},
{10,7,30,184},
{10,7,42,182},
{10,7,50,184},
{10,8,2,183},
{10,8,10,184},
{10,8,22,166},
{10,8,34,171},
{10,8,38,179},
{10,8,50,180},
{10,8,54,179},
{10,8,58,180},
{10,9,14,182},
{10,9,18,181},
{10,9,26,177},
{10,9,38,179},
{10,9,54,181},
{10,9,58,179},
{10,10,6,182},
{10,10,14,182},
{10,10,26,182},
{10,10,34,182},
{10,10,42,183},
{10,10,46,183},
{10,10,58,183},
{10,11,14,183},
{10,11,26,183},
{10,11,38,183},
{10,11,50,183},
{10,12,2,183, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC},
{10,12,14,184},
{10,12,26,182},
{10,12,34,183},
{10,12,46,181},
{10,12,50,183},
{10,12,54,183},
{10,13,14,179},
{10,13,22,179},
{10,13,30,177},
{10,13,38,176},
{10,13,46,143},
{10,13,54,138},
{10,14,13,175},
{10,14,18,179},
{10,14,30,175},
{10,14,38,149},
{10,14,42,130},
{10,14,46,122},
{10,14,54,130},
{10,14,58,122},
{10,15,2,119},
{10,15,18,113},
{10,15,27,145},
{10,15,30,135},
{10,15,34,161},
{10,15,54,69},
{10,16,2,58},
{10,16,6,52},
{10,16,16,32},
{10,16,18,29},
{10,16,26,16},
{10,16,38,181},
{10,16,50,183},
{10,16,58,181},
{10,17,10,20},
{10,17,14,21},
{10,17,22,17},
{10,17,34,19},
{10,17,38,19},
{10,17,50,20},
{10,18,2,180},
{10,18,6,21},
{10,18,14,22},
{10,18,26,22},
{10,18,34,21},
{10,18,38,22},
{10,18,50,182},
{10,18,58,181},
{10,19,6,181},
{10,19,10,182},
{10,19,22,182},
{10,19,30,138},
{10,19,38,80},
{10,19,50,179},
{10,19,54,182},
{10,20,2,182},
{10,20,14,180},
{10,20,26,26},
{10,20,30,25},
{10,20,38,26},
{10,20,50,26},
{10,20,54,13},
{10,21,10,16},
{10,21,18,17},
{10,21,22,16},
{10,21,34,16},
{10,21,38,17},
{10,21,46,16},
{10,21,54,17},
{10,22,2,16},
{10,22,6,16},
{10,22,14,16},
{10,22,20,17},
{10,22,22,16},
{10,22,38,16},
{10,22,50,17},
{10,22,54,17},
{10,22,58,16},
{10,23,6,17},
{10,23,22,16},
{10,23,30,16},
{10,23,38,17},
{10,23,42,16},
{10,23,46,17},
{10,23,54,17},
{11,0,2,16},
{11,0,6,16},
{11,0,18,16},
{11,0,22,16},
{11,0,30,16},
{11,0,34,17},
{11,0,42,17},
{11,0,46,17},
{11,1,2,17},
{11,1,18,17},
{11,1,22,16},
{11,1,34,17},
{11,1,46,16},
{11,1,54,16},
{11,1,58,16},
{11,2,6,16},
{11,2,22,17},
{11,2,26,16},
{11,2,30,16},
{11,2,42,16},
{11,2,54,16},
{11,3,2,17},
{11,3,14,17},
{11,3,22,17},
{11,3,30,16},
{11,3,42,16},
{11,3,50,16},
{11,3,58,16},
{11,4,2,16},
{11,4,14,16},
{11,4,22,16},
{11,4,26,16},
{11,4,38,16},
{11,4,46,17},
{11,4,54,17},
{11,5,6,16},
{11,5,14,16},
{11,5,26,16},
{11,5,30,17},
{11,5,38,17},
{11,5,46,16},
{11,5,50,16},
{11,5,58,16},
{11,6,5,16},
{11,6,6,17},
{11,6,10,17},
{11,6,22,17},
{11,6,30,16},
{11,6,34,16},
{11,6,46,17},
{11,6,58,35},
{11,7,2,27},
{11,7,14,37},
{11,7,26,61},
{11,7,30,68},
{11,7,42,89},
{11,7,50,103},
{11,7,54,109},
{11,8,6,130},
{11,8,14,143},
{11,8,18,151},
{11,8,30,154},
{11,8,34,159},
{11,8,38,151},
{11,8,50,172},
{11,8,54,173},
{11,9,2,176},
{11,9,14,178},
{11,9,26,179},
{11,9,38,179},
{11,9,50,178},
{11,9,58,178},
{11,10,10,178},
{11,10,18,178},
{11,10,30,179},
{11,10,38,179},
{11,10,50,179},
{11,10,58,179},
{11,11,6,179},
{11,11,22,179},
{11,11,34,179},
{11,11,46,179},
{11,11,58,178},
{11,12,6,180, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC},
{11,12,18,180},
{11,12,30,180},
{11,12,46,180},
{11,13,2,178},
{11,13,14,177},
{11,13,30,178},
{11,13,34,177},
{11,13,42,177},
{11,13,54,176},
{11,13,58,176},
{11,14,6,176},
{11,14,22,175},
{11,14,34,172},
{11,14,38,160},
{11,14,42,159},
{11,14,46,161},
{11,14,54,143},
{11,15,2,135},
{11,15,10,154},
{11,15,14,122},
{11,15,18,104},
{11,15,26,82},
{11,15,34,69},
{11,15,38,62},
{11,15,39,60},
{11,15,46,52},
{11,15,54,44},
{ },
    };
static const ALDataSample samplea1[] =
    {
{14,11,1,181, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC},
{14,11,20,178},
{14,11,32,177},
{14,11,34,178},
{14,11,40,177},
{14,12,0,177},
{14,12,13,174},
{14,12,25,176},
{14,12,33,173},
{14,12,40,164},
{14,12,53,151},
{14,12,56,155},
{14,13,9,122},
{14,13,20,123},
{14,13,24,129},
{14,13,36,133},
{14,13,48,102},
{14,14,0,99},
{14,14,20,118},
{14,14,28,117},
{14,14,33,117},
{14,14,36,115},
{14,14,49,119},
{14,14,56,121},
{14,14,58,119},
{14,15,4,108},
{14,15,12,87},
{14,15,16,72},
{14,15,29,58},
{14,15,32,61},
{14,15,36,65},
{14,15,44,68},
{14,15,57,51},
{14,16,0,47},
{14,16,9,38},
{14,16,13,36},
{14,16,24,26},
{14,16,32,24},
{14,16,40,20},
{14,16,44,15},
{14,17,4,12},
{14,17,13,9},
{14,17,16,9},
{14,17,28,8},
{14,17,40,8},
{14,17,44,9},
{14,17,56,8},
{14,18,12,15},
{14,18,24,15},
{14,18,40,9},
{14,18,57,9},
{14,19,0,8},
{14,19,9,9},
{14,19,20,9},
{14,19,29,9},
{14,19,40,9},
{14,19,44,9},
{14,20,0,9},
{14,20,7,9},
{14,20,16,9},
{14,20,28,9},
{14,20,36,9},
{14,20,53,9},
{14,21,16,9},
{14,21,32,9},
{14,21,48,9},
{14,22,0,8},
{14,22,12,8},
{14,22,21,8},
{14,22,32,8},
{14,22,44,8},
{14,23,0,8},
{14,23,16,8},
{14,23,28,8},
{14,23,32,8},
{14,23,44,8},
{14,23,56,8},
{15,0,13,8},
{15,0,32,8},
{15,0,48,8},
{15,1,4,8},
{15,1,15,8},
{15,1,32,8},
{15,1,44,8},
{15,1,56,8},
{15,2,8,8},
{15,2,20,8},
{15,2,28,8},
{15,2,44,8},
{15,3,4,8},
{15,3,12,8},
{15,3,28,8},
{15,3,36,8},
{15,3,44,8},
{15,3,52,8},
{15,4,12,8, ALDataSample::NO_OCC_EXPECTATION, true, false, ALDataSample::SB_MAX},
{15,4,24,8},
{15,4,40,8},
{15,4,48,8},
{15,4,58,8},
{15,5,12,8},
{15,5,24,8},
{15,5,36,8},
{15,5,48,8},
{15,6,4,8},
{15,6,12,9},
{15,6,20,9},
{15,6,24,10},
{15,6,32,16},
{15,6,36,18},
{15,6,40,29},
{15,6,48,44},
{15,7,4,31},
{15,7,16,59},
{15,7,20,63},
{15,7,28,85},
{15,7,40,157},
{15,7,52,178},
{15,7,56,178},
{15,8,32,182},
{15,8,44,179},
{15,8,56,46},
{15,9,0,49},
{15,9,12,77},
{15,9,24,120},
{15,9,32,79},
{15,9,44,170},
{15,9,52,148},
{15,10,4,74},
{15,10,20,26},
{15,10,24,61},
{15,10,32,98},
{15,10,44,46},
{15,10,48,78},
{15,10,52,118},
{15,10,56,109},
{15,11,4,165},
{15,11,8,179},
{15,11,20,147},
{15,11,24,123},
{15,11,28,141},
{15,11,32,124},
{15,11,44,178},
{15,11,48,179},
{15,12,0,181},
{15,12,20,165},
{15,12,32,183},
{15,12,44,162},
{15,12,56,161},
{15,13,0,177},
{15,13,8,178},
{15,13,16,94},
{15,13,20,89},
{15,13,24,80},
{15,13,28,70},
{15,13,44,166},
{15,13,48,126},
{15,13,52,119},
{15,13,56,96},
{15,14,12,113},
{15,14,16,121},
{15,14,28,88},
{15,14,32,78},
{15,14,44,129},
{15,14,48,93},
{15,14,56,83},
{15,15,4,82},
{15,15,12,74},
{15,15,24,62},
{15,15,28,60},
{15,15,32,38},
{15,15,40,25},
{15,15,48,19},
{15,15,52,17},
{15,15,56,19},
{15,16,4,18},
{15,16,16,14},
{15,16,20,15},
{15,16,28,18},
{15,16,36,11},
{15,16,40,10},
{15,16,48,8},
{15,16,52,8},
{15,17,8,8},
{15,17,20,36},
{15,17,28,36},
{15,17,32,36},
{15,17,40,38},
{15,17,52,36},
{15,17,56,39},
{15,18,6,39},
{15,18,20,38},
{15,18,32,38},
{15,18,36,39},
{15,18,52,38},
{15,18,56,39},
{15,19,4,38},
{15,19,16,39},
{15,19,28,39},
{15,19,36,38},
{15,19,40,34},
{15,19,56,38},
{15,20,12,37},
{15,20,28,38},
{15,20,40,38},
{15,20,52,37},
{15,20,56,37},
{15,21,8,10},
{15,21,16,10},
{15,21,32,10},
{15,21,44,10},
{15,21,56,10},
{15,22,8,10},
{15,22,24,10},
{15,22,40,10},
{15,22,56,10},
{15,23,4,10},
{15,23,16,10},
{15,23,32,10},
{15,23,40,10},
{15,23,48,10},
{15,23,56,10},
{16,0,8,10},
{16,0,20,10},
{16,0,40,10},
{16,0,56,10},
{16,1,8,10},
{16,1,24,10},
{16,1,40,10},
{16,1,52,10},
{16,2,4,10},
{16,2,16,10},
{16,2,28,10},
{16,2,36,10},
{16,2,48,10},
{16,3,0,10},
{16,3,12,10},
{16,3,28,10},
{16,3,40,10},
{16,3,56,10},
{16,4,4,10},
{16,4,16,10},
{16,4,28,10},
{16,4,48,10},
{16,5,0,10},
{16,5,12,10},
{16,5,28,10},
{16,5,40,10},
{16,5,52,10},
{16,6,24,8},
{16,6,28,8},
{16,6,40,8},
{16,7,8,10},
{16,7,36,15},
{16,7,40,16},
{16,7,44,17},
{16,7,48,17},
{16,7,52,18},
{16,8,4,18},
{16,8,8,15},
{16,8,44,18},
{16,8,48,15},
{16,8,56,18},
{16,9,4,15},
{16,9,8,29},
{16,9,12,33},
{16,9,20,38},
{16,9,28,38},
{16,9,32,33},
{16,9,41,37},
{16,9,44,38},
{16,9,48,43},
{16,9,56,74},
{16,10,8,107},
{16,10,12,102},
{16,10,24,177},
{16,10,36,109},
{16,10,44,163},
{16,10,56,182},
{16,11,0,172},
{16,11,8,175},
{16,11,20,181},
{16,11,24,172},
{16,11,36,178},
{16,11,37,173},
{16,11,44,181},
{16,11,48,177},
{16,11,56,180},
{16,12,0,181},
{16,12,12,181},
{16,12,24,181},
{16,12,28,182},
{16,12,48,76},
{16,13,0,177},
{16,13,4,183},
{16,13,12,179},
{16,13,16,176},
{16,13,28,167},
{16,13,32,114},
{16,13,36,142},
{16,13,42,176},
{16,13,44,172},
{16,13,46,168},
{16,13,52,135},
{16,13,56,123},
{16,14,0,116},
{16,14,8,110},
{16,14,19,84},
{16,14,28,80},
{16,14,36,62},
{16,14,40,58},
{16,14,44,63},
{16,14,48,84},
{16,15,0,53},
{16,15,4,59},
{16,15,12,70},
{16,15,20,95},
{16,15,36,37},
{16,15,39,39},
{16,15,44,36},
{16,15,56,34},
{16,16,0,31},
{16,16,8,28},
{16,16,16,27},
{16,16,20,31},
{16,16,24,27},
{16,16,36,21},
{16,16,40,20},
{16,16,48,20},
{16,16,56,16},
{16,17,0,13},
{16,17,16,10},
{16,17,20,9},
{16,17,28,9},
{16,17,44,15},
{16,17,52,16},
{16,17,56,16},
{16,18,8,16},
{16,18,16,17},
{16,18,20,17},
{16,18,24,16},
{16,18,36,15},
{16,18,44,16},
{16,19,4,16},
{16,19,12,17},
{16,19,16,17},
{16,19,32,17},
{16,19,36,16},
{16,19,48,17},
{16,20,20,24},
{16,20,36,22},
{16,20,40,23},
{16,20,44,23},
{16,20,56,9},
{16,21,0,9},
{16,21,16,9},
{16,21,24,9},
{16,21,32,9},
{16,21,48,8},
{16,22,4,8},
{16,22,20,8},
{16,22,36,8},
{16,22,56,8},
{16,23,12,8},
{16,23,28,8},
{16,23,48,8},
{17,0,8,8},
{17,0,23,8},
{17,0,32,8},
{17,0,52,8},
{17,1,4,8},
{17,1,16,8},
{17,1,28,8},
{17,1,40,8},
{17,1,52,8},
{17,2,4,8},
{17,2,20,8},
{17,2,32,8},
{17,2,41,8},
{17,2,48,8},
{17,3,4,8},
{17,3,16,8},
{17,3,24,8},
{17,3,40,8},
{17,3,52,8},
{17,4,4,8},
{17,4,16,8},
{17,4,28,8},
{17,4,44,8},
{17,4,56,8},
{17,5,12,8},
{17,5,28,8},
{17,5,48,8},
{17,5,56,17},
{17,6,0,16},
{17,6,16,18},
{17,6,28,23},
{17,6,32,26},
{17,6,52,56},
{17,7,8,58},
{17,7,16,142},
{17,7,20,122},
{17,7,36,169},
{17,7,40,111},
{17,7,48,105},
{17,8,0,82},
{17,8,4,101},
{17,8,12,80},
{17,8,21,124},
{17,8,32,175},
{17,8,44,186},
{17,9,0,179},
{17,9,4,185},
{17,9,20,185},
{17,9,32,186},
{17,9,36,185},
{17,9,44,185},
{17,9,56,185},
{17,10,0,184},
{17,10,8,185},
{17,10,12,185},
{17,10,16,184},
{17,10,24,184},
{17,10,40,184},
{17,10,48,183},
{17,10,52,184},
{17,11,4,181},
{17,11,20,179},
{17,11,32,181},
{17,11,44,179},
{17,11,48,179},
{17,12,4,180},
{17,12,8,183},
{17,12,20,181},
{17,12,32,179},
{17,12,36,181},
{17,12,44,182},
{17,12,56,181},
{17,13,0,180},
{17,13,8,178},
{17,13,12,178},
{17,13,16,182},
{17,13,29,180},
{17,13,36,172},
{17,13,40,142},
{17,13,44,103},
{17,13,56,175},
{17,14,0,154},
{17,14,12,169},
{17,14,16,171},
{17,14,28,171},
{17,14,32,158},
{17,14,40,113},
{17,14,41,148},
{17,14,56,104},
{17,15,4,149},
{17,15,16,89},
{17,15,20,95},
{17,15,28,83},
{17,15,32,66},
{17,15,56,38},
{17,16,12,15},
{17,16,24,18},
{17,16,28,19},
{17,16,40,15},
{17,16,44,14},
{17,16,52,11},
{17,17,0,9},
{17,17,6,8},
{17,17,8,8},
{17,17,24,8},
{17,17,32,8},
{17,17,44,8},
{17,17,56,8},
{17,18,8,8},
{17,18,28,37},
{17,18,36,35},
{17,18,52,38},
{17,18,56,36},
{17,19,4,36},
{17,19,16,36},
{17,19,18,35},
{17,19,24,34},
{17,19,36,34},
{17,19,52,34},
{17,19,56,37},
{17,20,4,20},
{17,20,16,9},
{17,20,32,9},
{17,20,36,8},
{17,20,44,9},
{17,21,0,9},
{17,21,8,9},
{17,21,12,9},
{17,21,28,9},
{17,21,40,8},
{17,21,52,9},
{17,22,2,9},
{17,22,16,9},
{17,22,28,9},
{17,22,36,8},
{17,22,44,9},
{17,22,56,9},
{17,23,12,9},
{17,23,24,9},
{17,23,32,9},
{17,23,48,9},
{18,0,4,9},
{18,0,12,9},
{18,0,24,9},
{18,0,36,9},
{18,0,56,9},
{18,1,12,9},
{18,1,24,9},
{18,1,38,9},
{18,1,56,8},
{18,2,4,9},
{18,2,8,9},
{18,2,24,9},
{18,2,36,9},
{18,2,48,9},
{18,3,0,9},
{18,3,12,8},
{18,3,20,8},
{18,3,24,9},
{18,3,32,9},
{18,3,40,8},
{18,3,48,8},
{18,3,56,8},
{18,4,4,9},
{18,4,8,9},
{18,4,12,8},
{18,4,20,9},
{18,4,28,9},
{18,4,40,9},
{18,4,52,9},
{18,5,0,9},
{18,5,12,8},
{18,5,28,8},
{18,5,44,15},
{18,5,56,13},
{18,6,4,14},
{18,6,16,17},
{18,6,28,17},
{18,6,32,17},
{18,6,48,18},
{18,7,4,34},
{18,7,8,45},
{18,7,16,49},
{18,7,28,53},
{18,7,32,51},
{18,7,36,40},
{18,7,52,50},
{18,8,4,48},
{18,8,8,41},
{18,8,12,53},
{18,8,24,39},
{18,8,28,41},
{18,8,40,64},
{18,8,48,101},
{18,9,4,138},
{18,9,16,175},
{18,9,24,173},
{18,9,40,101},
{18,9,56,127},
{18,10,12,178},
{18,10,28,178},
{18,10,36,185},
{18,10,52,183},
{18,11,0,180},
{18,11,8,184},
{18,11,12,184},
{18,11,24,183},
{18,11,40,183},
{18,11,52,182},
{18,12,1,181},
{18,12,12,181},
{18,12,24,182},
{18,12,28,183},
{18,12,32,181},
{18,12,44,182},
{18,12,48,175},
{18,12,52,177},
{18,13,4,151},
{18,13,12,185},
{18,13,24,181},
{18,13,36,180},
{18,13,48,177},
{18,13,52,175},
{18,14,0,173},
{18,14,12,161},
{18,14,16,152},
{18,14,24,131},
{18,14,28,151},
{18,14,40,155},
{18,14,48,138},
{18,15,0,85},
{18,15,4,84},
{18,15,8,126},
{18,15,12,137},
{18,15,17,134},
{18,15,28,125},
{18,15,32,118},
{18,15,40,121},
{18,15,44,124},
{18,15,56,117},
{18,16,4,98},
{18,16,12,75},
{18,16,20,45},
{18,16,28,35},
{18,16,32,30},
{18,16,48,19},
{18,16,52,18},
{18,17,4,12},
{18,17,8,11},
{18,17,16,35},
{18,17,28,8},
{18,17,40,8},
{18,17,48,8},
{18,18,0,8},
{18,18,20,36},
{18,18,36,37},
{18,18,44,39},
{18,18,48,39},
{18,19,0,40},
{18,19,10,38},
{18,19,20,38},
{18,19,24,38},
{18,19,36,37},
{18,19,44,38},
{18,19,48,38},
{18,20,4,38},
{18,20,8,9},
{18,20,12,9},
{18,20,24,9},
{18,20,40,9},
{18,20,52,9},
{18,21,4,9},
{18,21,8,10},
{18,21,10,10},
{18,21,20,9},
{18,21,32,9},
{18,21,40,9},
{18,21,52,9},
{18,22,4,10},
{18,22,8,9},
{18,22,16,9},
{18,22,28,9},
{18,22,36,8},
{18,22,56,8},
{18,23,8,8},
{18,23,16,8},
{18,23,28,8},
{18,23,44,8},
{19,0,0,8},
{19,0,16,8},
{19,0,32,8},
{19,0,44,8},
{19,0,56,8},
{19,1,4,8},
{19,1,16,8},
{19,1,28,8},
{19,1,44,8},
{19,1,56,8},
{19,2,4,8},
{19,2,16,8},
{19,2,28,8},
{19,2,40,8},
{19,2,52,8},
{19,3,8,8},
{19,3,24,8},
{19,3,32,8},
{19,3,44,8},
{19,3,56,8},
{19,4,8,8},
{19,4,28,8},
{19,4,44,8},
{19,5,0,8},
{19,5,16,8},
{19,5,28,8},
{19,5,36,12},
{19,5,40,12},
{19,5,52,12},
{19,5,56,38},
{19,6,4,39},
{19,6,11,35},
{19,6,12,34},
{19,6,20,40},
{19,6,28,21},
{19,6,36,20},
{19,6,48,22},
{19,7,0,26},
{19,7,4,40},
{19,7,8,41},
{19,7,14,38},
{19,7,24,42},
{19,7,28,53},
{19,7,36,57},
{19,7,44,50},
{19,7,56,103},
{19,8,0,142},
{19,8,12,159},
{19,8,20,179},
{19,8,24,183},
{19,8,36,176},
{19,8,48,136},
{19,8,52,134},
{19,9,4,154},
{19,9,8,174},
{19,9,20,182},
{19,9,24,178},
{19,9,36,177},
{19,9,40,175},
{19,9,52,179},
{19,10,4,180},
{19,10,16,177},
{19,10,20,178},
{19,10,28,177},
{19,10,36,173},
{19,10,40,175},
{19,10,52,176},
{19,10,56,174},
{19,11,0,175},
{19,11,4,177},
{19,11,12,177},
{19,11,28,179},
{19,11,36,177},
{19,11,44,175},
{19,12,0,101},
{19,12,6,99},
{19,12,16,140},
{19,12,24,118},
{19,12,32,104},
{19,12,36,124},
{19,12,48,176},
{19,12,56,157},
{19,13,0,153},
{19,13,16,91},
{19,13,26,133},
{19,13,32,174},
{19,13,44,116},
{19,13,56,52},
{19,14,0,54},
{19,14,12,54},
{19,14,20,36},
{19,14,24,31},
{19,14,28,37},
{19,14,40,76},
{19,14,44,86},
{19,14,52,82},
{19,15,8,43},
{19,15,16,52},
{19,15,20,61},
{19,15,24,62},
{19,15,36,39},
{19,15,40,34},
{19,15,56,24},
{19,16,0,20},
{19,16,12,15},
{19,16,24,13},
{19,16,28,14},
{19,16,40,15},
{19,16,48,11},
{19,16,52,10},
{19,16,56,9},
{19,17,0,8},
{19,17,12,8},
{19,17,24,8},
{19,17,36,8},
{19,17,48,14},
{19,18,0,16},
{19,18,24,15},
{19,18,40,15},
{19,18,44,16},
{19,18,45,16},
{19,19,0,15},
{19,19,12,15},
{19,19,24,15},
{19,19,36,15},
{19,19,48,15},
{19,19,56,16},
{19,20,0,15},
{19,20,8,20},
{19,20,20,20},
{19,20,36,20},
{19,20,40,21},
{19,20,48,20},
{19,20,56,20},
{19,21,8,20},
{19,21,12,21},
{19,21,20,8},
{19,21,24,8},
{19,21,40,8},
{19,21,52,8},
{19,22,0,9},
{19,22,12,8},
{19,22,24,8},
{19,22,36,8},
{19,22,48,8},
{19,23,0,8},
{19,23,16,8},
{19,23,28,8},
{19,23,48,8},
{20,0,0,8},
{20,0,20,8},
{20,0,36,8},
{20,0,44,8},
{20,1,0,8},
{20,1,16,8},
{20,1,24,8},
{20,1,40,8},
{20,1,56,8},
{20,2,8,8},
{20,2,20,8},
{20,2,28,8},
{20,2,40,8},
{20,2,52,8},
{20,3,12,8},
{20,3,24,8},
{20,3,36,8},
{20,3,44,8},
{20,3,56,8},
{20,4,8,8},
{20,4,24,8},
{20,4,40,8},
{20,4,56,8},
{20,5,12,8},
{20,5,20,8},
{20,5,28,8},
{20,5,38,8},
{20,5,48,8},
{20,6,0,8},
{20,6,28,9},
{20,6,44,11},
{20,6,52,13},
{20,7,0,21},
{20,7,12,25},
{20,7,24,15},
{20,7,28,16},
{20,7,41,35},
{20,7,44,39},
{20,7,52,85},
{20,8,4,115},
{20,8,20,48},
{20,8,32,70},
{20,8,40,108},
{20,8,44,131},
{20,9,4,150},
{20,9,20,182},
{20,9,36,178},
{20,9,44,184},
{20,9,48,135},
{20,10,4,152},
{20,10,8,183},
{20,10,16,142},
{20,10,24,93},
{20,10,28,130},
{20,10,32,150},
{20,10,40,183},
{20,10,44,166},
{20,10,56,181},
{20,11,0,177},
{20,11,12,183},
{20,11,20,183},
{20,11,32,149},
{20,11,44,67},
{20,11,52,112},
{20,11,56,118},
{20,12,8,156},
{20,12,12,155},
{20,12,20,140},
{20,12,24,147},
{20,12,36,181},
{20,12,44,90},
{20,12,48,99},
{20,13,0,102},
{20,13,4,100},
{20,13,20,115},
{20,13,24,66},
{20,13,28,63},
{20,13,32,54},
{20,13,40,36},
{20,13,44,39},
{20,13,48,49},
{20,13,52,62},
{20,14,4,97},
{20,14,8,106},
{20,14,16,67},
{20,14,20,55},
{20,14,24,56},
{20,14,36,61},
{20,14,40,64},
{20,14,44,62},
{20,14,52,68},
{20,14,56,63},
{20,15,0,62},
{20,15,10,42},
{20,15,12,33},
{20,15,20,15},
{20,15,28,25},
{20,15,32,27},
{20,15,36,27},
{20,15,40,22},
{20,15,48,24},
{20,15,56,25},
{20,16,0,23},
{20,16,12,22},
{20,16,20,19},
{20,16,24,18},
{20,16,28,16},
{20,16,40,14},
{20,16,52,11},
{20,17,0,9},
{20,17,3,9},
{20,17,16,8},
{20,17,24,15},
{20,17,28,15},
{20,17,48,16},
{20,18,4,16},
{20,18,16,16},
{20,18,28,16},
{20,18,40,16},
{20,18,56,16},
{20,19,12,15},
{20,19,16,16},
{20,19,24,8},
{20,19,36,8},
{20,19,52,8},
{20,20,4,8},
{20,20,16,8},
{20,20,20,16},
{20,20,28,8},
{20,20,36,8},
{20,20,48,8},
{20,21,0,8},
{20,21,12,8},
{20,21,24,8},
{20,21,40,8},
{20,21,52,8},
{20,22,8,8},
{20,22,24,8},
{20,22,32,8},
{20,22,56,8},
{20,23,9,8},
{20,23,20,8},
{20,23,36,8},
{21,0,0,7},
{21,0,12,7},
{21,0,28,7},
{21,0,44,7},
{21,0,52,7},
{21,1,4,7},
{21,1,16,7},
{21,1,32,7},
{21,1,48,7},
{21,1,56,7},
{21,2,12,7},
{21,2,24,7},
{21,2,40,7},
{21,2,56,7},
{21,3,4,7},
{21,3,16,7},
{21,3,24,7},
{21,3,40,7},
{21,3,48,7},
{21,4,0,7},
{21,4,16,7},
{21,4,32,7},
{21,4,44,7},
{21,5,0,7},
{21,5,16,7},
{21,5,28,7},
{21,5,40,7},
{21,5,48,7},
{21,6,0,7},
{21,6,16,7},
{21,6,20,8},
{21,6,28,8},
{21,6,36,8},
{21,6,44,10},
{21,6,56,12},
{21,7,12,19},
{21,7,16,18},
{21,7,24,18},
{21,7,28,20},
{21,7,32,22},
{21,7,36,26},
{21,7,44,44},
{21,7,52,49},
{21,7,56,53},
{21,8,14,61},
{21,8,24,76},
{21,8,28,85},
{21,8,32,88},
{21,8,48,179},
{21,8,51,176},
{21,8,56,180},
{21,9,4,183},
{21,9,16,185},
{21,9,28,184},
{21,9,36,177},
{21,9,40,181},
{21,9,52,182},
{21,9,56,181},
{21,10,4,182},
{21,10,8,180},
{21,10,20,161},
{21,10,24,172},
{21,10,32,179},
{21,10,40,177},
{21,10,44,179},
{21,10,56,181},
{21,11,4,182},
{21,11,12,179},
{21,11,20,157},
{21,11,28,179},
{21,11,36,183},
{21,11,40,182},
{21,11,44,181},
{21,11,52,180},
{21,11,56,179},
{21,12,8,179},
{21,12,24,180},
{21,12,32,180},
{21,12,44,176},
{21,12,48,177},
{21,13,0,178},
{21,13,8,169},
{21,13,16,176},
{21,13,24,178},
{21,13,28,175},
{21,13,32,178},
{21,13,40,179},
{21,13,44,178},
{21,13,56,144},
{21,14,0,148},
{21,14,8,174},
{21,14,24,92},
{21,14,28,52},
{21,14,36,53},
{21,14,48,46},
{21,14,56,34},
{21,15,0,32},
{21,15,4,36},
{21,15,8,38},
{21,15,18,64},
{21,15,28,75},
{21,15,32,73},
{21,15,48,35},
{21,15,52,33},
{21,15,56,28},
{21,16,8,20},
{21,16,10,19},
{21,16,16,20},
{21,16,28,11},
{21,16,40,9},
{21,16,48,9},
{21,16,56,8},
{21,17,0,9},
{21,17,4,9},
{21,17,20,9},
{21,17,36,8},
{21,17,44,8},
{21,17,52,8},
{21,18,8,8},
{21,18,20,8},
{21,18,32,9},
{21,18,44,8},
{21,18,48,8},
{21,19,0,8},
{21,19,8,13},
{21,19,12,13},
{21,19,16,14},
{21,19,24,13},
{21,19,28,13},
{21,19,36,13},
{21,19,40,14},
{21,19,44,13},
{21,19,56,14},
{21,20,4,13},
{21,20,16,10},
{21,20,24,9},
{21,20,36,9},
{21,20,48,9},
{21,21,0,8},
{21,21,12,13},
{21,21,20,14},
{21,21,27,14},
{21,21,40,14},
{21,21,52,13},
{21,21,56,13},
{21,22,8,14},
{21,22,12,13},
{21,22,24,8},
{21,22,28,8},
{21,22,44,8},
{21,22,56,8},
{21,23,12,8},
{21,23,28,8},
{21,23,44,8},
{22,0,0,8},
{22,0,20,8},
{22,0,28,8},
{22,0,39,8},
{22,0,56,8},
{22,1,0,7},
{22,1,3,8},
{22,1,20,8},
{22,1,32,8},
{22,1,36,8},
{22,1,47,7},
{22,1,51,8},
{22,2,0,8},
{22,2,12,8},
{22,2,27,8},
{22,2,36,8},
{22,2,44,7},
{22,2,48,8},
{22,2,52,8},
{22,3,8,8},
{22,3,16,8},
{22,3,28,8},
{22,3,40,8},
{22,3,52,8},
{22,4,3,8},
{22,4,12,8},
{22,4,28,8},
{22,4,40,7},
{22,4,44,7},
{22,4,56,7},
{22,5,8,8},
{22,5,20,7},
{22,5,28,7},
{22,5,36,8},
{22,5,44,7},
{22,5,48,7},
{22,6,0,7},
{22,6,8,8},
{22,6,12,8},
{22,6,24,8},
{22,6,36,10},
{22,6,47,14},
{22,6,48,15},
{22,7,0,22},
{22,7,12,36},
{22,7,24,22},
{22,7,28,27},
{22,7,44,26},
{22,7,56,26},
{22,8,3,32},
{22,8,12,31},
{22,8,24,39},
{22,8,28,48},
{22,8,36,44},
{22,8,48,173},
{22,8,51,92},
{22,9,4,185},
{22,9,12,179},
{22,9,15,170},
{22,9,28,177},
{22,9,32,178},
{22,9,39,177},
{22,9,52,181},
{22,10,8,179},
{22,10,12,181},
{22,10,20,182},
{22,10,32,181},
{22,10,36,182},
{22,10,48,183},
{22,11,0,183},
{22,11,3,184},
{22,11,20,184},
{22,11,32,183},
{22,11,44,178},
{22,12,0,181},
{22,12,12,177},
{22,12,28,177},
{22,12,37,183},
{22,12,47,174},
{22,12,56,142},
{22,13,4,175},
{22,13,16,176},
{22,13,20,155},
{22,13,31,178},
{22,13,35,177},
{22,13,47,178},
{22,13,52,176},
{22,13,57,177},
{22,14,4,175},
{22,14,7,143},
{22,14,16,128},
{22,14,20,123},
{22,14,31,132},
{22,14,36,138},
{22,14,40,152},
{22,14,55,114},
{22,14,57,108},
{22,15,3,86},
{22,15,11,56},
{22,15,16,56},
{22,15,35,63},
{22,15,43,46},
{22,15,48,40},
{22,15,59,30},
{22,16,4,27},
{22,16,16,22},
{22,16,20,21},
{22,16,32,16},
{22,16,35,15},
{22,16,44,12},
{22,16,51,10},
{22,16,59,8},
{22,17,4,8},
{22,17,12,7},
{22,17,23,7},
{22,17,39,7},
{22,17,51,7},
{22,18,4,7},
{22,18,19,7},
{22,18,36,7},
{22,18,48,7},
{22,19,3,7},
{22,19,20,7},
{22,19,23,8},
{22,19,28,7},
{22,19,40,7},
{22,19,56,7},
{22,20,11,7},
{22,20,28,7},
{22,20,39,7},
{22,20,59,7},
{22,21,12,7},
{22,21,27,7},
{22,21,40,7},
{22,21,51,7},
{22,22,4,7},
{22,22,19,7},
{22,22,32,7},
{22,22,44,7},
{22,23,3,7},
{22,23,12,7},
{22,23,28,7},
{22,23,36,7},
{22,23,52,7},
{23,0,4,7},
{23,0,19,7},
{23,0,28,7},
{23,0,36,7},
{23,0,51,7},
{23,1,7,7},
{23,1,15,7},
{23,1,31,7},
{23,1,47,7},
{23,2,3,7},
{23,2,20,7},
{23,2,35,7},
{23,2,44,7},
{23,2,57,7},
{23,3,8,7},
{23,3,16,7},
{23,3,31,7},
{23,3,52,7},
{23,4,4,7},
{23,4,19,7},
{23,4,40,7},
{23,4,51,7},
{23,5,3,7},
{23,5,13,7},
{23,5,28,7},
{23,5,47,7},
{23,5,59,7},
{23,6,12,8},
{23,6,23,10},
{23,6,28,12},
{23,6,35,17},
{23,6,39,20},
{23,6,43,24},
{23,7,4,64},
{23,7,12,72},
{23,7,24,86},
{23,7,28,123},
{23,7,32,125},
{23,7,39,176},
{23,7,43,175},
{23,7,52,183},
{23,7,55,184},
{23,8,0,186},
{23,8,12,187},
{23,8,20,187},
{23,8,28,187},
{23,8,35,187},
{23,8,51,187},
{23,8,59,187},
{23,9,3,186},
{23,9,15,187},
{23,9,32,187},
{23,9,35,185},
{23,9,40,183},
{23,9,55,186},
{23,10,7,186},
{23,10,19,185},
{23,10,31,185},
{23,10,43,184},
{23,10,47,180},
{23,10,51,181},
{23,11,3,180},
{23,11,15,180},
{23,11,27,184},
{23,11,31,177},
{23,11,39,178},
{23,11,48,180},
{23,11,52,179},
{23,11,55,171},
{23,12,3,179},
{23,12,15,177},
{23,12,19,172},
{23,12,23,179},
{23,12,35,178},
{23,12,39,173},
{23,12,56,175},
{23,12,59,183},
{23,13,3,180},
{23,13,23,178},
{23,13,31,180},
{23,13,35,180},
{23,13,43,171},
{23,13,52,106},
{23,13,55,116},
{23,14,7,88},
{23,14,11,84},
{23,14,19,120},
{23,14,22,118},
{23,14,31,131},
{23,14,39,121},
{23,14,43,101},
{23,14,55,127},
{23,14,59,111},
{23,15,3,132},
{23,15,15,77},
{23,15,19,63},
{23,15,27,60},
{23,15,35,62},
{23,15,39,53},
{23,15,59,33},
{23,16,7,30},
{23,16,15,22},
{23,16,31,12},
{23,16,43,10},
{23,16,47,9},
{23,16,56,8},
{23,17,11,7},
{23,17,27,7},
{23,17,39,7},
{23,17,55,7},
{23,18,15,7},
{23,18,26,7},
{23,18,39,7},
{23,18,51,9},
{23,18,59,8},
{23,19,3,9},
{23,19,24,9},
{23,19,31,9},
{23,19,43,9},
{23,19,59,9},
{23,20,19,9},
{23,20,35,9},
{23,20,43,9},
{23,20,51,9},
{23,21,3,9},
{23,21,16,9},
{23,21,32,9},
{23,21,39,9},
{23,21,55,9},
{23,22,7,9},
{23,22,23,9},
{23,22,43,9},
{23,22,55,9},
{23,23,31,9},
{23,23,43,9},
{23,23,59,7},
{24,0,7,7},
{24,0,23,7},
{24,0,38,7},
{24,0,43,7},
{24,0,59,7},
{24,1,7,7},
{24,1,23,7},
{24,1,35,7},
{24,1,51,7},
{24,2,4,7},
{24,2,12,7},
{24,2,24,7},
{24,2,35,7},
{24,2,47,7},
{24,2,59,7},
{24,3,11,7},
{24,3,19,7},
{24,3,31,7},
{24,3,43,7},
{24,3,59,7},
{24,4,15,7},
{24,4,31,7},
{24,4,51,7},
{24,5,7,7},
{24,5,19,7},
{24,5,27,7},
{24,5,39,7},
{24,5,51,7},
{24,6,3,7},
{24,6,15,7},
{24,6,31,7},
{24,6,43,7},
{24,6,51,8},
{24,6,55,8},
{24,7,11,9},
{24,7,23,9},
{24,7,27,10},
{24,7,31,10},
{24,7,47,11},
{24,8,7,12},
{24,8,15,14},
{24,8,23,16},
{24,8,35,17},
{24,8,47,22},
{24,8,51,24},
{24,9,11,28},
{24,9,27,43},
{24,9,35,33},
{24,9,39,47},
{24,9,59,42},
{24,10,11,45},
{24,10,15,44},
{24,10,23,44},
{24,10,35,29},
{24,10,39,28},
{24,10,47,26},
{24,10,55,25},
{24,10,59,24},
{24,11,19,20},
{24,11,23,22},
{24,11,31,25},
{24,11,39,26},
{24,11,43,26},
{24,11,55,25},
{24,12,3,25},
{24,12,15,24},
{24,12,19,27},
{24,12,31,32},
{24,12,35,36},
{24,12,37,37},
{24,12,39,38},
{24,12,48,38},
{24,12,51,36},
{24,12,59,32},
{24,13,7,33},
{24,13,15,30},
{24,13,19,31},
{24,13,31,30},
{24,13,39,25},
{24,13,47,27},
{24,13,55,25},
{24,13,59,24},
{24,14,18,27},
{24,14,27,24},
{24,14,31,20},
{24,14,36,16},
{24,14,43,15},
{24,14,51,15},
{24,15,3,16},
{24,15,15,15},
{24,15,23,15},
{24,15,35,15},
{24,15,43,14},
{24,15,47,13},
{24,16,3,11},
{24,16,15,9},
{24,16,23,9},
{24,16,39,8},
{24,16,53,8},
{24,17,7,7},
{24,17,23,7},
{24,17,35,7},
{24,17,47,7},
{24,18,3,7},
{24,18,21,7},
{24,18,31,7},
{24,18,47,7},
{24,19,3,7},
{24,19,19,7},
{24,19,35,7},
{24,19,47,7},
{24,19,59,7},
{24,20,13,7},
{24,20,23,7},
{24,20,35,7},
{24,20,51,7},
{24,21,7,7},
{24,21,19,7},
{24,21,35,7},
{24,21,47,7},
{24,21,59,7},
{24,22,15,9},
{24,22,27,9},
{24,22,39,9},
{24,22,51,9},
{24,23,7,9},
{24,23,19,9},
{24,23,27,9},
{24,23,43,9},
{24,23,59,9},
{25,0,15,9},
{25,0,27,9},
{25,0,39,9},
{25,0,51,9},
{25,1,3,9},
{25,1,15,9},
{25,1,31,9},
{25,1,47,9},
{25,1,59,9},
{25,2,15,9},
{25,2,27,9},
{25,2,43,9},
{25,2,55,9},
{25,3,7,9},
{25,3,23,9},
{25,3,39,9},
{25,3,55,9},
{25,4,11,9},
{25,4,19,9},
{25,4,35,9},
{25,4,47,9, occType::OCC_NONE, true, false},
{ },
    };
static const ALDataSample samplea1b[] =
    {
{8,0,18,7, occType::OCC_NONE, true, false},
{8,0,30,7},
{8,0,42,7},
{8,0,58,7},
{8,1,10,7},
{8,1,22,7},
{8,1,38,7},
{8,1,54,7},
{8,2,10,7},
{8,2,22,7},
{8,2,30,7},
{8,2,42,7},
{8,2,50,7},
{8,3,2,7},
{8,3,10,7},
{8,3,26,7},
{8,3,42,7},
{8,3,58,7},
{8,4,14,7},
{8,4,26,7},
{8,4,38,7},
{8,4,50,7},
{8,5,6,7},
{8,5,18,7},
{8,5,34,7},
{8,5,42,7},
{8,5,50,7},
{8,6,6,7},
{8,6,14,8},
{8,6,18,7},
{8,6,22,7},
{8,6,38,7},
{8,6,42,8},
{8,6,55,8},
{8,6,58,10},
{8,7,14,15},
{8,7,26,24},
{8,7,38,32},
{8,7,53,42},
{8,8,6,56},
{8,8,22,174},
{8,8,30,178},
{8,8,38,179},
{8,8,50,180},
{8,9,2,181},
{8,9,14,182},
{8,9,30,182},
{8,9,46,182},
{8,10,2,181},
{8,10,14,178},
{8,10,22,170},
{8,10,30,179},
{8,10,42,151},
{8,10,45,131},
{8,10,48,118},
{8,10,54,105},
{8,11,6,93},
{8,11,14,92},
{8,11,18,88},
{8,11,30,79},
{8,11,34,74},
{8,11,42,68},
{8,11,50,64},
{8,11,54,66},
{8,12,6,65},
{8,12,10,62},
{8,12,26,84},
{8,12,30,87},
{8,12,38,86},
{8,12,46,73},
{8,12,50,71},
{8,13,2,76},
{8,13,14,72},
{8,13,22,66},
{8,13,26,68},
{8,13,36,63},
{8,13,38,64},
{8,13,50,67},
{8,13,54,70},
{8,14,6,59},
{8,14,14,50},
{8,14,22,43},
{8,14,26,39},
{8,14,38,32},
{8,14,42,33},
{8,14,51,29},
{8,14,54,29},
{8,15,6,30},
{8,15,10,30},
{8,15,20,28},
{8,15,22,28},
{8,15,34,20},
{8,15,42,17},
{8,15,46,15},
{8,15,57,13},
{8,15,58,12},
{8,16,18,8},
{8,16,30,7},
{8,16,46,7},
{8,17,6,7},
{8,17,14,7},
{8,17,26,7},
{8,17,38,14},
{8,17,46,14},
{8,17,58,15},
{8,18,2,15},
{8,18,18,15},
{8,18,34,15},
{8,18,50,15},
{8,19,6,15},
{8,19,26,15},
{8,19,38,15},
{8,19,46,15},
{8,19,58,15},
{8,20,2,15},
{8,20,18,15},
{8,20,22,14},
{8,20,30,14},
{8,20,42,14},
{8,20,54,15},
{8,21,14,16},
{8,21,26,16},
{8,21,38,16},
{8,21,54,16},
{8,22,10,9},
{8,22,22,9},
{8,22,34,9},
{8,22,46,8},
{8,22,58,9},
{8,23,2,9},
{8,23,14,9},
{8,23,22,9},
{8,23,38,9},
{8,23,45,9},
{8,23,50,8},
{8,23,58,7},
{9,0,10,7},
{9,0,26,8},
{9,0,34,8},
{9,0,42,7},
{9,0,46,8},
{9,1,2,7},
{9,1,18,7},
{9,1,38,7},
{9,1,54,7},
{9,2,2,7},
{9,2,18,7},
{9,2,34,7},
{9,2,50,7},
{9,3,6,7},
{9,3,14,7},
{9,3,26,7},
{9,3,34,7},
{9,3,41,7},
{9,3,50,7},
{9,4,6,7},
{9,4,22,7},
{9,4,38,7},
{9,4,46,7},
{9,5,2,7},
{9,5,18,7},
{9,5,26,7},
{9,5,38,7},
{9,5,54,7},
{9,6,6,7},
{9,6,18,7},
{9,6,34,7},
{9,6,46,7},
{9,6,54,12},
{9,6,58,15},
{9,7,18,26},
{9,7,34,29},
{9,7,46,29},
{9,7,58,30},
{9,8,6,23},
{9,8,22,26},
{9,8,33,33},
{9,8,34,34},
{9,8,46,33},
{9,8,53,33},
{9,8,58,36},
{9,9,6,33},
{9,9,17,44},
{9,9,22,50},
{9,9,34,33},
{9,9,38,30},
{9,9,46,31},
{9,10,12,36},
{9,10,21,39},
{9,10,30,34},
{9,10,36,47},
{9,10,42,34},
{9,10,50,40},
{9,10,54,43},
{9,11,5,100},
{9,11,9,112},
{9,11,25,79},
{9,11,30,50},
{9,11,42,48},
{9,11,54,33},
{9,11,58,34},
{9,12,2,37},
{9,12,13,58},
{9,12,22,74},
{9,12,26,89},
{9,12,38,158},
{9,12,46,137},
{9,12,54,95},
{9,13,2,171},
{9,13,6,183},
{9,13,18,125},
{9,13,21,98},
{9,13,34,134},
{9,13,37,101},
{9,13,49,49},
{9,13,53,69},
{9,14,1,101},
{9,14,9,143},
{9,14,13,140},
{9,14,22,92},
{9,14,30,63},
{9,14,33,79},
{9,14,38,60},
{9,14,54,69},
{9,14,58,80},
{9,15,10,92},
{9,15,14,87},
{9,15,22,71},
{9,15,34,31},
{9,15,38,35},
{9,15,45,31},
{9,15,50,27},
{9,15,54,25},
{9,16,3,22},
{9,16,6,20},
{9,16,18,13},
{9,16,30,9},
{9,16,41,7},
{9,16,58,7},
{9,17,22,8},
{9,17,29,8},
{9,17,46,8},
{9,17,58,8},
{9,18,10,8},
{9,18,33,16},
{9,18,38,17},
{9,18,46,18},
{9,18,53,18},
{9,19,6,17},
{9,19,17,17},
{9,19,29,17},
{9,19,41,17},
{9,19,53,17},
{9,20,5,17},
{9,20,13,17},
{9,20,17,16},
{9,20,25,16},
{9,20,38,16},
{9,20,54,17},
{9,21,25,17},
{9,21,38,8},
{9,21,50,7},
{9,22,2,7},
{9,22,14,7},
{9,22,25,7},
{9,22,30,8},
{9,22,34,8},
{9,22,49,7},
{9,23,2,8},
{9,23,13,8},
{9,23,30,8},
{9,23,37,7},
{9,23,50,7},
{10,0,1,7},
{10,0,18,7},
{10,1,5,7},
{10,1,22,7},
{10,1,37,7},
{10,1,53,7},
{10,2,10,7},
{10,2,18,7},
{10,2,34,7},
{10,2,49,7},
{10,3,5,7},
{10,3,17,7},
{10,3,30,7},
{10,3,38,7},
{10,3,45,7},
{10,3,58,7},
{10,4,9,7},
{10,4,26,7},
{10,4,42,7},
{10,4,57,7},
{10,5,13,7},
{10,5,21,7},
{10,5,33,7},
{10,5,46,7},
{10,5,53,7},
{10,6,2,7},
{10,6,13,7},
{10,6,29,7},
{10,6,41,7},
{10,6,53,15},
{10,7,9,16},
{10,7,22,18},
{10,7,33,20},
{10,7,37,21},
{10,7,53,27},
{10,7,57,30},
{10,8,5,43},
{10,8,18,66},
{10,8,38,69},
{10,8,41,111},
{10,8,45,179},
{10,9,1,176},
{10,9,5,179},
{10,9,17,181},
{10,9,25,144},
{10,9,30,132},
{10,9,41,71},
{10,9,46,68},
{10,9,53,84},
{10,10,10,91},
{10,10,21,176},
{10,10,25,180},
{10,10,38,183},
{10,10,49,182},
{10,10,58,182},
{10,11,4,181},
{10,11,9,180},
{10,11,13,180},
{10,11,29,183},
{10,11,38,182},
{10,11,49,182},
{10,12,1,183},
{10,12,14,181},
{10,12,18,179},
{10,12,30,136},
{10,12,33,141},
{10,12,42,141},
{10,12,45,114},
{10,12,48,107},
{10,12,57,110},
{10,13,10,66},
{10,13,14,60},
{10,13,17,59},
{10,13,26,58},
{10,13,29,73},
{10,13,42,56},
{10,13,45,44},
{10,13,53,39},
{10,14,2,45},
{10,14,5,45},
{10,14,18,50},
{10,14,25,84},
{10,14,37,64},
{10,14,41,61},
{10,14,45,52},
{10,14,49,41},
{10,14,57,39},
{10,15,2,41},
{10,15,5,40},
{10,15,17,36},
{10,15,34,37},
{10,15,41,46},
{10,15,49,35},
{10,15,54,29},
{10,16,1,24},
{10,16,6,22},
{10,16,13,18},
{10,16,21,13},
{10,16,25,11},
{10,16,42,8},
{10,16,57,7},
{10,17,14,7},
{10,17,25,7},
{10,17,37,7},
{10,17,45,7},
{10,17,53,7},
{10,18,5,7},
{10,18,21,7},
{10,18,33,7},
{10,18,49,7},
{10,19,5,8},
{10,19,26,8},
{10,19,37,8},
{10,19,53,8},
{10,20,9,8},
{10,20,25,8},
{10,20,37,8},
{10,20,49,8},
{10,20,57,8},
{10,21,5,8},
{10,21,21,8},
{10,21,29,8},
{10,21,45,8},
{10,22,1,8},
{10,22,21,8},
{10,22,37,8},
{10,22,45,8},
{10,23,5,8},
{10,23,21,8},
{10,23,33,8},
{10,23,37,8},
{10,23,50,8},
{11,0,9,8},
{11,0,21,8},
{11,0,37,8},
{11,0,49,8},
{11,1,5,8},
{11,1,21,8},
{11,1,29,8},
{11,1,41,8},
{11,1,53,8},
{11,2,0,8},
{11,2,17,8},
{11,2,29,8},
{11,2,45,8},
{11,2,53,8},
{11,3,5,8},
{11,3,17,8},
{11,3,25,8},
{11,3,41,8},
{11,3,57,8},
{11,4,9,8},
{11,4,21,8},
{11,4,29,8},
{11,4,41,8},
{11,4,53,8},
{11,5,5,8},
{11,5,21,8},
{11,5,26,8},
{11,5,38,8},
{11,5,49,8},
{11,6,5,8},
{11,6,25,8},
{11,6,33,8},
{11,6,45,8},
{11,7,1,10},
{11,7,21,17},
{11,7,37,20},
{11,7,49,37},
{11,7,53,51},
{11,8,5,58},
{11,8,17,66},
{11,8,21,87},
{11,8,33,184},
{11,8,45,186},
{11,8,53,187},
{11,9,5,187},
{11,9,17,187},
{11,9,25,186},
{11,9,29,186},
{11,9,41,186},
{11,9,53,186},
{11,10,20,185},
{11,10,33,185},
{11,10,41,184},
{11,10,49,184},
{11,10,53,184},
{11,10,57,183},
{11,11,13,183},
{11,11,27,183},
{11,11,49,183},
{11,12,5,183},
{11,12,17,183},
{11,12,25,182},
{11,12,29,182},
{11,12,37,183},
{11,12,41,183},
{11,12,45,184},
{11,12,53,185},
{11,13,1,185},
{11,13,5,186},
{11,13,9,185},
{11,13,13,184},
{11,13,25,181},
{11,13,32,178},
{11,13,37,176},
{11,13,41,175},
{11,13,53,157},
{11,13,57,141},
{11,14,9,102},
{11,14,13,96},
{11,14,25,76},
{11,14,29,77},
{11,14,41,61},
{11,14,45,61},
{11,14,49,62},
{11,15,1,50},
{11,15,9,59},
{11,15,21,33},
{11,15,29,27},
{11,15,33,25},
{11,15,41,22},
{11,15,45,20},
{ },
    };
static const ALDataSample samplea2[] =
    {
{15,3,2,3, occType::OCC_NONE, true, false},
{15,5,18,3},
{15,6,14,3},
{15,6,18,4},
{15,6,26,7},
{15,9,18,174},
{15,9,30,167},
{15,9,45,176},
{15,10,2,172},
{15,10,14,57},
{15,10,18,61},
{15,10,26,146},
{15,10,42,171},
{15,10,50,133},
{15,12,22,179},
{15,13,5,175},
{15,14,38,173},
{15,15,14,173},
{15,16,42,9},
{15,16,54,4},
{15,17,25,3},
{15,17,54,3},
{15,18,14,3},
{15,18,34,2},
{15,18,50,3},
{15,19,1,3},
{15,19,30,3},
{15,19,45,2},
{15,19,55,3},
{15,20,6,3},
{15,20,17,3},
{15,20,34,3},
{15,20,46,3},
{15,21,1,3},
{15,21,12,3},
{15,21,18,2},
{15,21,22,3},
{15,21,33,3},
{15,21,46,3},
{15,22,6,4},
{15,22,14,4},
{15,22,22,5},
{15,22,26,4},
{15,22,30,6},
{15,22,46,4},
{15,22,54,4},
{15,23,5,5},
{15,23,17,4},
{15,23,21,5},
{15,23,28,4},
{15,23,41,4},
{15,23,50,4},
{16,0,2,4},
{16,0,5,4},
{16,0,14,4},
{16,0,18,6},
{16,0,54,6},
{16,0,57,4},
{16,1,2,6},
{16,1,14,4},
{16,1,18,4},
{16,1,29,4},
{16,2,1,6},
{16,2,2,5},
{16,2,14,5},
{16,3,54,4},
{16,3,58,4},
{16,4,1,6},
{16,4,10,6},
{16,4,22,4},
{16,4,30,6},
{16,8,21,33},
{16,8,57,29},
{16,9,6,40},
{16,9,21,69},
{16,9,46,73},
{16,9,49,101},
{16,10,5,159},
{16,10,9,167},
{16,10,25,167},
{16,10,50,175},
{16,10,53,168},
{16,10,58,170},
{16,11,21,176},
{16,11,25,176},
{16,11,58,177},
{16,12,2,179},
{16,12,5,180},
{16,12,9,179},
{16,12,17,180},
{16,12,21,179},
{16,12,37,180},
{16,12,45,179},
{16,12,50,176},
{16,13,1,179},
{16,18,37,97},
{16,18,49,101},
{16,19,29,3},
{16,19,41,3},
{16,19,57,3},
{16,20,5,3},
{16,20,25,98},
{16,20,53,3},
{16,21,13,3},
{16,21,25,3},
{16,21,34,3},
{16,21,50,3},
{17,0,17,3},
{17,2,1,3},
{17,2,33,3},
{17,2,49,3},
{17,3,5,3},
{17,3,21,3},
{17,3,29,3},
{17,3,49,3},
{17,4,13,3},
{17,5,3,3},
{17,5,9,3},
{17,6,33,108},
{17,6,45,131},
{17,7,1,58},
{17,7,29,123},
{17,8,1,102},
{17,8,5,108},
{17,8,17,108},
{17,8,37,140},
{17,8,49,125},
{17,8,53,123},
{17,9,5,174},
{17,9,17,111},
{17,9,28,140},
{17,9,29,145},
{17,9,37,151},
{17,9,45,156},
{17,9,49,159},
{17,10,5,171},
{17,10,17,173},
{17,10,25,169},
{17,10,29,175},
{17,10,45,167},
{17,10,49,169},
{17,11,1,177},
{17,11,13,176},
{17,11,25,177},
{17,11,37,156},
{17,11,49,175},
{17,12,5,177},
{17,12,9,179},
{17,12,21,179},
{17,12,32,170},
{17,12,51,179},
{17,13,1,180},
{17,13,9,178},
{17,13,25,179},
{17,13,29,180},
{17,13,33,177},
{17,13,41,171},
{17,13,53,178},
{17,13,57,179},
{17,14,9,173},
{17,14,13,176},
{17,14,21,179},
{17,14,33,176},
{17,14,37,171},
{17,15,25,180},
{17,15,33,121},
{17,15,42,104},
{17,15,45,79},
{17,16,1,22},
{17,16,29,30},
{17,16,41,18},
{17,16,49,10},
{17,17,5,4},
{17,17,33,3},
{17,17,45,3},
{17,17,57,3},
{17,18,17,3},
{17,18,53,3},
{17,20,5,3},
{17,20,37,3},
{17,20,54,3},
{17,21,9,3},
{17,21,29,3},
{17,21,41,3},
{17,21,53,3},
{17,22,5,3},
{17,22,17,3},
{17,22,33,3},
{17,22,53,3},
{17,23,9,3},
{17,23,21,3},
{17,23,37,3},
{17,23,41,3},
{17,23,53,3},
{18,0,5,3},
{18,0,21,3},
{18,0,33,3},
{18,0,41,3},
{18,0,47,3},
{18,0,53,3},
{18,1,9,3},
{18,1,25,3},
{18,1,37,3},
{18,1,49,3},
{18,2,9,3},
{18,2,21,3},
{18,2,33,3},
{18,2,49,3},
{18,3,1,3},
{18,3,17,3},
{18,3,25,3},
{18,3,29,3},
{18,3,45,3},
{18,3,57,3},
{18,4,9,2},
{18,4,17,3},
{18,4,29,2},
{18,4,33,3},
{18,4,49,3},
{18,4,53,2},
{18,5,1,2},
{18,5,5,3},
{18,5,9,2},
{18,5,21,3},
{18,5,26,2},
{18,5,44,2},
{18,5,57,95},
{18,6,1,100},
{18,6,13,93},
{18,6,29,5},
{18,6,45,7},
{18,7,5,16},
{18,7,13,23},
{18,7,25,35},
{18,7,37,48},
{18,7,41,60},
{18,7,56,64},
{18,8,25,47},
{18,8,45,122},
{18,8,53,99},
{18,9,9,150},
{18,9,25,141},
{18,9,57,114},
{18,10,9,110},
{18,10,12,142},
{18,10,17,173},
{18,10,25,171},
{18,10,33,171},
{18,10,49,155},
{18,10,53,163},
{18,10,57,179},
{18,11,13,174},
{18,11,17,140},
{18,11,25,153},
{18,11,33,142},
{18,12,5,176},
{18,12,25,178},
{18,12,29,177},
{18,12,57,172},
{18,13,1,172},
{18,13,37,177},
{18,13,53,151},
{18,14,17,175},
{18,14,25,178},
{18,14,34,179},
{18,14,53,102},
{18,15,9,176},
{18,15,17,179},
{18,15,49,179},
{18,16,21,48},
{18,16,41,30},
{18,17,25,3},
{18,17,41,2},
{18,17,53,3},
{18,18,5,3},
{18,18,21,3},
{18,18,35,3},
{18,18,49,3},
{18,19,1,3},
{18,19,13,3},
{18,19,25,3},
{18,19,45,3},
{18,19,57,3},
{18,20,13,3},
{18,20,26,3},
{18,20,57,3},
{18,21,27,3},
{18,21,36,3},
{18,21,49,3},
{18,22,9,3},
{18,22,21,3},
{18,22,33,3},
{18,22,49,3},
{18,23,4,3},
{18,23,17,3},
{18,23,33,3},
{18,23,37,3},
{18,23,53,3},
{19,0,1,3},
{19,0,17,3},
{19,0,25,3},
{19,0,41,3},
{19,0,53,3},
{19,1,21,2},
{19,1,37,2},
{19,1,53,2},
{19,2,1,2},
{19,2,29,2},
{19,2,37,2},
{19,2,49,2},
{19,3,1,2},
{19,3,13,2},
{19,3,25,2},
{19,3,37,2},
{19,3,45,2},
{19,3,57,2},
{19,4,9,2},
{19,4,21,2},
{19,4,41,2},
{19,4,49,2},
{19,5,5,2},
{19,5,17,2},
{19,5,21,3},
{19,5,25,2},
{19,5,41,3},
{19,5,49,3},
{19,6,49,110},
{19,7,49,78},
{19,7,57,79},
{19,8,5,98},
{19,8,9,96},
{19,8,21,111},
{19,8,25,127},
{19,8,29,129},
{19,8,45,140},
{19,8,49,146},
{19,9,1,116},
{19,9,5,126},
{19,9,13,147},
{19,9,20,173},
{19,9,25,172},
{19,9,33,174},
{19,9,49,176},
{19,10,5,177},
{19,10,17,177},
{19,10,25,177},
{19,10,29,177},
{19,10,45,177},
{19,10,53,177},
{19,11,5,178},
{19,11,25,179},
{19,11,33,179},
{19,11,45,177},
{19,11,53,162},
{19,12,1,144},
{19,12,5,163},
{19,12,13,175},
{19,12,29,168},
{19,12,45,178},
{19,12,53,176},
{19,12,57,176},
{19,13,1,162},
{19,13,9,140},
{19,13,13,157},
{19,13,17,172},
{19,13,25,176},
{19,13,29,178},
{19,13,49,129},
{19,13,50,120},
{19,14,1,86},
{19,14,5,101},
{19,14,9,78},
{19,14,17,47},
{19,14,25,68},
{19,14,29,98},
{19,14,49,175},
{19,15,1,76},
{19,15,29,84},
{19,16,37,21},
{19,16,57,5},
{19,18,57,3},
{19,19,57,3},
{19,20,17,3},
{19,22,17,3},
{20,7,41,72},
{20,8,9,135},
{20,8,21,93},
{20,8,29,105},
{20,9,6,161},
{20,9,9,156},
{20,9,15,159},
{20,9,17,170},
{20,10,9,169},
{20,10,17,175},
{20,10,25,151},
{20,18,29,3},
{20,18,45,3},
{20,19,29,3},
{20,20,13,106},
{20,20,25,3},
{20,21,5,3},
{20,21,21,3},
{20,21,37,3},
{20,22,25,3},
{20,22,41,3},
{20,22,59,103},
{20,23,9,106},
{20,23,25,3},
{20,23,41,3},
{20,23,57,3},
{21,0,5,3},
{21,0,21,3},
{21,0,37,3},
{21,0,53,2},
{21,1,9,2},
{21,1,29,2},
{21,1,37,2},
{21,2,41,2},
{21,2,53,2},
{21,3,5,2},
{21,3,17,2},
{21,3,23,2},
{21,3,37,2},
{21,3,49,2},
{21,4,5,2},
{21,4,13,2},
{21,4,29,2},
{21,4,41,2},
{21,4,53,2},
{21,5,1,2},
{21,5,5,3},
{21,5,13,3},
{21,5,25,3},
{21,5,33,3},
{21,5,45,2},
{21,6,1,3},
{21,6,13,3},
{21,6,41,8},
{21,6,45,9},
{21,7,21,22},
{21,9,57,178},
{21,10,1,178},
{21,10,13,176},
{21,10,21,174},
{21,10,37,179},
{21,10,49,179},
{21,12,45,177},
{21,12,53,179},
{21,13,1,179},
{21,14,9,180},
{21,14,13,180},
{21,14,17,179},
{21,15,33,116},
{21,15,45,70},
{21,15,57,52},
{21,16,33,6},
{21,17,1,3},
{21,20,17,3},
{22,1,29,2},
{22,2,1,2},
{22,2,9,2},
{22,2,21,2},
{22,3,29,2},
{22,4,29,3},
{22,4,41,3},
{22,5,5,2},
{22,5,17,3},
{22,5,21,2},
{22,5,49,2},
{22,5,53,3},
{22,6,25,4},
{22,6,37,10},
{22,6,53,25},
{22,7,1,33},
{22,7,13,45},
{22,7,17,49},
{22,7,33,62},
{22,7,45,65},
{22,7,53,74},
{22,8,1,89},
{22,8,5,90},
{22,8,17,108},
{22,8,33,159},
{22,8,37,144},
{22,9,17,72},
{22,9,29,168},
{22,9,37,173},
{22,9,41,171},
{22,9,53,176},
{22,10,1,176},
{22,10,17,177},
{22,10,21,178},
{22,10,29,178},
{22,10,41,177},
{22,10,49,178},
{22,11,1,176},
{22,11,5,177},
{22,11,45,140},
{22,11,49,134},
{22,11,53,172},
{22,12,5,176},
{22,12,9,174},
{22,12,13,165},
{22,12,21,134},
{22,12,25,143},
{22,12,41,177},
{22,12,45,148},
{22,12,57,171},
{22,13,1,169},
{22,13,5,175},
{22,13,17,140},
{22,13,21,131},
{22,13,33,147},
{22,13,36,154},
{22,13,37,165},
{22,13,41,163},
{22,13,49,169},
{22,13,57,165},
{22,14,3,175},
{22,14,9,177},
{22,14,13,174},
{22,14,21,140},
{22,14,41,176},
{22,14,49,122},
{22,14,57,81},
{22,15,5,50},
{22,15,9,48},
{22,15,10,49},
{22,15,17,55},
{22,15,41,73},
{22,15,49,43},
{22,15,53,39},
{22,15,57,38},
{22,16,9,34},
{22,16,13,30},
{22,16,21,21},
{22,16,33,14},
{22,16,37,12},
{22,16,41,10},
{22,16,45,8},
{22,16,53,6},
{22,16,55,5},
{22,17,5,3},
{22,17,9,3},
{22,17,25,2},
{22,17,33,2},
{22,17,45,2},
{22,17,57,2},
{22,18,9,3},
{22,18,25,3},
{22,18,45,3},
{22,18,57,3},
{22,19,9,3},
{22,19,17,3},
{22,19,25,3},
{22,19,37,3},
{22,19,49,3},
{22,20,1,3},
{22,20,13,3},
{22,20,29,3},
{22,20,41,3},
{22,20,53,3},
{22,21,13,3},
{22,21,25,3},
{22,21,41,3},
{22,21,52,3},
{22,22,5,3},
{22,22,21,3},
{22,22,29,3},
{22,22,45,3},
{22,23,9,3},
{22,23,25,3},
{22,23,37,3},
{22,23,56,3},
{23,0,1,2},
{23,0,9,2},
{23,0,25,2},
{23,0,37,2},
{23,0,45,2},
{23,1,16,2},
{23,1,29,2},
{23,1,41,2},
{23,1,53,2},
{23,2,5,2},
{23,2,21,2},
{23,2,37,2},
{23,2,53,2},
{23,3,9,3},
{23,3,29,3},
{23,3,41,3},
{23,3,45,2},
{23,3,50,3},
{23,4,1,3},
{23,4,13,2},
{23,4,21,3},
{23,4,29,2},
{23,4,45,3},
{23,4,49,3},
{23,5,1,3},
{23,5,9,2},
{23,5,13,2},
{23,5,21,2},
{23,5,37,2},
{23,5,49,2},
{23,6,1,3},
{23,6,13,3},
{23,6,21,3},
{23,6,37,8},
{23,6,41,10},
{23,6,49,15},
{23,6,57,20},
{23,7,11,30},
{23,7,13,32},
{23,7,33,49},
{23,7,37,52},
{23,7,45,61},
{23,7,49,70},
{23,8,5,70},
{23,8,25,83},
{23,8,41,98},
{23,8,53,106},
{23,8,57,108},
{23,9,5,104},
{23,9,13,107},
{23,9,17,108},
{23,9,21,111},
{23,9,29,112},
{23,9,33,113},
{23,9,37,120},
{23,9,45,142},
{23,9,51,140},
{23,9,57,114},
{23,10,1,116},
{23,10,13,114},
{23,10,17,116},
{23,10,29,126},
{23,10,41,155},
{23,10,45,171},
{23,10,57,135},
{23,11,9,163},
{23,11,17,174},
{23,11,21,173},
{23,11,25,147},
{23,11,37,157},
{23,11,41,165},
{23,11,49,176},
{23,11,57,147},
{23,12,1,145},
{23,12,5,139},
{23,12,17,129},
{23,12,21,135},
{23,12,25,149},
{23,12,29,175},
{23,12,45,171},
{23,12,53,177},
{23,13,5,178},
{23,13,17,176},
{23,13,21,172},
{23,13,25,151},
{23,13,33,138},
{23,13,37,174},
{23,13,41,167},
{23,13,49,140},
{23,13,57,143},
{23,14,1,144},
{23,14,13,114},
{23,14,17,108},
{23,14,29,171},
{23,14,37,151},
{23,14,48,87},
{23,14,53,92},
{23,14,57,118},
{23,15,1,146},
{23,15,9,123},
{23,15,13,107},
{23,15,17,116},
{23,15,25,122},
{23,15,37,83},
{23,15,41,70},
{23,15,45,65},
{23,16,1,38},
{23,16,5,24},
{23,16,17,28},
{23,16,20,23},
{23,16,37,10},
{23,16,40,8},
{23,16,53,4},
{23,17,5,3},
{23,17,17,3},
{23,17,20,2},
{23,17,29,2},
{23,17,36,2},
{23,17,53,3},
{23,18,8,3},
{23,18,25,3},
{23,18,32,3},
{23,18,49,5},
{23,18,52,4},
{23,19,5,5},
{23,19,17,5},
{23,19,21,5},
{23,19,29,4},
{23,19,41,6},
{23,20,1,5},
{23,20,9,4},
{23,20,33,6},
{23,20,37,4},
{23,20,53,6},
{23,21,5,5},
{23,21,17,4},
{23,21,29,6},
{23,21,45,4},
{23,21,57,5},
{23,22,1,6},
{23,22,5,4},
{23,22,18,4},
{23,22,21,6},
{23,22,24,4},
{23,22,32,6},
{23,22,41,4},
{23,22,53,4},
{23,23,13,5},
{23,23,24,6},
{23,23,33,6},
{23,23,48,4},
{23,23,57,5},
{24,0,1,5},
{24,0,13,6},
{24,0,21,6},
{24,0,25,5},
{24,0,41,6},
{24,0,45,5},
{24,0,57,6},
{24,1,9,5},
{24,1,13,4},
{24,1,25,5},
{24,1,29,4},
{24,1,57,4},
{24,2,5,6},
{24,2,9,5},
{24,2,16,4},
{24,2,20,5},
{24,2,25,4},
{24,2,37,5},
{24,2,45,4},
{24,2,52,5},
{24,3,5,6},
{24,3,9,5},
{24,3,21,4},
{24,3,32,5},
{24,3,37,3},
{24,3,44,5},
{24,4,1,6},
{24,4,9,5},
{24,4,13,3},
{24,4,21,4},
{24,4,29,4},
{24,4,33,5},
{24,4,41,5},
{24,4,55,5},
{24,5,5,5},
{24,5,9,3},
{24,5,29,5},
{24,5,41,5},
{24,5,45,6},
{24,5,53,3},
{24,6,5,4},
{24,6,17,5},
{24,6,20,4},
{24,6,32,5},
{24,6,37,6},
{24,6,52,5},
{24,6,57,7},
{24,7,4,10},
{24,7,17,11},
{24,7,19,12},
{24,7,21,14},
{24,7,32,17},
{24,7,45,18},
{24,7,57,25},
{24,8,27,65},
{24,8,45,85},
{24,8,56,115},
{24,9,13,94},
{24,9,21,98},
{24,9,25,108},
{24,9,37,106},
{24,9,45,138},
{24,9,52,145},
{24,10,1,155},
{24,10,4,150},
{24,10,21,175},
{24,10,25,172},
{24,10,29,153},
{24,10,37,120},
{24,10,56,121},
{24,11,9,97},
{24,11,17,68},
{24,11,24,84},
{24,11,28,102},
{24,11,45,110},
{24,12,0,113},
{24,12,5,112},
{24,12,13,112},
{24,12,19,118},
{24,12,25,135},
{24,12,28,141},
{24,12,38,163},
{24,12,40,160},
{24,12,44,153},
{24,12,56,122},
{24,13,5,131},
{24,13,17,129},
{24,13,24,142},
{24,13,37,107},
{24,13,41,107},
{24,13,44,115},
{24,13,57,111},
{24,14,5,105},
{24,14,8,105},
{24,14,13,114},
{24,14,21,128},
{24,14,25,121},
{24,14,29,92},
{24,14,33,68},
{24,14,37,58},
{24,14,41,53},
{24,14,44,50},
{24,14,56,46},
{24,15,5,44},
{24,15,12,42},
{24,15,16,40},
{24,15,20,41},
{24,15,26,46},
{24,15,37,44},
{24,15,44,37},
{24,15,57,28},
{24,16,1,26},
{24,16,13,17},
{24,16,28,12},
{24,16,40,7},
{24,16,49,5},
{24,16,57,4},
{24,17,4,3},
{24,17,8,3},
{24,17,24,2},
{24,17,48,2},
{24,18,5,2},
{24,18,12,2},
{24,18,17,3},
{24,18,20,3},
{24,18,36,2},
{24,18,45,2},
{24,19,0,2},
{24,19,13,2},
{24,19,24,2},
{24,19,34,2},
{24,19,40,2},
{24,19,48,2},
{24,20,5,2},
{24,20,17,2},
{24,20,29,2},
{24,20,45,2},
{24,20,57,2},
{24,21,9,2},
{24,21,21,2},
{24,21,32,3},
{24,21,37,2},
{24,21,44,2},
{24,21,57,2},
{24,22,4,4},
{24,22,8,4},
{24,22,24,4},
{24,22,29,4},
{24,22,44,4},
{24,22,56,4},
{24,23,3,5},
{24,23,12,6},
{24,23,20,4},
{24,23,32,4},
{24,23,41,4},
{24,23,45,5},
{25,0,1,4},
{25,0,4,5},
{25,0,16,4},
{25,0,32,4},
{25,0,45,5},
{25,1,0,5},
{25,1,17,4},
{25,1,24,4},
{25,1,36,5},
{25,1,44,4},
{25,1,56,6},
{25,2,0,5},
{25,2,12,4},
{25,2,25,6},
{25,2,32,5},
{25,2,37,4},
{25,2,41,4},
{25,2,56,5},
{25,3,8,5},
{25,3,12,5},
{25,3,24,5},
{25,3,29,5},
{25,3,41,5},
{25,3,52,5},
{25,3,56,6},
{25,4,5,4},
{25,4,12,4},
{25,4,25,5},
{25,4,28,4},
{25,4,41,4},
{25,4,44,6},
{25,4,52,5, occType::OCC_NONE, true, false},
{ },
    };
static const ALDataSample samplea2b[] =
    {
{8,0,7,2, occType::OCC_NONE, true, false},
{8,0,19,2},
{8,0,35,2},
{8,0,47,2},
{8,1,3,2},
{8,1,11,3},
{8,1,15,2},
{8,1,19,2},
{8,1,35,2},
{8,1,47,2},
{8,1,59,2},
{8,2,11,2},
{8,2,23,2},
{8,2,39,2},
{8,2,51,2},
{8,3,3,2},
{8,3,19,2},
{8,3,35,2},
{8,3,51,2},
{8,4,3,2},
{8,4,19,2},
{8,4,27,2},
{8,4,43,2},
{8,4,59,2},
{8,5,15,2},
{8,5,23,2},
{8,5,35,2},
{8,5,51,2},
{8,6,7,2},
{8,6,23,2},
{8,6,39,3},
{8,6,55,4},
{8,6,59,5},
{8,7,3,7},
{8,7,19,18},
{8,7,31,29},
{8,7,35,31},
{8,7,47,40},
{8,8,3,52},
{8,8,19,59},
{8,8,35,70},
{8,8,47,85},
{8,8,59,79},
{8,9,11,86},
{8,9,15,88},
{8,9,31,96},
{8,9,35,98},
{8,9,47,112},
{8,9,51,116},
{8,10,3,132},
{8,10,7,137},
{8,10,23,162},
{8,10,31,159},
{8,10,35,159},
{8,10,44,156},
{8,10,47,158},
{8,10,59,151},
{8,11,3,153},
{8,11,15,158},
{8,11,31,157},
{8,11,35,154},
{8,11,43,156},
{8,11,51,152},
{8,11,55,152},
{8,12,15,174},
{8,12,31,160},
{8,12,39,155},
{8,12,47,142},
{8,12,59,153},
{8,13,3,154},
{8,13,11,150},
{8,13,19,142},
{8,13,21,140},
{8,13,31,129},
{8,13,35,136},
{8,13,47,135},
{8,13,51,141},
{8,14,3,135},
{8,14,11,103},
{8,14,15,86},
{8,14,35,72},
{8,14,47,69},
{8,14,51,72},
{8,14,59,65},
{8,15,7,72},
{8,15,11,68},
{8,15,28,40},
{8,15,31,36},
{8,15,43,27},
{8,15,47,25},
{8,15,55,18},
{8,16,3,10},
{8,16,7,8},
{8,16,19,4},
{8,16,23,4},
{8,16,39,3},
{8,16,51,2},
{8,16,55,3},
{8,17,7,3},
{8,17,31,88},
{8,17,39,3},
{8,17,55,3},
{8,18,11,2},
{8,18,21,2},
{8,18,39,3},
{8,18,53,3},
{8,19,3,3},
{8,19,14,3},
{8,19,23,3},
{8,19,31,2},
{8,19,43,2},
{8,19,59,2},
{8,20,15,3},
{8,20,23,3},
{8,20,39,3},
{8,20,47,3},
{8,20,55,3},
{8,21,11,3},
{8,21,27,3},
{8,21,47,3},
{8,22,3,3},
{8,22,11,3},
{8,22,19,3},
{8,22,35,3},
{8,22,43,3},
{8,22,55,3},
{8,23,7,3},
{8,23,19,3},
{8,23,35,3},
{8,23,51,3},
{8,23,59,3},
{9,0,11,3},
{9,0,23,2},
{9,0,35,2},
{9,0,51,2},
{9,1,7,2},
{9,1,19,3},
{9,1,35,3},
{9,1,47,3},
{9,1,51,2},
{9,2,3,2},
{9,2,19,2},
{9,2,31,3},
{9,2,35,2},
{9,2,51,2},
{9,2,59,2},
{9,3,19,2},
{9,3,31,2},
{9,3,43,2},
{9,3,55,2},
{9,4,3,2},
{9,4,15,2},
{9,4,27,2},
{9,4,39,2},
{9,4,51,2},
{9,5,7,2},
{9,5,15,2},
{9,5,31,2},
{9,5,39,2},
{9,5,50,2},
{9,5,55,2},
{9,6,11,2},
{9,6,27,2},
{9,6,39,2},
{9,6,48,3},
{9,6,51,2},
{9,6,59,3},
{9,7,11,79},
{9,7,15,83},
{9,7,27,87},
{9,7,39,87},
{9,7,51,87},
{9,8,3,87},
{9,8,11,87},
{9,8,15,94},
{9,8,23,11},
{9,8,35,22},
{9,8,39,24},
{9,8,47,24},
{9,9,3,30},
{9,9,15,37},
{9,9,19,43},
{9,9,31,32},
{9,9,43,31},
{9,9,51,38},
{9,9,55,49},
{9,10,3,53},
{9,10,7,63},
{9,10,23,39},
{9,10,27,37},
{9,10,35,47},
{9,10,47,43},
{9,10,51,46},
{9,11,3,102},
{9,11,11,135},
{9,11,15,173},
{9,11,27,58},
{9,11,31,48},
{9,11,39,61},
{9,11,51,36},
{9,11,55,33},
{9,12,3,46},
{9,12,11,61},
{9,12,15,79},
{9,12,23,101},
{9,12,27,116},
{9,12,43,172},
{9,12,47,107},
{9,12,51,94},
{9,13,7,153},
{9,13,11,141},
{9,13,19,86},
{9,13,23,108},
{9,13,31,162},
{9,13,43,52},
{9,13,51,62},
{9,13,54,99},
{9,14,7,121},
{9,14,11,129},
{9,14,19,126},
{9,14,27,71},
{9,14,31,86},
{9,14,43,54},
{9,14,47,64},
{9,14,59,115},
{9,15,7,105},
{9,15,11,101},
{9,15,15,128},
{9,15,27,43},
{9,15,35,39},
{9,15,39,39},
{9,15,54,28},
{9,16,7,20},
{9,16,11,16},
{9,16,19,9},
{9,16,27,6},
{9,16,35,4},
{9,16,39,3},
{9,16,51,2},
{9,16,59,2},
{9,17,11,3},
{9,17,27,3},
{9,17,38,3},
{9,17,51,3},
{9,18,3,3},
{9,18,11,3},
{9,18,23,3},
{9,18,35,3},
{9,18,47,3},
{9,19,10,3},
{9,19,27,3},
{9,19,42,3},
{9,19,55,3},
{9,20,11,3},
{9,20,27,3},
{9,20,43,3},
{9,20,51,3},
{9,21,3,3},
{9,21,23,3},
{9,21,42,3},
{9,21,55,3},
{9,22,15,3},
{9,22,27,3},
{9,22,39,3},
{9,22,51,3},
{9,23,3,3},
{9,23,11,2},
{9,23,15,2},
{9,23,35,2},
{9,23,50,2},
{10,0,3,2},
{10,0,15,2},
{10,0,22,2},
{10,0,27,2},
{10,0,35,3},
{10,1,2,2},
{10,1,19,2},
{10,1,26,2},
{10,1,47,2},
{10,1,59,2},
{10,2,15,2},
{10,2,30,2},
{10,2,42,2},
{10,3,19,2},
{10,3,35,2},
{10,3,43,2},
{10,3,51,2},
{10,4,7,2},
{10,4,22,2},
{10,4,35,2},
{10,4,47,2},
{10,5,2,2},
{10,5,19,2},
{10,5,30,2},
{10,5,39,2},
{10,5,55,2},
{10,6,10,2},
{10,6,26,2},
{10,6,39,2},
{10,6,50,3},
{10,7,7,86},
{10,7,15,87},
{10,7,27,91},
{10,7,31,95},
{10,7,51,20},
{10,8,2,38},
{10,8,6,45},
{10,8,23,56},
{10,8,39,78},
{10,8,50,94},
{10,8,59,91},
{10,9,10,114},
{10,9,14,124},
{10,9,23,80},
{10,9,35,75},
{10,9,47,76},
{10,9,50,92},
{10,10,3,116},
{10,10,10,136},
{10,10,15,145},
{10,10,23,152},
{10,10,27,157},
{10,10,43,170},
{10,10,55,172},
{10,11,2,171},
{10,11,11,172},
{10,11,22,174},
{10,11,31,174},
{10,11,43,175},
{10,11,51,174},
{10,12,2,176},
{10,12,7,179},
{10,12,11,178},
{10,12,27,114},
{10,12,39,140},
{10,12,42,154},
{10,12,58,118},
{10,13,2,94},
{10,13,7,69},
{10,13,11,74},
{10,13,19,70},
{10,13,26,80},
{10,13,39,60},
{10,13,43,48},
{10,13,50,55},
{10,13,58,60},
{10,14,2,48},
{10,14,15,78},
{10,14,18,88},
{10,14,31,76},
{10,14,35,61},
{10,14,50,50},
{10,14,55,49},
{10,14,58,46},
{10,15,11,42},
{10,15,18,43},
{10,15,26,48},
{10,15,34,72},
{10,15,38,47},
{10,15,42,49},
{10,15,50,34},
{10,15,59,28},
{10,16,2,26},
{10,16,15,17},
{10,16,18,13},
{10,16,35,5},
{10,16,39,4},
{10,16,50,3},
{10,17,2,2},
{10,17,7,2},
{10,17,22,2},
{10,17,39,2},
{10,17,50,2},
{10,18,7,2},
{10,18,18,2},
{10,18,31,2},
{10,18,42,2},
{10,18,54,2},
{10,19,6,2},
{10,19,14,3},
{10,19,19,3},
{10,19,30,2},
{10,19,42,3},
{10,19,55,2},
{10,20,3,3},
{10,20,6,3},
{10,20,26,3},
{10,20,38,3},
{10,20,46,3},
{10,21,2,2},
{10,21,14,2},
{10,21,26,2},
{10,21,39,3},
{10,21,52,3},
{10,22,2,3},
{10,22,14,3},
{10,22,23,3},
{10,22,35,2},
{10,22,47,2},
{10,22,59,2},
{10,23,18,2},
{10,23,30,2},
{10,23,42,2},
{10,23,50,3},
{10,23,54,3},
{11,0,22,2},
{11,0,34,2},
{11,0,46,2},
{11,0,51,2},
{11,1,6,2},
{11,1,19,2},
{11,1,30,2},
{11,1,43,2},
{11,2,10,2},
{11,2,19,2},
{11,2,27,2},
{11,2,34,2},
{11,2,42,2},
{11,2,51,2},
{11,3,6,2},
{11,3,22,2},
{11,3,30,2},
{11,3,42,2},
{11,3,55,2},
{11,4,10,2},
{11,4,26,2},
{11,4,43,2},
{11,4,50,2},
{11,5,6,2},
{11,5,14,2},
{11,5,26,2},
{11,5,34,2},
{11,5,50,2},
{11,6,2,2},
{11,6,14,2},
{11,6,30,2},
{11,6,46,3},
{11,6,58,4},
{11,7,3,5},
{11,7,15,85},
{11,7,27,20},
{11,7,34,26},
{11,7,42,34},
{11,7,54,44},
{11,8,10,57},
{11,8,23,67},
{11,8,35,77},
{11,8,42,89},
{11,8,54,89},
{11,9,6,98},
{11,9,14,101},
{11,9,22,105},
{11,9,24,109},
{11,9,34,112},
{11,9,50,116},
{11,10,6,115},
{11,10,8,114},
{11,10,14,113},
{11,10,26,112},
{11,10,30,114},
{11,10,35,112},
{11,10,50,111},
{11,11,2,110},
{11,11,6,111},
{11,11,22,117},
{11,11,26,116},
{11,11,34,115},
{11,11,51,112},
{11,12,2,113},
{11,12,14,112},
{11,12,26,116},
{11,12,38,116},
{11,12,46,111},
{11,12,50,107},
{11,13,2,105},
{11,13,6,104},
{11,13,22,99},
{11,13,30,100},
{11,13,34,98},
{11,13,42,96},
{11,13,50,97},
{11,13,58,96},
{11,14,6,96},
{11,14,18,95},
{11,14,22,93},
{11,14,30,94},
{11,14,46,77},
{11,14,54,67},
{11,15,2,69},
{11,15,6,79},
{11,15,18,48},
{11,15,26,38},
{11,15,34,32},
{11,15,46,26},
{11,15,50,25},
{11,15,58,20},
{ },
    };
// Light sensor seems to be rarely getting adequate light.
static const ALDataSample samplea3[] =
    {
{14,11,2,31, ALDataSample::NO_OCC_EXPECTATION, false, ALDataSample::UNKNOWN_ACT_OCC},
{14,11,14,33},
{14,11,18,8},
{14,11,26,8},
{14,11,42,10},
{14,11,54,9},
{14,12,6,9},
{14,12,14,9},
{14,12,26,10},
{14,12,30,9},
{14,12,46,9},
{14,12,54,9},
{14,13,6,9},
{14,13,18,8},
{14,13,34,8},
{14,13,50,8},
{14,13,58,8},
{14,14,10,7},
{14,14,22,8},
{14,14,38,8},
{14,14,46,8},
{14,15,1,8},
{14,15,6,8},
{14,15,18,7},
{14,15,22,7},
{14,15,38,7},
{14,15,46,7},
{14,15,58,7},
{14,16,10,6},
{14,16,22,6},
{14,16,34,6},
{14,16,50,6},
{14,17,1,6},
{14,17,10,6},
{14,17,30,6},
{14,17,38,6},
{14,17,50,6},
{14,17,59,6},
{14,18,10,6},
{14,18,22,6},
{14,18,34,6},
{14,18,54,6},
{14,19,10,6},
{14,19,22,6},
{14,19,37,6},
{14,19,43,6},
{14,19,54,6},
{14,20,6,6},
{14,20,18,6},
{14,20,34,6},
{14,20,46,6},
{14,21,3,5},
{14,21,14,6},
{14,21,30,6},
{14,21,38,6},
{14,21,54,6},
{14,22,6,6},
{14,22,14,6},
{14,22,26,6},
{14,23,2,6},
{14,23,26,6},
{14,23,42,6},
{14,23,50,6},
{15,0,6,6},
{15,0,18,6},
{15,0,30,6},
{15,0,42,6},
{15,0,56,6},
{15,1,6,6},
{15,1,22,6},
{15,1,34,6},
{15,1,46,6},
{15,1,58,6},
{15,2,10,6},
{15,2,26,6},
{15,2,38,6},
{15,2,50,6},
{15,3,2,6},
{15,3,6,6},
{15,3,26,6},
{15,3,38,6},
{15,3,50,6},
{15,3,58,6},
{15,4,10,6, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, false, ALDataSample::SB_ECOMAX}, // Should try and achieve some sort of setback.
{15,4,22,6},
{15,4,34,6},
{15,4,42,6},
{15,4,54,6},
{15,5,8,6},
{15,5,26,6},
{15,5,38,6},
{15,5,54,6},
{15,6,2,6},
{15,6,14,6},
{15,6,30,6},
{15,6,38,6},
{15,6,54,6},
{15,7,2,6},
{15,7,14,6},
{15,7,23,6},
{15,7,34,6},
{15,7,46,7},
{15,7,54,7},
{15,8,6,7},
{15,8,22,7},
{15,8,26,8},
{15,8,38,8},
{15,8,54,7},
{15,9,6,8},
{15,9,18,8},
{15,9,30,8},
{15,9,34,8},
{15,9,42,9},
{15,9,46,9},
{15,9,58,8},
{15,10,14,6},
{15,10,22,7},
{15,10,26,8},
{15,10,38,8},
{15,10,42,7},
{15,10,46,7},
{15,11,2,9},
{15,11,6,12},
{15,11,10,13},
{15,11,22,9},
{15,11,38,10},
{15,11,42,12},
{15,11,50,8},
{15,11,58,11},
{15,12,6,11},
{15,12,10,8},
{15,12,22,11},
{15,12,26,11},
{15,12,30,10},
{15,12,38,11},
{15,12,46,8},
{15,12,58,10},
{15,13,2,9},
{15,13,10,9},
{15,13,22,8},
{15,13,34,11},
{15,13,42,10},
{15,13,50,8},
{15,13,58,8},
{15,14,2,10},
{15,14,10,8},
{15,14,14,9},
{15,14,22,8},
{15,14,30,7},
{15,14,34,8},
{15,14,41,9},
{15,14,42,10},
{15,14,58,8},
{15,15,2,7},
{15,15,10,9},
{15,15,18,7},
{15,15,22,7},
{15,15,34,6},
{15,15,46,6},
{15,15,54,6},
{15,16,2,6},
{15,16,18,6},
{15,16,30,6},
{15,16,42,6},
{15,16,54,7},
{15,17,10,7},
{15,17,22,7},
{15,17,34,7},
{15,17,46,7},
{15,18,2,7},
{15,18,18,7},
{15,18,31,7},
{15,18,46,7},
{15,18,54,7},
{15,19,2,8},
{15,19,14,7},
{15,19,22,7},
{15,19,34,7},
{15,19,50,7},
{15,20,2,7},
{15,20,34,7},
{15,20,50,7},
{15,21,2,7},
{15,21,18,7},
{15,21,34,7},
{15,21,50,7},
{15,22,6,7},
{15,22,18,6},
{15,22,26,6},
{15,22,38,6},
{15,22,58,6},
{15,23,10,6},
{15,23,30,6},
{15,23,42,6},
{15,23,54,6},
{16,0,6,6},
{16,0,18,6},
{16,0,31,6},
{16,0,42,6},
{16,0,54,6},
{16,1,10,6},
{16,1,22,6},
{16,1,38,6},
{16,1,50,6},
{16,2,2,6},
{16,2,18,6},
{16,2,30,6},
{16,2,42,6},
{16,2,50,6},
{16,3,10,6},
{16,3,22,5},
{16,3,30,6},
{16,3,42,6},
{16,3,54,6},
{16,4,6,5},
{16,4,10,6},
{16,4,14,5},
{16,4,30,6},
{16,4,34,5},
{16,4,42,6},
{16,4,46,5},
{16,4,54,6},
{16,5,2,6},
{16,5,10,5},
{16,5,14,5},
{16,5,26,5},
{16,5,38,5},
{16,5,50,5},
{16,5,58,6},
{16,6,2,5},
{16,6,10,5},
{16,6,14,5},
{16,6,26,5},
{16,6,34,6},
{16,6,38,6},
{16,6,50,6},
{16,7,2,6},
{16,7,14,6},
{16,7,26,6},
{16,7,40,6},
{16,7,50,6},
{16,8,6,6},
{16,8,11,6},
{16,8,46,6},
{16,9,2,6},
{16,9,18,7},
{16,9,30,6},
{16,9,34,7},
{16,9,42,7},
{16,9,46,6},
{16,9,54,7},
{16,10,6,7},
{16,10,18,8},
{16,10,30,7},
{16,10,34,8},
{16,10,42,8},
{16,10,46,8},
{16,11,2,8},
{16,11,6,9},
{16,11,22,9},
{16,11,30,10},
{16,11,38,9},
{16,11,42,9},
{16,11,46,8},
{16,11,54,9},
{16,11,58,8},
{16,12,2,9},
{16,12,6,10},
{16,12,18,9},
{16,12,26,9},
{16,12,34,9},
{16,12,38,8},
{16,12,50,7},
{16,12,54,7},
{16,12,58,8},
{16,13,6,8},
{16,13,10,7},
{16,13,14,7},
{16,13,30,7},
{16,13,42,8},
{16,13,50,7},
{16,13,56,7},
{16,13,58,6},
{16,14,2,6},
{16,14,14,6},
{16,14,34,6},
{16,14,44,7},
{16,14,50,7},
{16,14,58,6},
{16,15,6,7},
{16,15,10,6},
{16,15,14,7},
{16,15,22,7},
{16,15,32,6},
{16,15,46,6},
{16,15,58,6},
{16,16,10,6},
{16,16,22,6},
{16,16,34,6},
{16,16,47,6},
{16,16,54,6},
{16,17,6,5},
{16,17,10,5},
{16,17,26,5},
{16,17,34,15},
{16,17,46,14},
{16,17,54,16},
{16,17,58,16},
{16,18,2,14},
{16,18,14,16},
{16,18,18,14},
{16,18,30,14},
{16,18,38,17},
{16,18,42,15},
{16,18,50,15},
{16,18,58,15},
{16,19,11,17},
{16,19,26,17},
{16,19,34,15},
{16,19,38,15},
{16,19,54,17},
{16,19,58,15},
{16,20,6,15},
{16,20,14,16},
{16,20,22,6},
{16,20,30,6},
{16,20,42,6},
{16,20,54,6},
{16,21,6,6},
{16,21,18,5},
{16,21,30,6},
{16,21,38,5},
{16,21,50,5},
{16,21,54,5},
{16,22,6,5},
{16,22,10,5},
{16,22,26,5},
{16,22,46,5},
{16,22,58,5},
{16,23,6,5},
{16,23,18,5},
{16,23,34,5},
{16,23,50,5},
{17,0,6,5},
{17,0,22,5},
{17,0,30,5},
{17,0,38,5},
{17,0,50,5},
{17,1,2,5},
{17,1,10,5},
{17,1,26,5},
{17,1,38,5},
{17,1,46,5},
{17,1,58,5},
{17,2,10,5},
{17,2,26,5},
{17,2,46,5},
{17,2,58,5},
{17,3,6,5},
{17,3,22,5},
{17,3,38,5},
{17,3,54,5},
{17,4,10,5},
{17,4,30,5},
{17,4,46,5},
{17,5,2,5},
{17,5,14,5},
{17,5,26,5},
{17,5,34,5},
{17,5,50,5},
{17,6,10,5},
{17,6,22,15},
{17,6,26,16},
{17,6,34,15},
{17,6,42,15},
{17,6,50,16},
{17,6,58,16},
{17,7,14,6},
{17,7,22,6},
{17,7,34,7},
{17,7,46,6},
{17,7,58,6},
{17,8,10,6},
{17,8,30,7},
{17,8,46,11},
{17,8,54,7},
{17,9,2,8},
{17,9,14,7},
{17,9,18,8},
{17,9,26,20},
{17,9,38,14},
{17,9,42,13},
{17,9,49,12},
{17,10,2,12},
{17,10,14,8},
{17,10,26,9},
{17,10,30,11},
{17,10,42,8},
{17,10,54,9},
{17,10,58,8},
{17,11,10,7},
{17,11,22,7},
{17,11,30,7},
{17,11,34,7},
{17,11,50,7},
{17,11,58,8},
{17,12,2,7},
{17,12,10,8},
{17,12,14,8},
{17,12,26,8},
{17,12,34,17},
{17,12,42,20},
{17,12,46,18},
{17,12,58,18},
{17,13,10,18},
{17,13,18,18},
{17,13,26,18},
{17,13,34,16},
{17,13,36,18},
{17,13,38,16},
{17,13,42,16},
{17,13,54,7},
{17,14,2,7},
{17,14,10,17},
{17,14,14,16},
{17,14,22,7},
{17,14,26,7},
{17,14,38,7},
{17,14,50,7},
{17,15,2,16},
{17,15,6,18},
{17,15,10,15},
{17,15,18,15},
{17,15,26,18},
{17,15,30,17},
{17,15,42,15},
{17,15,44,15},
{17,15,46,6},
{17,15,50,6},
{17,16,2,6},
{17,16,14,6},
{17,16,26,6},
{17,16,38,6},
{17,16,50,5},
{17,16,54,5},
{17,17,10,5},
{17,17,26,5},
{17,17,34,5},
{17,17,42,5},
{17,17,58,5},
{17,18,10,17},
{17,18,26,15},
{17,18,38,15},
{17,18,58,15},
{17,19,10,16},
{17,19,14,15},
{17,19,18,15},
{17,19,30,16},
{17,19,42,16},
{17,19,54,6},
{17,20,6,5},
{17,20,22,5},
{17,20,34,5},
{17,20,46,5},
{17,21,2,5},
{17,21,18,5},
{17,21,30,5},
{17,21,50,5},
{17,22,2,5},
{17,22,14,5},
{17,22,30,5},
{17,22,38,5},
{17,22,57,5},
{17,23,6,5},
{17,23,22,5},
{17,23,30,5},
{17,23,46,5},
{17,23,58,5},
{18,0,10,5},
{18,0,22,5},
{18,0,38,5},
{18,0,58,5},
{18,1,10,5},
{18,1,26,5},
{18,1,42,5},
{18,1,50,5},
{18,2,2,5},
{18,2,11,5},
{18,2,22,5},
{18,2,38,5},
{18,2,50,5},
{18,3,2,5},
{18,3,18,5},
{18,3,30,5},
{18,3,42,5},
{18,3,54,5},
{18,4,6,5},
{18,4,14,5},
{18,4,26,5},
{18,4,38,5},
{18,4,54,5},
{18,5,10,5},
{18,5,26,5},
{18,5,42,5},
{18,5,58,5},
{18,6,14,5},
{18,6,30,6},
{18,6,34,5},
{18,6,38,6},
{18,6,50,6},
{18,7,2,6},
{18,7,14,6},
{18,7,26,6},
{18,7,38,6},
{18,7,54,6},
{18,8,6,6},
{18,8,26,6},
{18,8,42,6},
{18,8,54,6},
{18,9,6,7},
{18,9,18,7},
{18,9,34,6},
{18,9,50,6},
{18,10,6,7},
{18,10,22,8},
{18,10,34,11},
{18,10,46,8},
{18,10,50,11},
{18,11,2,8},
{18,11,14,9},
{18,11,18,6},
{18,11,34,9},
{18,11,37,8},
{18,11,38,8},
{18,11,46,7},
{18,11,54,8},
{18,12,6,8},
{18,12,12,7},
{18,12,18,7},
{18,12,26,8},
{18,12,30,8},
{18,12,42,7},
{18,12,46,7},
{18,13,2,7},
{18,13,14,7},
{18,13,24,7},
{18,13,34,8},
{18,13,42,7},
{18,13,50,6},
{18,13,54,6},
{18,13,58,7},
{18,14,6,6},
{18,14,10,7},
{18,14,18,6},
{18,14,26,7},
{18,14,34,7},
{18,14,42,6},
{18,14,46,6},
{18,15,2,6},
{18,15,22,6},
{18,15,34,6},
{18,15,38,7},
{18,15,46,7},
{18,15,54,7},
{18,16,2,6},
{18,16,12,16},
{18,16,22,6},
{18,16,34,6},
{18,16,54,5},
{18,17,4,5},
{18,17,10,5},
{18,17,22,5},
{18,17,34,5},
{18,17,46,5},
{18,18,2,5},
{18,18,14,5},
{18,18,18,6},
{18,18,22,5},
{18,18,34,6},
{18,18,47,6},
{18,18,58,18},
{18,19,6,17},
{18,19,14,16},
{18,19,26,16},
{18,19,30,17},
{18,19,38,5},
{18,19,50,5},
{18,20,10,5},
{18,20,26,5},
{18,20,42,6},
{18,20,58,6},
{18,21,6,6},
{18,21,14,6},
{18,21,25,6},
{18,21,30,5},
{18,21,34,6},
{18,21,42,5},
{18,21,54,5},
{18,22,6,5},
{18,22,22,5},
{18,22,30,5},
{18,22,50,5},
{18,23,2,5},
{18,23,14,5},
{18,23,26,5},
{18,23,42,5},
{18,23,54,5},
{19,0,2,5},
{19,0,18,5},
{19,0,30,5},
{19,0,42,5},
{19,0,50,5},
{19,1,6,5},
{19,1,22,5},
{19,1,30,5},
{19,1,42,5},
{19,1,58,5},
{19,2,10,5},
{19,2,26,5},
{19,2,34,5},
{19,2,46,5},
{19,2,58,5},
{19,3,2,5},
{19,3,10,5},
{19,3,26,5},
{19,3,38,5},
{19,3,50,5},
{19,3,59,5},
{19,4,10,5},
{19,4,26,5},
{19,4,38,5},
{19,4,54,5},
{19,5,6,5},
{19,5,26,5},
{19,5,38,5},
{19,5,50,5},
{19,6,3,17},
{19,6,10,15},
{19,6,18,5},
{19,6,30,5},
{19,6,46,5},
{19,6,50,6},
{19,7,1,6},
{19,7,10,6},
{19,7,22,6},
{19,7,38,6},
{19,7,50,6},
{19,8,2,6},
{19,8,14,6},
{19,8,26,7},
{19,8,38,7},
{19,8,50,6},
{19,9,3,6},
{19,9,14,7},
{19,9,22,7},
{19,9,30,7},
{19,9,42,7},
{19,9,54,7},
{19,10,2,8},
{19,10,14,7},
{19,10,26,7},
{19,10,38,7},
{19,10,50,7},
{19,10,58,7},
{19,11,10,7},
{19,11,18,8},
{19,11,26,8},
{19,11,34,8},
{19,11,42,7},
{19,11,54,7},
{19,11,58,6},
{19,12,2,6},
{19,12,6,7},
{19,12,10,7},
{19,12,22,7},
{19,12,29,7},
{19,12,30,7},
{19,12,46,7},
{19,12,54,7},
{19,13,7,6},
{19,13,10,6},
{19,13,22,7},
{19,13,34,7},
{19,13,38,8},
{19,13,46,6},
{19,14,2,6},
{19,14,14,5},
{19,14,26,5},
{19,14,34,6},
{19,14,38,6},
{19,14,46,7},
{19,14,50,7},
{19,14,54,6},
{19,15,6,5},
{19,15,18,6},
{19,15,30,6},
{19,15,38,5},
{19,15,54,5},
{19,16,10,5},
{19,16,20,5},
{19,16,30,5},
{19,16,42,5},
{19,16,50,5},
{19,17,6,5},
{19,17,18,15},
{19,17,30,16},
{19,17,42,16},
{19,17,54,15},
{19,18,2,15},
{19,18,6,16},
{19,18,14,15},
{19,18,26,16},
{19,18,30,15},
{19,18,42,16},
{19,18,54,15},
{19,18,58,15},
{19,19,6,17},
{19,19,14,17},
{19,19,18,17},
{19,19,26,15},
{19,19,34,15},
{19,19,42,15},
{19,19,57,16},
{19,20,6,5},
{19,20,10,6},
{19,20,14,6},
{19,20,26,6},
{19,20,38,5},
{19,20,46,5},
{19,20,54,5},
{19,21,6,5},
{19,21,16,5},
{19,21,19,5},
{19,21,26,5},
{19,21,42,5},
{19,21,58,5},
{19,22,14,5},
{19,22,26,5},
{19,22,42,5},
{19,22,58,5},
{19,23,14,5},
{19,23,30,5},
{19,23,46,5},
{20,0,2,5},
{20,0,10,5},
{20,0,16,5},
{20,0,26,5},
{20,0,34,5},
{20,0,46,5},
{20,1,2,5},
{20,1,18,5},
{20,1,26,5},
{20,1,42,5},
{20,1,50,5},
{20,2,2,5},
{20,2,18,5},
{20,2,30,5},
{20,2,38,5},
{20,2,46,5},
{20,3,2,5},
{20,3,18,5},
{20,3,30,5},
{20,3,34,5},
{20,3,46,5},
{20,4,1,5},
{20,4,14,5},
{20,4,26,5},
{20,4,38,5},
{20,4,50,5},
{20,5,6,5},
{20,5,18,5},
{20,5,30,5},
{20,5,42,5},
{20,5,50,5},
{20,6,5,5},
{20,6,14,5},
{20,6,30,5},
{20,6,38,5},
{20,6,51,6},
{20,7,6,6},
{20,7,14,6},
{20,7,21,6},
{20,7,38,6},
{20,7,50,6},
{20,8,2,6},
{20,8,6,7},
{20,8,14,7},
{20,8,21,6},
{20,8,35,17},
{20,8,38,15},
{20,8,50,7},
{20,9,2,6},
{20,9,6,16},
{20,9,10,6},
{20,9,25,7},
{20,9,30,9},
{20,9,33,7},
{20,9,46,7},
{20,9,54,7},
{20,10,6,7},
{20,10,10,11},
{20,10,18,6},
{20,10,29,7},
{20,10,46,7},
{20,10,56,10},
{20,11,2,10},
{20,11,10,6},
{20,11,18,8},
{20,11,30,10},
{20,11,42,6},
{20,11,46,7},
{20,11,50,7},
{20,12,2,7},
{20,12,10,7},
{20,12,14,7},
{20,12,30,8},
{20,12,48,7},
{20,12,58,7},
{20,13,6,7},
{20,13,18,6},
{20,13,30,6},
{20,13,46,6},
{20,13,57,6},
{20,14,6,7},
{20,14,10,7},
{20,14,22,6},
{20,14,38,7},
{20,14,46,6},
{20,14,50,6},
{20,14,53,7},
{20,15,1,7},
{20,15,10,6},
{20,15,18,5},
{20,15,30,5},
{20,15,46,5},
{20,15,58,5},
{20,16,10,11},
{20,16,14,10},
{20,16,19,5},
{20,16,29,10},
{20,16,34,11},
{20,16,42,11},
{20,16,49,5},
{20,16,54,5},
{20,17,6,5},
{20,17,18,5},
{20,17,22,6},
{20,17,26,6},
{20,17,38,6},
{20,17,46,6},
{20,18,2,6},
{20,18,14,6},
{20,18,30,6},
{20,18,45,6},
{20,19,2,6},
{20,19,18,6},
{20,19,30,6},
{20,19,46,6},
{20,19,57,6},
{20,20,13,6},
{20,20,30,6},
{20,20,41,6},
{20,20,58,6},
{20,21,13,6},
{20,21,29,6},
{20,21,41,6},
{20,21,53,6},
{20,22,10,6},
{20,22,29,6},
{20,22,42,6},
{20,22,58,6},
{20,23,6,6},
{20,23,13,5},
{20,23,17,5},
{20,23,33,5},
{20,23,50,5},
{21,0,10,5},
{21,0,22,5},
{21,0,38,5},
{21,0,54,5},
{21,1,9,5},
{21,1,22,5},
{21,1,38,5},
{21,1,49,5},
{21,1,57,5},
{21,2,9,5},
{21,2,17,5},
{21,2,26,5},
{21,2,37,5},
{21,2,54,5},
{21,3,10,5},
{21,3,26,5},
{21,3,38,5},
{21,3,54,5},
{21,4,2,5},
{21,4,17,5},
{21,4,29,5},
{21,4,37,5},
{21,4,57,5},
{21,5,13,5},
{21,5,25,5},
{21,5,41,5},
{21,5,57,5},
{21,6,9,5},
{21,6,21,5},
{21,6,38,5},
{21,6,49,5},
{21,7,2,5},
{21,7,13,5},
{21,7,25,5},
{21,7,41,10},
{21,7,54,10},
{21,7,58,5},
{21,8,13,5},
{21,8,25,6},
{21,8,38,6},
{21,8,49,6},
{21,9,1,7},
{21,9,10,7},
{21,9,17,10},
{21,9,21,11},
{21,9,26,7},
{21,9,33,6},
{21,9,37,7},
{21,9,54,7},
{21,10,5,7},
{21,10,14,7},
{21,10,30,7},
{21,10,42,7},
{21,10,57,7},
{21,11,9,7},
{21,11,25,7},
{21,11,37,8},
{21,11,46,8},
{21,11,58,7},
{21,12,9,7},
{21,12,21,8},
{21,12,29,7},
{21,12,38,7},
{21,12,49,7},
{21,12,57,7},
{21,13,10,7},
{21,13,21,7},
{21,13,30,7},
{21,13,41,7},
{21,13,50,7},
{21,14,5,7},
{21,14,17,7},
{21,14,25,5},
{21,14,30,5},
{21,14,41,5},
{21,14,53,5},
{21,15,2,5},
{21,15,9,5},
{21,15,17,6},
{21,15,22,6},
{21,15,34,6},
{21,15,45,5},
{21,16,2,5},
{21,16,17,6},
{21,16,21,5},
{21,16,29,5},
{21,16,46,5},
{21,16,57,5},
{21,17,10,5},
{21,17,25,5},
{21,17,37,5},
{21,17,51,11},
{21,18,5,10},
{21,18,21,11},
{21,18,38,11},
{21,18,50,10},
{21,18,53,11},
{21,19,1,10},
{21,19,13,11},
{21,19,29,11},
{21,19,49,11},
{21,19,59,11},
{21,20,9,11},
{21,20,13,10},
{21,20,29,11},
{21,20,41,10},
{21,20,54,10},
{21,20,57,11},
{21,21,13,11},
{21,21,33,10},
{21,21,49,11},
{21,22,1,11},
{21,22,10,11},
{21,22,18,10},
{21,22,21,5},
{21,22,37,5},
{21,22,45,5},
{21,23,1,5},
{21,23,18,5},
{21,23,29,5},
{21,23,45,5},
{21,23,53,5},
{22,0,9,5},
{22,0,17,5},
{22,0,33,5},
{22,0,46,5},
{22,0,58,5},
{22,1,21,5},
{22,1,37,5},
{22,1,50,5},
{22,2,5,5},
{22,2,14,5},
{22,2,33,5},
{22,2,45,5},
{22,2,53,5},
{22,3,10,5},
{22,3,25,5},
{22,3,33,5},
{22,3,45,5},
{22,3,53,5},
{22,4,10,5},
{22,4,17,5},
{22,4,33,5},
{22,4,49,5},
{22,5,5,5},
{22,5,13,5},
{22,5,33,5},
{22,5,45,5},
{22,6,1,5},
{22,6,13,5},
{22,6,25,5},
{22,6,33,5},
{22,6,45,5},
{22,6,58,5},
{22,7,5,5},
{22,7,21,6},
{22,7,33,6},
{22,7,54,6},
{22,8,5,6},
{22,8,17,6},
{22,8,29,7},
{22,8,41,6},
{22,8,53,7},
{22,9,13,6},
{22,9,26,7},
{22,9,41,7},
{22,9,53,8},
{22,10,2,7},
{22,10,9,8},
{22,10,14,8},
{22,10,25,8},
{22,10,37,10},
{22,10,41,8},
{22,10,49,8},
{22,11,1,7},
{22,11,13,10},
{22,11,21,9},
{22,11,25,8},
{22,11,41,8},
{22,11,49,6},
{22,11,53,9},
{22,12,5,7},
{22,12,17,6},
{22,12,21,6},
{22,12,33,8},
{22,12,37,8},
{22,12,53,6},
{22,13,5,7},
{22,13,17,6},
{22,13,29,7},
{22,13,37,7},
{22,13,45,7},
{22,14,1,7},
{22,14,13,7},
{22,14,21,6},
{22,14,25,6},
{22,14,33,7},
{22,14,49,6},
{22,14,57,6},
{22,15,9,5},
{22,15,13,5},
{22,15,25,6},
{22,15,37,6},
{22,15,49,5},
{22,15,53,5},
{22,16,5,5},
{22,16,21,5},
{22,16,33,5},
{22,16,49,5},
{22,17,5,5},
{22,17,17,5},
{22,17,33,8},
{22,17,41,9},
{22,17,49,8},
{22,18,1,8},
{22,18,9,8},
{22,18,13,8},
{22,18,33,9},
{22,18,49,9},
{22,18,57,9},
{22,19,17,5},
{22,19,29,5},
{22,19,45,5},
{22,19,57,5},
{22,20,9,5},
{22,20,25,5},
{22,20,33,5},
{22,20,45,5},
{22,21,5,5},
{22,21,17,5},
{22,21,33,5},
{22,21,49,5},
{22,21,57,5},
{22,22,5,5},
{22,22,17,5},
{22,22,29,5},
{22,22,45,5},
{22,22,54,5},
{22,23,7,5},
{22,23,17,5},
{22,23,33,5},
{22,23,49,5},
{23,0,5,5},
{23,0,21,5},
{23,0,37,5},
{23,0,45,5},
{23,0,53,5},
{23,1,5,5},
{23,1,17,5},
{23,1,33,5},
{23,1,49,5},
{23,2,1,5},
{23,2,13,5},
{23,2,29,5},
{23,2,37,5},
{23,2,53,5},
{23,3,13,5},
{23,3,25,5},
{23,3,33,5},
{23,3,48,5},
{23,3,53,5},
{23,4,1,5},
{23,4,17,5},
{23,4,25,5},
{23,4,33,5},
{23,4,49,5},
{23,5,17,5},
{23,5,25,5},
{23,5,37,5},
{23,5,49,5},
{23,6,5,5},
{23,6,17,5},
{23,6,26,5},
{23,6,37,5},
{23,6,49,5},
{23,7,1,5},
{23,7,13,5},
{23,7,25,5},
{23,7,35,5},
{23,7,41,6},
{23,7,45,5},
{23,7,57,6},
{23,8,1,6},
{23,8,17,6},
{23,8,25,6},
{23,8,37,7},
{23,8,49,8},
{23,8,53,10},
{23,8,57,9},
{23,9,5,9},
{23,9,13,12},
{23,9,17,14},
{23,9,29,11},
{23,9,32,8},
{23,9,45,8},
{23,9,57,7},
{23,10,9,7},
{23,10,21,7},
{23,10,29,6},
{23,10,37,6},
{23,10,45,7},
{23,10,49,8},
{23,10,53,7},
{23,11,1,7},
{23,11,9,6},
{23,11,17,8},
{23,11,25,6},
{23,11,29,7},
{23,11,33,7},
{23,11,37,6},
{23,11,45,8},
{23,11,53,7},
{23,12,9,7},
{23,12,17,6},
{23,12,33,7},
{23,12,49,7},
{23,13,1,7},
{23,13,17,7},
{23,13,21,6},
{23,13,29,6},
{23,13,37,7},
{23,13,41,6},
{23,13,53,6},
{23,14,5,7},
{23,14,9,6},
{23,14,17,6},
{23,14,29,7},
{23,14,41,6},
{23,14,45,6},
{23,15,1,6},
{23,15,13,6},
{23,15,17,6},
{23,15,32,6},
{23,15,41,5},
{23,15,57,5},
{23,16,9,5},
{23,16,17,5},
{23,16,29,5},
{23,16,41,5},
{23,16,53,5},
{23,17,9,5},
{23,17,25,5},
{23,17,41,8},
{23,17,45,9},
{23,17,49,8},
{23,18,5,8},
{23,18,9,9},
{23,18,20,8},
{23,18,21,9},
{23,18,33,8},
{23,18,43,9},
{23,18,45,8},
{23,19,1,8},
{23,19,9,8},
{23,19,25,8},
{23,19,33,9},
{23,19,41,9},
{23,20,5,5},
{23,20,17,5},
{23,20,29,5},
{23,20,41,5},
{23,20,53,5},
{23,21,5,5},
{23,21,17,5},
{23,21,29,5},
{23,21,45,5},
{23,22,1,5},
{23,22,21,5},
{23,22,37,5},
{23,22,49,5},
{23,23,5,5},
{23,23,25,5},
{23,23,33,5},
{23,23,53,5},
{24,0,5,5},
{24,0,21,5},
{24,0,33,5},
{24,0,41,5},
{24,0,57,5},
{24,1,9,5},
{24,1,21,5},
{24,1,29,5},
{24,1,41,5},
{24,1,49,5},
{24,1,57,5},
{24,2,13,5},
{24,2,25,5},
{24,2,37,5},
{24,2,49,5},
{24,3,1,5},
{24,3,17,5},
{24,3,33,5},
{24,3,49,5},
{24,4,9,5},
{24,4,21,5},
{24,4,29,5},
{24,4,41,5},
{24,4,53,5},
{24,5,5,5},
{24,5,13,5},
{24,5,25,5},
{24,5,37,5},
{24,5,47,5},
{24,5,57,5},
{24,6,9,5},
{24,6,21,5},
{24,6,33,5},
{24,6,45,5},
{24,6,57,5},
{24,7,13,5},
{24,7,23,5},
{24,7,37,5},
{24,7,53,5},
{24,7,57,6},
{24,8,1,6},
{24,8,17,5},
{24,8,29,5},
{24,8,41,6},
{24,8,53,6},
{24,9,9,6},
{24,9,21,6},
{24,9,32,6},
{24,9,45,6},
{24,9,57,6},
{24,10,9,7},
{24,10,21,7},
{24,10,33,6},
{24,10,37,6},
{24,10,49,6},
{24,11,1,6},
{24,11,13,5},
{24,11,17,5},
{24,11,29,6},
{24,11,41,6},
{24,11,53,6},
{24,12,13,6},
{24,12,21,6},
{24,12,33,7},
{24,12,49,7},
{24,12,53,6},
{24,13,5,6},
{24,13,17,6},
{24,13,25,6},
{24,13,37,6},
{24,13,49,6},
{24,14,1,6},
{24,14,13,6},
{24,14,25,6},
{24,14,33,5},
{24,14,36,5},
{24,14,49,5},
{24,14,53,5},
{24,15,5,5},
{24,15,17,5},
{24,15,29,5},
{24,15,41,5},
{24,15,57,5},
{24,16,13,5},
{24,16,25,5},
{24,16,37,5},
{24,16,45,5},
{24,17,1,5},
{24,17,13,9},
{24,17,25,9},
{24,17,29,8},
{24,17,36,8},
{24,17,41,8},
{24,17,53,8},
{24,18,9,8},
{24,18,13,9},
{24,18,25,8},
{24,18,37,9},
{24,18,41,9},
{24,18,53,9},
{24,18,57,8},
{24,19,1,9},
{24,19,12,9},
{24,19,13,9},
{24,19,17,8},
{24,19,25,9},
{24,19,33,8},
{24,19,45,8},
{24,19,57,8},
{24,20,5,9},
{24,20,9,8},
{24,20,21,8},
{24,20,33,9},
{24,20,37,8},
{24,20,45,8},
{24,20,53,9},
{24,20,57,9},
{24,21,1,8},
{24,21,13,9},
{24,21,21,7},
{24,21,29,7},
{24,21,41,7},
{24,21,52,7},
{24,21,53,7},
{24,22,1,7},
{24,22,13,6},
{24,22,17,7},
{24,22,33,7},
{24,22,49,5},
{24,23,9,5},
{24,23,25,5},
{24,23,37,5},
{24,23,53,5},
{24,23,57,5},
{25,0,9,5},
{25,0,29,5},
{25,0,37,5},
{25,0,53,5},
{25,1,9,5},
{25,1,25,5},
{25,1,41,5},
{25,1,57,5},
{25,2,5,5},
{25,2,17,5},
{25,2,25,5},
{25,2,37,5},
{25,2,53,5},
{25,3,9,5},
{25,3,21,5},
{25,3,33,5},
{25,3,41,5},
{25,3,57,5},
{25,4,9,5, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, false, ALDataSample::SB_ECOMAX}, // Should try and achieve some sort of setback.
{25,4,21,5},
{25,4,33,5},
{25,4,45,5, ALDataSample::NO_OCC_EXPECTATION, ALDataSample::NO_RD_EXPECTATION, false, ALDataSample::SB_ECOMAX}, // Should try and achieve some sort of setback.
{ },
    };
static const ALDataSample samplea3b[] =
    {
{8,0,12,5, occType::OCC_NONE, true, false},
{8,0,24,5},
{8,0,40,5},
{8,0,56,5},
{8,1,16,5},
{8,1,28,5},
{8,1,44,5},
{8,1,56,5},
{8,2,8,5},
{8,2,20,5},
{8,2,36,5},
{8,2,44,5},
{8,2,56,5},
{8,3,8,5},
{8,3,24,5},
{8,3,32,5},
{8,3,40,5},
{8,3,56,5},
{8,4,16,5},
{8,4,28,5},
{8,4,36,5},
{8,4,52,5},
{8,5,4,5},
{8,5,16,5},
{8,5,32,5},
{8,5,40,5},
{8,5,56,5},
{8,6,16,5},
{8,6,28,5},
{8,6,36,5},
{8,6,42,5},
{8,6,52,5},
{8,7,0,5},
{8,7,8,5},
{8,7,28,5},
{8,7,40,6},
{8,7,56,6},
{8,8,8,6},
{8,8,20,6},
{8,8,32,6},
{8,8,48,6},
{8,9,0,6},
{8,9,10,10},
{8,9,12,11},
{8,9,24,8},
{8,9,28,7},
{8,9,36,7},
{8,9,48,8},
{8,9,52,9},
{8,10,0,10},
{8,10,16,8},
{8,10,24,9},
{8,10,26,8},
{8,10,36,7},
{8,10,47,7},
{8,10,56,7},
{8,11,12,7},
{8,11,28,7},
{8,11,36,7},
{8,11,48,7},
{8,12,4,7},
{8,12,20,7},
{8,12,36,7},
{8,12,47,7},
{8,13,3,7},
{8,13,20,7},
{8,13,24,6},
{8,13,27,6},
{8,13,39,7},
{8,13,55,7},
{8,14,3,7},
{8,14,8,6},
{8,14,12,6},
{8,14,28,6},
{8,14,44,6},
{8,15,0,6},
{8,15,12,6},
{8,15,19,6},
{8,15,32,6},
{8,15,44,5},
{8,15,51,5},
{8,16,12,5},
{8,16,24,5},
{8,16,36,5},
{8,16,48,5},
{8,17,4,5},
{8,17,20,17},
{8,17,28,16},
{8,17,36,17},
{8,17,47,15},
{8,17,52,16},
{8,18,8,15},
{8,18,20,17},
{8,18,24,18},
{8,18,28,16},
{8,18,39,18},
{8,18,48,17},
{8,18,52,18},
{8,19,3,16},
{8,19,15,17},
{8,19,28,17},
{8,19,39,16},
{8,19,52,16},
{8,19,56,17},
{8,20,4,17},
{8,20,20,17},
{8,20,32,16},
{8,20,43,15},
{8,21,0,17},
{8,21,11,17},
{8,21,24,16},
{8,21,36,16},
{8,21,44,16},
{8,21,52,16},
{8,22,8,17},
{8,22,20,15},
{8,22,35,17},
{8,22,48,16},
{8,22,55,17},
{8,23,4,15},
{8,23,8,16},
{8,23,20,5},
{8,23,28,5},
{8,23,48,5},
{9,0,0,5},
{9,0,16,5},
{9,0,35,5},
{9,0,52,5},
{9,0,59,5},
{9,1,12,5},
{9,1,24,5},
{9,1,36,5},
{9,1,47,5},
{9,2,4,5},
{9,2,20,5},
{9,2,28,5},
{9,2,43,5},
{9,2,51,5},
{9,3,8,5},
{9,3,24,5},
{9,3,31,5},
{9,3,44,5},
{9,3,59,5},
{9,4,11,5},
{9,4,24,5},
{9,4,35,5},
{9,4,43,5},
{9,5,0,5},
{9,5,15,5},
{9,5,28,5},
{9,5,39,5},
{9,5,56,5},
{9,6,8,5},
{9,6,20,5},
{9,6,36,5},
{9,6,44,5},
{9,6,56,5},
{9,7,8,5},
{9,7,24,5},
{9,7,35,5},
{9,7,47,5},
{9,8,3,5},
{9,8,15,5},
{9,8,31,5},
{9,8,47,5},
{9,9,4,18},
{9,9,8,16},
{9,9,20,16},
{9,9,48,5},
{9,9,56,5},
{9,10,8,5},
{9,10,23,5},
{9,10,35,5},
{9,10,48,5},
{9,11,3,15},
{9,11,8,6},
{9,11,12,6},
{9,11,23,6},
{9,11,36,5},
{9,11,51,5},
{9,12,8,5},
{9,12,16,6},
{9,12,31,6},
{9,12,39,6},
{9,12,51,6},
{9,13,0,7},
{9,13,4,6},
{9,13,12,6},
{9,13,23,6},
{9,13,35,6},
{9,13,44,5},
{9,13,51,5},
{9,14,3,6},
{9,14,16,7},
{9,14,24,6},
{9,14,28,5},
{9,14,40,6},
{9,14,43,5},
{9,14,55,6},
{9,15,4,6},
{9,15,15,6},
{9,15,28,5},
{9,15,35,5},
{9,15,47,5},
{9,15,55,5},
{9,16,8,5},
{9,16,23,5},
{9,16,39,5},
{9,16,47,5},
{9,17,7,14},
{9,17,19,14},
{9,17,43,14},
{9,17,59,14},
{9,18,7,14},
{9,18,12,16},
{9,18,16,15},
{9,18,31,14},
{9,18,52,14},
{9,19,3,14},
{9,19,7,15},
{9,19,16,15},
{9,19,24,14},
{9,19,31,15},
{9,19,43,15},
{9,19,47,15},
{9,19,55,14},
{9,20,11,15},
{9,20,28,15},
{9,20,39,15},
{9,20,51,14},
{9,20,53,15},
{9,21,4,14},
{9,21,20,14},
{9,21,40,14},
{9,21,51,14},
{9,22,4,14},
{9,22,15,14},
{9,22,23,14},
{9,22,32,14},
{9,22,36,15},
{9,22,52,14},
{9,23,4,14},
{9,23,8,15},
{9,23,15,14},
{9,23,27,15},
{9,23,32,14},
{9,23,44,5},
{9,23,56,5},
{10,0,4,5},
{10,0,15,5},
{10,0,27,5},
{10,1,7,5},
{10,1,27,5},
{10,1,39,5},
{10,1,55,5},
{10,2,4,5},
{10,2,19,5},
{10,2,35,5},
{10,2,47,5},
{10,3,3,5},
{10,3,15,5},
{10,3,27,5},
{10,3,32,5},
{10,3,47,5},
{10,4,3,5},
{10,4,19,5},
{10,4,28,5},
{10,4,39,5},
{10,4,55,5},
{10,5,11,5},
{10,5,23,5},
{10,5,31,5},
{10,5,47,5},
{10,5,57,5},
{10,6,3,5},
{10,6,15,5},
{10,6,23,5},
{10,6,40,5},
{10,6,47,5},
{10,7,3,5},
{10,7,19,5},
{10,7,31,5},
{10,7,39,5},
{10,7,55,5},
{10,8,3,5},
{10,8,19,5},
{10,8,27,5},
{10,8,43,6},
{10,8,59,6},
{10,9,15,7},
{10,9,21,6},
{10,9,23,6},
{10,9,43,15},
{10,9,55,14},
{10,10,7,16},
{10,10,19,16},
{10,10,27,7},
{10,10,43,7},
{10,10,55,7},
{10,11,7,7},
{10,11,11,7},
{10,11,26,7},
{10,11,35,7},
{10,11,46,17},
{10,11,55,16},
{10,11,59,7},
{10,12,7,8},
{10,12,11,7},
{10,12,19,7},
{10,12,27,6},
{10,12,28,6},
{10,12,38,6},
{10,12,43,7},
{10,12,47,6},
{10,12,59,18},
{10,13,7,15},
{10,13,12,15},
{10,13,23,17},
{10,13,27,15},
{10,13,43,15},
{10,13,51,16},
{10,13,55,15},
{10,14,3,5},
{10,14,14,5},
{10,14,15,6},
{10,14,19,5},
{10,14,31,5},
{10,14,36,5},
{10,14,51,5},
{10,15,13,5},
{10,15,19,5},
{10,15,31,5},
{10,15,47,5},
{10,16,3,5},
{10,16,11,5},
{10,16,27,5},
{10,16,43,16},
{10,16,47,15},
{10,16,55,16},
{10,17,7,16},
{10,17,11,15},
{10,17,19,15},
{10,17,27,16},
{10,17,39,16},
{10,17,51,16},
{10,17,55,15},
{10,18,11,15},
{10,18,27,16},
{10,18,41,15},
{10,18,55,16},
{10,18,59,15},
{10,19,7,15},
{10,19,19,16},
{10,19,27,16},
{10,19,31,15},
{10,19,39,16},
{10,19,51,15},
{10,20,3,15},
{10,20,7,14},
{10,20,15,15},
{10,20,27,16},
{10,20,39,15},
{10,20,47,16},
{10,20,51,15},
{10,21,7,16},
{10,21,15,5},
{10,21,31,5},
{10,21,51,5},
{10,22,3,5},
{10,22,11,5},
{10,22,27,5},
{10,22,35,5},
{10,22,51,5},
{10,23,0,5},
{10,23,11,5},
{10,23,27,5},
{10,23,39,5},
{10,23,55,5},
{11,0,11,5},
{11,0,27,5},
{11,0,43,5},
{11,0,59,5},
{11,1,7,5},
{11,1,19,5},
{11,1,31,5},
{11,1,47,5},
{11,2,3,5},
{11,2,15,5},
{11,2,27,5},
{11,2,35,5},
{11,2,47,5},
{11,2,59,5},
{11,3,11,5},
{11,3,19,5},
{11,3,35,5},
{11,3,39,5},
{11,3,55,5},
{11,4,7,5},
{11,4,19,5},
{11,4,39,5},
{11,4,51,5},
{11,5,3,5},
{11,5,11,5},
{11,5,27,5},
{11,5,39,5},
{11,5,51,5},
{11,6,7,5},
{11,6,19,5},
{11,6,27,5},
{11,6,35,5},
{11,6,47,5},
{11,6,59,5},
{11,7,19,5},
{11,7,31,5},
{11,7,47,5},
{11,8,3,6},
{11,8,15,5},
{11,8,23,5},
{11,8,35,5},
{11,8,55,5},
{11,9,11,8},
{11,9,19,9},
{11,9,27,6},
{11,9,35,6},
{11,9,51,6},
{11,9,59,6},
{11,10,15,6},
{11,10,31,7},
{11,10,43,7},
{11,10,51,7},
{11,11,3,6},
{11,11,15,7},
{11,11,23,7},
{11,11,35,6},
{11,11,39,6},
{11,11,55,6},
{11,12,11,6},
{11,12,23,6},
{11,12,35,6},
{11,12,51,6},
{11,12,59,6},
{11,13,7,6},
{11,13,23,6},
{11,13,35,6},
{11,13,47,6},
{11,14,3,6},
{11,14,15,5},
{11,14,23,5},
{11,14,31,5},
{11,14,43,5},
{11,14,59,5},
{11,15,11,5},
{11,15,23,5},
{11,15,35,5},
{11,15,47,5},
{11,15,59,5},
{ },
    };
TEST(AmbientLightOccupancyDetection,samplea0)
{
    simpleDataSampleRun(samplea0);
}
TEST(AmbientLightOccupancyDetection,samplea0b)
{
    simpleDataSampleRun(samplea0b);
}
//TEST(AmbientLightOccupancyDetection,samplea1)
//{
//    simpleDataSampleRun(samplea1, true);
//}
TEST(AmbientLightOccupancyDetection,samplea1b)
{
    simpleDataSampleRun(samplea1b);
}
//TEST(AmbientLightOccupancyDetection,samplea2)
//{
//    simpleDataSampleRun(samplea2);
//}
TEST(AmbientLightOccupancyDetection,samplea2b)
{
    simpleDataSampleRun(samplea2b);
}
//TEST(AmbientLightOccupancyDetection,samplea3)
//{
//    // Very difficult data set; poor lighting.   TODO-1087
//    simpleDataSampleRun(samplea3, true);
//}
TEST(AmbientLightOccupancyDetection,samplea3b)
{
    simpleDataSampleRun(samplea3b);
}



// Test combined weighted results to help minimise overall error.
// This can be used for data sets that would fail some tests stand-alone.
// Generally only used on data sets covering several days.
// Weight by relative importance eg how representative of target households.
// Computes core non-sensitive values only for now.
// Weights are nominally [0.0,1.0] but can be any small non-negative value.
//
// Key stats to test/combine:
//   * Available savings percentage.
//   * Amount setback is too high (discomfort).
//   * Amount anticipation is missed (discomfort).
TEST(AmbientLightOccupancyDetection,weightedResults)
{
    std::vector<std::pair<float, SimpleFlavourStatCollection>> results;

    SimpleFlavourStatCollection samplea3FSC;
    simpleDataSampleRun(samplea3, true, &samplea3FSC);
    results.push_back(std::make_pair(0.3f, samplea3FSC));

    SimpleFlavourStatCollection samplea1FSC;
    simpleDataSampleRun(samplea1, true, &samplea1FSC);
    results.push_back(std::make_pair(0.3f, samplea1FSC));

    SimpleFlavourStatCollection samplea2FSC;
    simpleDataSampleRun(samplea2, true, &samplea2FSC);
    results.push_back(std::make_pair(0.3f, samplea2FSC));

    // Validate collected results.
    for(auto const& p: results)
        {
        // Ensure 'vanilla' results have been computed.
        ASSERT_FALSE(p.second.getSensitive());
        ASSERT_EQ(BL_FROMSTATS, p.second.getBlending());
        // Ensure that weighting is non-negative (and non-NaN).
        ASSERT_TRUE(0.0f <= p.first);
        }
}


/** TODO

 * Complete TEST(AmbientLightOccupancyDetection,weightedResults).

 * Specific narrow non-data-driven test that
   light *brielfy* on in middle of the night does not trigger occupancy.

 */
